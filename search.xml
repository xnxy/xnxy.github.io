<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iOS开发适配iOS11&amp;iPhone X 、Xcode9遇到的坑</title>
    <url>/2017/10/12/2017-10-12/</url>
    <content><![CDATA[<h2 id="1-tableView向下偏移，部分UIScrollView布局出现混乱。"><a href="#1-tableView向下偏移，部分UIScrollView布局出现混乱。" class="headerlink" title="1.tableView向下偏移，部分UIScrollView布局出现混乱。"></a>1.<code>tableView</code>向下偏移，部分<code>UIScrollView</code>布局出现混乱。</h2><blockquote>
<p>   原因：<br>   因<code>iOS11</code>弃用了<code>automaticallyAdjustsScrollViewInsets</code> 使用了<code>contentInsetAdjustmentBehavior</code>代替。</p>
</blockquote>
<blockquote>
<p>解决方法如下,其中<code>@available(iOS 11.0, *)</code>表示在<code>iOS11</code>版本以上可用。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (@available(iOS 11.0, *)) &#123;</span><br><span class="line">self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">self.automaticallyAdjustsScrollViewInsets = NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然我们可以定义个宏</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define  KAdjustsScrollViewInsets_NO(scrollView,vc)\</span><br><span class="line">_Pragma(&quot;clang diagnostic push&quot;) \</span><br><span class="line">_Pragma(&quot;clang diagnostic ignored \&quot;-Wdeprecated-declarations\&quot;&quot;) \</span><br><span class="line">if (@available(iOS 11.0,*))  &#123;\</span><br><span class="line">scrollView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;\</span><br><span class="line">&#125; else &#123;\</span><br><span class="line">self.automaticallyAdjustsScrollViewInsets = NO;\</span><br><span class="line">&#125;\</span><br><span class="line">_Pragma(&quot;clang diagnostic pop&quot;) \</span><br></pre></td></tr></table></figure>

<h2 id="2-TableView的区头、区尾、cell高度变大。"><a href="#2-TableView的区头、区尾、cell高度变大。" class="headerlink" title="2.TableView的区头、区尾、cell高度变大。"></a>2.<code>TableView</code>的区头、区尾、<code>cell</code>高度变大。</h2><blockquote>
<p>原因：因为<code>TaBleView</code>的 <code>estimatedRowHeight</code>、<code>estimatedSectionHeaderHeight</code>、<code>estimatedSectionFooterHeight</code>三个高度由默认的<code>0</code>变成了<code>UITableViewAutomaticDimension</code>，导致了高度计算不对。</p>
</blockquote>
<blockquote>
<p>解决方法：</p>
<p>在相应界面，将三个属性都设为<code>0</code>；</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (@available(iOS 11.0, *)) &#123;</span><br><span class="line">_tableView.estimatedRowHeight = 0;</span><br><span class="line">_tableView.estimatedSectionHeaderHeight = 0;</span><br><span class="line">_tableView.estimatedSectionFooterHeight = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了方便我们也可以定义宏</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define TableViewCloseTheEstimate(tableView)\</span><br><span class="line">if (@available(iOS 11.0, *)) &#123;\</span><br><span class="line">tableView.estimatedRowHeight = 0;\</span><br><span class="line">tableView.estimatedSectionHeaderHeight = 0;\</span><br><span class="line">tableView.estimatedSectionFooterHeight = 0;\</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然我们如果想全局都将这三个属性设为<code>0</code>，也可以在<code>AppDelegate.m</code> 中进行全局设置。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (@available(iOS 11.0, *)) &#123;</span><br><span class="line">[UITableView appearance].estimatedRowHeight = 0;</span><br><span class="line">[UITableView appearance].estimatedSectionHeaderHeight = 0;</span><br><span class="line">[UITableView appearance].estimatedSectionFooterHeight = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-部分Block警告"><a href="#3-部分Block警告" class="headerlink" title="3.部分Block警告"></a>3.部分<code>Block</code>警告</h2><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-12/block.png" alt="image"></p>
<blockquote>
<p>例如：</p>
</blockquote>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-12/block-1.png" alt="image"></p>
<blockquote>
<p> 原因：定义未带参数的<code>Block</code>时，<code>Xcode9</code>中会报上面错误。</p>
</blockquote>
<blockquote>
<p>解决方法：</p>
</blockquote>
<ul>
<li>参数位置为 <code>void</code> 。</li>
<li>部分第三方也有此种警告。你不可能一个个去修改修改，所以我们需要在<code>Build Setting </code>——&gt; <code>Other Warning Flags</code> 中添加：<code>-Wno-strict-prototypes</code>,然后再<code>Clean</code>、<code>Build</code>。这种方法只是屏蔽警告……</li>
</ul>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-12/block-2.png" alt="image"></p>
<h2 id="4-ReactiveCocoa-Unknown-warning-group-39-Wreceiver-is-weak-39-ignored-警告"><a href="#4-ReactiveCocoa-Unknown-warning-group-39-Wreceiver-is-weak-39-ignored-警告" class="headerlink" title="4.ReactiveCocoa Unknown warning group &#39;-Wreceiver-is-weak&#39;,ignored 警告"></a>4.<code>ReactiveCocoa Unknown warning group &#39;-Wreceiver-is-weak&#39;,ignored</code> 警告</h2><blockquote>
<p>原因：之前的<code>Xcode</code>中如果消息的接收者是一个<code>weak</code>对象时，<code>clang</code>编译器会报 <code>receiver-is-weak</code>警告，所以在<code>ReactiveCocoa</code>中添加了下方的<code>push</code>&amp;<code>pop</code>以消除警告。而在<code>Xcode9</code>中<code>clang</code>已经把这个警告给移除，所以再添加下方<code>push</code>&amp;<code>pop</code>就会有警告。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define RACObserve(TARGET, KEYPATH) \</span><br><span class="line">(&#123; \</span><br><span class="line">_Pragma(&quot;clang diagnostic push&quot;) \</span><br><span class="line">_Pragma(&quot;clang diagnostic ignored \&quot;-Wreceiver-is-weak\&quot;&quot;) \</span><br><span class="line">__weak id target_ = (TARGET); \</span><br><span class="line">[target_ rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:self]; \</span><br><span class="line">_Pragma(&quot;clang diagnostic pop&quot;) \</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决方法：</p>
<p>将<code>pod &#39;ReactiveCocoa&#39;, &#39;2.5&#39;</code>换成下方。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;ReactiveCocoa&#x27;, :git =&gt; &#x27;https://github.com/zhao0/ReactiveCocoa.git&#x27;, :tag =&gt; &#x27;2.5.2&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="5-友盟社会化组件在Xcode9上无法编译。"><a href="#5-友盟社会化组件在Xcode9上无法编译。" class="headerlink" title="5. 友盟社会化组件在Xcode9上无法编译。"></a>5. 友盟社会化组件在<code>Xcode9</code>上无法编译。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pods/UMengSocialCOM/Umeng_SDK_Social_iOS_ARM64_5.2.1/UMSocial_Sdk_5.2.1/SocialSDKXib/UMSCommentDetailController.xib: warning: Internationalization is not available when compiling for targets before iOS 6.0</span><br></pre></td></tr></table></figure>


<blockquote>
<p>原因：之前引用的<code>pod &#39;UMengSocialCOM&#39;, &#39;~&gt; 5.2.1&#39;</code>，此版本友盟已不再维护，替换成<code>UMengUShare</code>。<br>因项目中只使用了<code>微信</code>、<code>微博</code>、<code>QQ</code>的登录和分享，所以<code>Podfile</code>文件中将 <code>pod &#39;UMengSocialCOM&#39;, &#39;~&gt; 5.2.1&#39;</code> 替换为👇</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#友盟社会化组件</span><br><span class="line">pod &#x27;UMengUShare/Network&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br><span class="line">pod &#x27;UMengUShare/Core&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br><span class="line">pod &#x27;UMengUShare/UI&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br><span class="line">pod &#x27;UMengUShare/Plugin&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br><span class="line">pod &#x27;UMengUShare/Social/WeChat&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br><span class="line">pod &#x27;UMengUShare/Social/QQ&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br><span class="line">pod &#x27;UMengUShare/Social/Sina&#x27;, &#x27;~&gt; 6.4.5&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同时为了后期的维护，我们对所需要用到的接口进行了二次封装；</p>
</blockquote>
<h2 id="6-iPhone-X-中-TabBar下方多了一条透明区域。"><a href="#6-iPhone-X-中-TabBar下方多了一条透明区域。" class="headerlink" title="6.iPhone X 中 TabBar下方多了一条透明区域。"></a>6.<code>iPhone X</code> 中 <code>TabBar</code>下方多了一条透明区域。</h2><blockquote>
<p>原因： <code>iPhone X</code> 的底部是预留给系统功能的一个区域 <code>Home Indicator</code>, 高度<code>34pt</code>。如果使用的系统的<code>TabBar</code>,那么<code>Home Indicator</code>就会延展相应的<code>barTintColor</code>，而我们使用是自定义的。</p>
</blockquote>
<blockquote>
<p>解决方法：<br>我们在所以<code>ViewContrller</code>继承的基类<code>BaseViewController</code>中添加了<code>self.edgesForExtendedLayout = UIRectEdgeNone</code>;</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (instancetype) init &#123;</span><br><span class="line">self = [super init];</span><br><span class="line">if (self) &#123;</span><br><span class="line">self.edgesForExtendedLayout = UIRectEdgeNone;</span><br><span class="line">&#125;</span><br><span class="line">return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改完后，布局可能有所变化。<br>就比如我们的一些布局为：<code>make.top.equalTo(self.view.top).offset(kNavigationAndStatusBarHeight)</code>;  需要改为：<code>make.top.equalTo(self.view.top)</code>；</p>
</blockquote>
<h2 id="7-iPhone-X中状态栏高度变高"><a href="#7-iPhone-X中状态栏高度变高" class="headerlink" title="7.iPhone X中状态栏高度变高"></a>7.<code>iPhone X</code>中状态栏高度变高</h2><blockquote>
<p>原因: <code>iPhone X </code>全面屏，增加了<code>刘海儿</code>，高度从之前的<code>20pt</code>变成了<code>44pt</code>。<br>所以我们定义宏的时候就不能直接写死。</p>
</blockquote>
<blockquote>
<p>解决方法：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define kStatusBarHeight ([[UIApplication sharedApplication] statusBarFrame].size.height)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同时补上定义的其他宏</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define kStatusBarHeight ([[UIApplication sharedApplication] statusBarFrame].size.height)</span><br><span class="line">#define kNavigationBarHeight 44.f</span><br><span class="line">#define kNavigationAndStatusBarHeight (kStatusBarHeight + 44.f)</span><br><span class="line">#define kTabBarHeight 49.f</span><br><span class="line">#define KiPhoneXTabBarHeight (34.f + 49.f)</span><br><span class="line">#define KHomeIndicatorHeight 34.f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define kSCREEN_WIDTH          ([UIScreen mainScreen].bounds.size.width)</span><br><span class="line">#define kSCREEN_HEIGHT         ([UIScreen mainScreen].bounds.size.height)</span><br><span class="line"></span><br><span class="line">// iPhone5 or iPhone5s</span><br><span class="line">#define  iPhone5_5s_SE     (kSCREEN_WIDTH == 320.f &amp;&amp; kSCREEN_HEIGHT == 568.f)</span><br><span class="line"></span><br><span class="line">//iPhone6 or iPhone6s or iPhone7 or iPhone8</span><br><span class="line">#define  iPhone6_6s_7_8     (kSCREEN_WIDTH == 375.f &amp;&amp; kSCREEN_HEIGHT == 667.f)</span><br><span class="line"></span><br><span class="line">//iPhone6Plus or iPhone6sPlus or iPhone7Plus or iPhone8Plus</span><br><span class="line">#define  iPhone6Plus_6sPlus_7Plus_8Plus (kSCREEN_WIDTH == 414.f &amp;&amp; kSCREEN_HEIGHT == 736.f)</span><br><span class="line"></span><br><span class="line">//iPhone X</span><br><span class="line">#define iPhoneX     (kSCREEN_WIDTH == 375.f &amp;&amp; kSCREEN_HEIGHT == 812.f)</span><br></pre></td></tr></table></figure>





<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/overview/themes/">iOS11人机交互指南</a></li>
<li><a href="http://www.jianshu.com/p/7b15f92fc73e">iOS11人机交互指南-01 iPhone X概览</a></li>
<li><a href="http://www.jianshu.com/p/c355cc4b12c2">适配iOS11&amp;iPhone X 的一些坑</a></li>
<li><a href="https://www.apple.com/cn/iphone/compare/">iPhone机型比较</a></li>
<li><a href="http://www.jianshu.com/p/26fc39135c34">简书App适配iOS11</a></li>
<li><a href="http://www.jianshu.com/p/9376eca870b8">iOS开发 设配iOS11</a></li>
<li><a href="https://tech.meituan.com/iPhoneX%E5%88%98%E6%B5%B7%E6%89%93%E7%90%86%E6%8C%87%E5%8C%97.html">iPhone X 刘海打理指北</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247484087&idx=1&sn=c7465eab852fb95a043b20826b40ad91&chksm=e9d0c955dea740439b3fa1c839745a99281800dc494509d6898b60f4806035447beb6327f094&scene=38#wechat_redirect">iPhone X 刘海儿打理指南</a></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>iPhone X</tag>
      </tags>
  </entry>
  <entry>
    <title>公司iOS项目MVVM架构模式设计及分析MVVM+RAC的优缺点</title>
    <url>/2017/10/19/2017-10-19/</url>
    <content><![CDATA[<hr>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr>
<p>&amp;emsp;&amp;emsp;这篇博客主要是介绍公司的iOS项目MVVM架构模式的设计及分析MVVM+RAC的优缺点。</p>
<hr>
<h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-19/MVC.png" alt="MVC"></p>
<blockquote>
<p>Model   : 实体模型</p>
<p>View    : UI控件，负责View的绘制及用户的交互。</p>
<p>Controller : 业务逻辑、数据处理和UI处理</p>
</blockquote>
<p>MVC, Model - View - Controller,一个很古老很经典的设计模式，拥有大概50年的历史。而MVC这个架构模式的最大优点就是其概念简单，易于理解，任何一个软件工程毕业的学生都应该在大学课程中学习过。但如果开发过程中使用不当，很可能使大量的代码集中在Controller之中，使Controller变得十分臃肿。</p>
<hr>
<h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-19/MVP.png" alt="MVP"></p>
<blockquote>
<p>Model   :  实体模型</p>
<p>View    ：UI控件，负责View的绘制及用户的交互。</p>
<p>Presenter   : 负责完成View和Model之间的交互与业务逻辑。</p>
</blockquote>
<p>MVP, Model - View - Presenter,其实就是将MVC中Controller换成Presenter，是MVC的一个变种。其目的是完全切断View和Model之间的联系，由Presenter充当桥梁对视图和模型进行解耦。</p>
<hr>
<h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-19/MVVM.png" alt="MVVM"></p>
<blockquote>
<p>Model   : 实体模型。</p>
<p>View    : UI控件，负责View的绘制及用户的交互。</p>
<p>ViewModel :负责View和Model之间的交互，业务逻辑等。</p>
</blockquote>
<p>MVVM, Model - View - ViewModel, 一个从MVC模式中演化出来的设计模式。在iOS开发过程中，将原本在Controller中的业务逻辑、数据请求，数据处理 放到ViewModel中，从而有效地减少ViewController中的代码量，减轻ViewController的负担。同时将业务逻辑等放到ViewModel中也方便后期的测试与维护。</p>
<hr>
<h2 id="公司MVVM架构模式的设计"><a href="#公司MVVM架构模式的设计" class="headerlink" title="公司MVVM架构模式的设计"></a>公司MVVM架构模式的设计</h2><hr>
<p>&amp;emsp;&amp;emsp;因为MVVM架构模式的方便测试、维护，复用性高和低耦合等特性，所以公司的项目采用MVVM的架构模式。同时在iOS客户端的开发过程中，我们使用了ReactiveCocoa来实现其绑定机制。</p>
<h4 id="关于ReactiveCocoa"><a href="#关于ReactiveCocoa" class="headerlink" title="关于ReactiveCocoa"></a>关于ReactiveCocoa</h4><p>&amp;emsp;&amp;emsp; ReactiveCocoa 简称RAC，是由GitHub开源的一个应用于iOS和OS X开发的新框架。集合了函数式编程和响应式编程，所以RAC也被称为函数响应式编程框架（FRP）。</p>
<p>&amp;emsp;&amp;emsp; 在开发过程中RAC解决了传统开发中状态之间依赖过多、Controller过于臃肿等问题。提供了统一的消息传递机制，降低了类与类之间的耦合度，提高了开发效率。具体使用方法可以参看GitHub中<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa的详细文档</a>。</p>
<h4 id="公司某项目目录结构"><a href="#公司某项目目录结构" class="headerlink" title="公司某项目目录结构"></a>公司某项目目录结构</h4><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-19/%E5%85%AC%E5%8F%B8%E6%9F%90%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="公司某项目目录结构"></p>
<p>项目中的目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 第三方sdk(应该用Frameworks)：主要存放一些暂不支持CocoaPods的第三方库。</span><br><span class="line">- Application: 程序的入口文件和配置文件</span><br><span class="line">- BaseClass： 基类、公共扩展类、公共View</span><br><span class="line">- NetWork：网络请求类（对AFNetworking的二次封装）</span><br><span class="line">- Utils: 工具类</span><br><span class="line">- ViewModels：相应模块对应的ViewModel</span><br><span class="line">- Model：实体模型(公司数据结构使用Protobuf，所以Model使用脚本直接生成)</span><br><span class="line">- Views: 相应模块的界面相关（每一个模块对应一个ViewModel）</span><br></pre></td></tr></table></figure>



<p>&amp;emsp;&amp;emsp;每种语言发展到一定阶段都会出现相应的依赖管理工具，例如Java的Maven，nodejs的npm，而iOS依赖管理工具是CocoaPods。CocoaPods的出现为我们节省了集成、管理第三方库的时间，所以公司的项目同样使用了CocoaPods管理第三方库。</p>
<p>&amp;emsp;&amp;emsp;而在数据结构方面我们使用了Google的Protocol Buffer(简称：Protobuf)。而Protobuf是google公司内部的混合语言数据标准，是一种轻便高效的结构化数据存储格式，可以用于结构化数据的序列化。</p>
<p>&amp;emsp;&amp;emsp;使用时需要先配置开发环境，具体可以查看之前写的一篇博客<a href="http://www.jianshu.com/p/213178307bcf">《Mac 下配置protobuf（3.2.0）开发环境》</a>。如果使用的是Proto2可以查看另篇博客<a href="http://www.jianshu.com/p/8c6c009bc500">《ProtocolBuffer for Objective-C 运行环境配置及使用》</a>。</p>
<hr>
<h2 id="MVVM-RAC的优缺点"><a href="#MVVM-RAC的优缺点" class="headerlink" title="MVVM + RAC的优缺点"></a>MVVM + RAC的优缺点</h2><hr>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-19/MCVMVMV.gif" alt="MCVMVMV.gif"></p>
<p>&amp;emsp;&amp;emsp; RAC和MVVM上面已经介绍过。现在越来越多的项目已经开始使用MVVM的架构模式，同时RAC已经成为MVVM的标配。由上图动画可以看出，对于一个简单的MVC架构的iOS应用，很容易调整到MVVM的。</p>
<p>&amp;emsp;&amp;emsp;当然在我们享受函数响应式编程框架带来的便捷的同时，也需要承受其带来缺点。但随着自己能力的提高，这些所谓的缺点也会渐渐消失。如果有兴趣也可以查看<a href="https://tech.meituan.com/tag/ReactiveCocoa">美团点评技术团队关于RAC的研究</a>，相信你定会有所收获。</p>
<blockquote>
<ul>
<li>优点：</li>
</ul>
<p>&amp;emsp;&amp;emsp;1. 方便测试与维护。将业务逻辑、网络请求，数据处理放到ViewModel中便于后期单元测试、维护。</p>
<p>&amp;emsp;&amp;emsp;2. 低耦合。双向绑定，View可以根据Model的改变而进行修改，一个ViewModel可以绑定到不同的View上。</p>
<p>&amp;emsp;&amp;emsp;3. 复用性高。可以将一些视图逻辑放到ViewModel中，让很多View重用此视图逻辑等。</p>
<ul>
<li>缺点：</li>
</ul>
<p>&amp;emsp;&amp;emsp;1. ReactiveCocoa学习成本较高。大部分人对MVVM不太熟悉，基于绑定机制进行编程需要一定的学习成本才能较好的上手。</p>
<p>&amp;emsp;&amp;emsp;2. 数据绑定使Debug更困难。数据绑定会使程序异常传到其他位置，由上图可以看出，当View上发现bug时，有可能是ViewModel造成的，也可能是Model造成的。</p>
</blockquote>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller</a></li>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter">Model-View-Presenter</a></li>
<li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel">Model-View-ViewModel</a></li>
<li><a href="http://www.sprynthesis.com/2014/12/06/reactivecocoa-mvvm-introduction/">ReactiveCocoa and MVVM, an Introduction</a></li>
<li><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></li>
<li><a href="http://rxmarbles.com/">RxJS Marbles</a></li>
<li><a href="https://developers.google.com/protocol-buffers/docs/overview">ProtoBuf开发者指南</a></li>
<li><a href="https://cocoapods.org/">CocoaPods官网</a></li>
<li><a href="https://tech.meituan.com/tag/ReactiveCocoa">美团点评ReactiveCocoa归档</a></li>
<li><a href="https://www.zhihu.com/question/20148405">你对MVC、MVP、MVVM 三种组合模式分别有什么样的理解？</a></li>
<li><a href="http://yulingtianxia.com/blog/2015/05/21/ReactiveCocoa-and-MVVM-an-Introduction/">ReactiveCocoa和MVVM入门</a></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS客户端UI界面设计的原则及规范</title>
    <url>/2017/10/20/2017-10-20/</url>
    <content><![CDATA[<p>为方便产品、UI设计师、开发人员在产品细节上达成共识，减少沟通成本，提升开发效率，特整理iOS设备的App设计规范。此规范适用于iOS平台所有App及大多数iOS端网页设计。</p>
<h3 id="1-标准单位"><a href="#1-标准单位" class="headerlink" title="1.标准单位"></a>1.标准单位</h3><ul>
<li>px: pixel,像素，电子屏幕上组成一幅图画或照片的最基本单元;</li>
<li>pt: point，点，印刷行业常用单位，等于1&#x2F;72英寸;</li>
<li>ppi: pixel per inch，每英寸像素数，该值越高，则屏幕越细腻;</li>
<li>dpi: dot per inch，每英寸多少点，该值越高，则图片越细腻;</li>
<li>dp: dip，Density-independent pixel, 是安卓开发用的长度单位，1dp表示在屏幕像素点密度为160ppi时1px长度;</li>
<li>sp: scale-independent pixel，安卓开发用的字体大小单位。</li>
</ul>
<p>ps:具体可参考<a href="http://www.woshipm.com/pmd/176328.html">八一八那些px、pt、ppi、dpi、dp、sp之间的关系</a></p>
<h3 id="2-应用图标"><a href="#2-应用图标" class="headerlink" title="2.应用图标"></a>2.应用图标</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/AppIcon.png" alt="AppIcon.png"></p>
<ul>
<li>图标尺寸分别为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">40*40</span><br><span class="line">60*60</span><br><span class="line"></span><br><span class="line">58*58</span><br><span class="line">87*87</span><br><span class="line"></span><br><span class="line">80*80</span><br><span class="line">120*120</span><br><span class="line"></span><br><span class="line">120*120</span><br><span class="line">180*180</span><br><span class="line"></span><br><span class="line">1024*1024</span><br></pre></td></tr></table></figure>
<ul>
<li>其格式必须为PNG或JPG，最低分辨率为72DPI，并采用RGB色彩空间。</li>
</ul>
<p>ps: 具体可参考<a href="https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/image-size-and-resolution/">Image Size and Resolution</a></p>
<h3 id="3-启动页"><a href="#3-启动页" class="headerlink" title="3.启动页"></a>3.启动页</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/%E5%90%AF%E5%8A%A8%E9%A1%B5%E5%B0%BA%E5%AF%B8.png" alt="启动页尺寸"></p>
<ul>
<li>其格式必须为PNG或JPG，最低分辨率为72DPI，并采用RGB色彩空间。</li>
<li>因项目中使用LaunchScreen.storyboard加载启动页,需要启动页的图片为：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">750px * 1334px</span><br><span class="line">1125px * 2436px</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ps:具体可参考<a href="https://developer.apple.com/ios/human-interface-guidelines/icons-and-images/launch-screen/">Launch Screen</a></p>
<h3 id="4-各机型尺寸比较"><a href="#4-各机型尺寸比较" class="headerlink" title="4.各机型尺寸比较"></a>4.各机型尺寸比较</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/iPhone%E6%9C%BA%E5%9E%8B%E5%B0%BA%E5%AF%B8%E6%AF%94%E8%BE%83.png" alt="iPhone机型尺寸比较"></p>
<ul>
<li>UI出图以6&#x2F;6S&#x2F;7&#x2F;8为准，即 750 * 1334 px。从中切出的图标即为2x 图，3x图尺寸为2x图的1.5倍。</li>
</ul>
<p>ps:具体可参考<a href="https://www.apple.com/cn/iphone/compare/">iPhone机型比较</a></p>
<h3 id="5-界面基本组成元素"><a href="#5-界面基本组成元素" class="headerlink" title="5.界面基本组成元素"></a>5.界面基本组成元素</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/iPhone%E7%95%8C%E9%9D%A2%E5%9F%BA%E7%A1%80%E6%8E%A7%E4%BB%B6%E5%B0%BA%E5%AF%B8.png" alt="iPhone 界面基础控件尺寸"></p>
<p>具体控件名称如下：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/%E7%95%8C%E9%9D%A2%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90%E5%85%83%E7%B4%A0.png" alt="界面基本组成元素"></p>
<ul>
<li>在<code>6/6S/7/8</code>中即像素尺寸为<code>750*1334 px</code>的屏幕中，其状态栏高度为<code>40px</code>(开发尺寸为<code>20pt</code>)，导航栏高度为<code>88px</code>(开发尺寸为<code>44pt</code>)，Tab Bar 高度为<code>98px</code>(开发尺寸为<code>49pt</code>)。</li>
<li><code>6+/6S+/7+/8+</code> 的状态栏、导航栏、TabBar 高度分别为相应开发尺寸的3倍。</li>
<li>iPhone X因有刘海儿，其状态栏的开发尺寸高度为<code>44pt</code>(像素尺寸为<code>44 X 3 px</code> )。</li>
<li>iPhone X没有了Home键，iPhone X的底部预留给系统功能的一个区域-<code>Home Indicator</code>,开发高度<code>34pt</code>（像素尺寸高度<code>34 X 3 px</code>）。</li>
</ul>
<p>ps: 具体情况和其他控件尺寸可参考<a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/">Human Interface Guidelines</a></p>
<h3 id="6-图标命名规范"><a href="#6-图标命名规范" class="headerlink" title="6.图标命名规范"></a>6.图标命名规范</h3><p>设计时可以使用6&#x2F;6S&#x2F;7&#x2F;8(像素尺寸：750px  <code>*</code>  1334px)的尺寸作为基准，切图时需要两套图分别为：2x图（750px * 1334px 的UI切片即为2x图）和3x图(尺寸为2x的1.5倍，1x图的3倍)。</p>
<ul>
<li>图片格式：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 普通：image.png</span><br><span class="line">- 两倍图：image@2x.png</span><br><span class="line">- 三倍图：image@3x.png</span><br></pre></td></tr></table></figure>
<ul>
<li>保存：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">png-24</span><br><span class="line">保留透明度</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>尺寸：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">像素,尽量不要出现小数，从750px * 1334px 切下的即为两倍图（@2x）</span><br><span class="line">三倍图为两倍图的1.5倍，为一倍图的3倍。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>命名：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块_功能_控件_状态@2x.png  或 模块_功能_控件_状态@3x.png</span><br><span class="line"></span><br><span class="line">控件名需要使用英文，比如某个设置列表中的按钮：setting_list_btn_normal@2x.png</span><br><span class="line"></span><br><span class="line">当然切完图后也可以让技术自己命名。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-关于iPhone-X"><a href="#7-关于iPhone-X" class="headerlink" title="7.关于iPhone X"></a>7.关于iPhone X</h3><p>iPhone X增加了刘海儿（状态栏开发尺寸高度44pt）和 Home Indicator(开发尺寸高度34pt)。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/iPhoneX%E7%95%8C%E9%9D%A2%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0.png" alt="iPhone X界面基本元素"></p>
<p>iPhone X的坐标系统以及能显示内容区域如下图：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-20/iPhoneX%E7%9A%84%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F%E5%8F%8A%E8%83%BD%E6%98%BE%E7%A4%BA%E5%86%85%E5%AE%B9%E5%8C%BA%E5%9F%9F.png" alt="iPhone X的坐标系统以及能显示内容区域"></p>
<ul>
<li>设计过程中尽量避免控件被刘海儿和Home Indicator遮住的情况。</li>
</ul>
<p>ps: 具体可以参考 <a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/">苹果相应文档</a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ul>
<li>所有页面中不要出现安卓、Android等其他设备终端的名称，提交审核会被拒。</li>
<li>所有页面不要出现安卓设备UI控件（如状态栏等），提交审核会被拒。</li>
<li>App图标不要跟Apple的logo风格相似，提交审核会被拒。</li>
<li>新应用的icon也不能跟公司其他项目的icon过于相似，提交审核会被拒。</li>
</ul>
<p>ps: 具体详情可以参考<a href="https://developer.apple.com/design/tips/cn/">UI设计注意事项</a>和<a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/">Human InterFace Guidelines</a>。</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://developer.apple.com/design/tips/cn/">UI设计注意事项</a></li>
<li><a href="https://www.apple.com/cn/iphone/compare/">iPhone机型比较</a></li>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/">Human InterFace Guidelines</a></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS客户端公共WIFI解决方案探究</title>
    <url>/2017/10/23/2017-10-23/</url>
    <content><![CDATA[<p>众所周知，iOS系统WIFI相应的API极少，而且大部分API为私有接口，一不小心审核就可能被拒。<a href="https://00red.com/blog/2015/01/14/teacher-wifi-solution/">iOS9之前公共WIFI的解决方案</a>已不适用。在iOS9发布之后，苹果推出了NetworkExtension,其中的NEHotspotHelper可以获取WIFI列表。同样我们也可以根据用户所在的位置，服务器返回用户附近的WIFI列表。</p>
<h3 id="方案一-：使用NEHotspotHelper获取WIFI列表。"><a href="#方案一-：使用NEHotspotHelper获取WIFI列表。" class="headerlink" title="方案一 ：使用NEHotspotHelper获取WIFI列表。"></a>方案一 ：使用NEHotspotHelper获取WIFI列表。</h3><p>在使用NEHotspotHelper相应API的时候需要申请<a href="https://developer.apple.com/contact/network-extension">“Network Extension Framework”使用权限</a>，大概需要三周左右。</p>
<p>相应API可以参考<a href="https://developer.apple.com/documentation/networkextension/nehotspothelper?language=objc">Developer Documentation</a>，如下所示。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-10-23/WIFI.png" alt="NEHotspotNetwork"></p>
<p>代码实现扫描周围无线网络如下，但在本人测试的过程中因为没申请<a href="https://developer.apple.com/contact/network-extension">“Network Extension Framework”使用权限</a>的原因，此方法并没返回相应数据，所以并没有获取到设备的WIFI列表(尴尬ing~~)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark --- 扫描周围的无线网络 ---</span><br><span class="line">- (BOOL)scanWifiInfo&#123;</span><br><span class="line"></span><br><span class="line">NSMutableDictionary* options = [[NSMutableDictionary alloc] init];</span><br><span class="line">[options setObject:@&quot;NEHotspotHelper&quot; forKey: kNEHotspotHelperOptionDisplayName];</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;EFNEHotspotHelperDemo&quot;, NULL);</span><br><span class="line"></span><br><span class="line">BOOL returnType = [NEHotspotHelper registerWithOptions: options queue: queue handler: ^(NEHotspotHelperCommand * cmd) &#123;</span><br><span class="line"></span><br><span class="line">NEHotspotNetwork* network;</span><br><span class="line">if (cmd.commandType == kNEHotspotHelperCommandTypeEvaluate || cmd.commandType == kNEHotspotHelperCommandTypeFilterScanList) &#123;</span><br><span class="line">// 遍历 WiFi 列表，打印基本信息</span><br><span class="line">for (network in cmd.networkList) &#123;</span><br><span class="line">NSString* wifiInfoString = [[NSString alloc] initWithFormat: @&quot;SSID: %@\nMac地址: %@\n信号强度: %f\nCommandType:%ld\n\n&quot;,</span><br><span class="line">network.SSID, network.BSSID, network.signalStrength, (long)cmd.commandType];</span><br><span class="line">NSLog(@&quot;------ %@ ------&quot;,wifiInfoString);</span><br><span class="line"></span><br><span class="line">// 检测到指定 WiFi 可设定密码直接连接</span><br><span class="line">if ([network.SSID isEqualToString: @&quot;测试 WiFi&quot;]) &#123;</span><br><span class="line">[network setConfidence: kNEHotspotHelperConfidenceHigh];</span><br><span class="line">[network setPassword: @&quot;测试 WiFi 密码&quot;];</span><br><span class="line">NEHotspotHelperResponse *response = [cmd createResponse: kNEHotspotHelperResultSuccess];</span><br><span class="line">NSLog(@&quot;Response CMD: %@&quot;, response);</span><br><span class="line">[response setNetworkList: @[network]];</span><br><span class="line">[response setNetwork: network];</span><br><span class="line">[response deliver];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">return returnType;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用NEHotspotHelper注意事项："><a href="#使用NEHotspotHelper注意事项：" class="headerlink" title="使用NEHotspotHelper注意事项："></a>使用NEHotspotHelper注意事项：</h5><ul>
<li>需要申请<a href="https://developer.apple.com/contact/network-extension">“Network Extension Framework”使用权限</a></li>
<li>需要在Info.plist中添加后台模式权限数组。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;UIBackgroundModes&lt;/key&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;string&gt;network-authentication&lt;/string&gt;</span><br><span class="line">&lt;/array&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>需要将工程中Capabilities的Background Modes开启。</li>
<li>需要将工程中Capabilities的Wireless Accessory Configuration开启。</li>
<li>需要在.entitlements中添加HotspotHelper权限代码。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">&lt;key&gt;com.apple.developer.networking.HotspotHelper&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br><span class="line">&lt;key&gt;com.apple.external-accessory.wireless-configuration&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure>

<p>此方法的缺点：</p>
<ul>
<li>只支持iOS 9 + 的设备，系统为iOS 9 以下的设备不支持。</li>
<li>调用NEHotspotHelper的API需要申请，申请通过后方可使用，否则调用无返回信息。</li>
<li>有时候会获取不到WIFI列表，需要用户到手机的 设置 -&gt;无线局域网  中开关一次WIFI，进行刷新（特么……）。</li>
<li>不安全，<a href="http://bobao.360.cn/news/detail/4102.html">iOS 10.3.1之前的设备可能存在高危漏洞</a>，还有<a href="http://bobao.360.cn/learning/detail/4562.html">WPA2系列漏洞</a>。</li>
</ul>
<p>代码地址：<a href="https://github.com/xnxy/NEHotspotNetwork/tree/master">NEHotspotNetwork</a></p>
<h3 id="方案二：根据用户所在位置，服务器返回相应WIFI列表。"><a href="#方案二：根据用户所在位置，服务器返回相应WIFI列表。" class="headerlink" title="方案二：根据用户所在位置，服务器返回相应WIFI列表。"></a>方案二：根据用户所在位置，服务器返回相应WIFI列表。</h3><p>通过上传用户所在地的经纬度，服务端返回用户所在地所有可用的WIFI列表和WIFI密码，然后用户在手机的设置中自己输入相应WIFI密码。</p>
<p>具体流程：</p>
<ol>
<li>客户端获取用户的经纬度上传服务器</li>
<li>服务器返回用户周围的所有WIFI名称和密码。</li>
<li>用户在客户端复制WIFI密码。</li>
<li>到手机的设置 -&gt;无线局域网 中找到相应WIFI 然后粘贴密码。</li>
</ol>
<p>缺点：</p>
<ul>
<li>需要用户自己到设置中进行操作。</li>
<li></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://developer.apple.com/library/content/qa/qa1942/_index.html">iOS Wi-Fi Management APIs</a></li>
<li><a href="https://developer.apple.com/documentation/networkextension/nehotspothelper?language=objc">NEHotspotHelper</a></li>
<li><a href="http://blog.zlcode.com/2016/04/28/network-extension-framework-right-apply/">申请“Network Extension Framework”使用权利</a></li>
<li><a href="http://blog.csdn.net/qq_30513483/article/details/61214081"> iOS 利用 NEHotspotHelper 获取 WiFi 列表</a></li>
<li><a href="http://bobao.360.cn/news/detail/4102.html">连个WiFi也能被黑？iOS 10.3 存在高危漏洞，请大家火速升级！</a></li>
<li><a href="http://bobao.360.cn/learning/detail/4562.html">KRACK：WPA2系列漏洞事件预警（含技术文章翻译）</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>WIFI</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS性能调优：Analyze静态分析与Instruments动态分析</title>
    <url>/2017/12/29/2017-12-29/</url>
    <content><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>公司最近刚上线了个新项目，从十一月初开始搭框架到12月18号提交，20号审核通过，总共耗时一个半月的时间。虽然并不是一个很大的项目，但相对来说时间还是略微有些仓促。</p>
<p>虽然在期间也做过简单的测试，但因为需要在圣诞节前夕上架，时间比较紧，很多隐藏的问题并未及时发现。</p>
<p>于是这周开始对项目进行静态分析和动态分析，分析其潜在的逻辑错误、内存管理错误等。等待下个版本的提交。</p>
<h3 id="Analyze-静态分析"><a href="#Analyze-静态分析" class="headerlink" title="Analyze 静态分析"></a>Analyze 静态分析</h3><p>很多博客也都对Analyze进行了详细的介绍，同时也可以搜到很多关于 Analyze静态分析的资料。</p>
<p>Analyze静态分析是Xcode自带的一个强大的性能调优工具，它能够在不运行程序的情况下直接对代码进行分析。能够快速的分析出项目中的逻辑错误、内存管理错误、声明错误、API调用错误等。</p>
<p>使用方法：</p>
<p>Xcode -&gt; Product -&gt; Analyze</p>
<p>快捷键：command + shift + b</p>
<h3 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h3><p>Instruments 也是Xcode自带的性能调优工具，它能够在程序运行的情况下对代码进行分析。能够方便地分析出代码中出现的内存泄漏、僵尸对象等和程序性能、内存分配情况。</p>
<p>使用方法：</p>
<p>Xcode -&gt; Open Developer Tool -&gt; Instruments</p>
<p>快捷键： command + i</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/instruments.png" alt="instruments"></p>
<h3 id="1、对项目进行静态分析"><a href="#1、对项目进行静态分析" class="headerlink" title="1、对项目进行静态分析"></a>1、对项目进行静态分析</h3><p>首先我们使用Analyze对项目进行分析,发现竟然那么多隐藏的问题。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/Analyze%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.png" alt="Analyze静态分析"></p>
<ul>
<li>1、第一处属于声明错误……</li>
</ul>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E9%80%BB%E8%BE%91%E9%94%99%E8%AF%AF.png" alt="逻辑错误"></p>
<p>修改后：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E9%80%BB%E8%BE%91%E9%94%99%E8%AF%AF_%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="逻辑错误_修改后"></p>
<ul>
<li>2、第二处属于内存管理错误。根据提示一行行阅读可以看出‘colorSpaceRef’ 和 ‘imageRefResized’ 使用过后未释放，那么在使用完后释放下就可以了。</li>
</ul>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E7%94%9F%E6%88%90%E6%9D%A1%E5%BD%A2%E7%A0%81.png" alt="生成条形码"></p>
<p>修改后：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E7%94%9F%E6%88%90%E6%9D%A1%E5%BD%A2%E7%A0%81_%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="生成条形码_修改后"></p>
<ul>
<li>3、第三处</li>
</ul>
<p><img src="hhttp://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/NSNumber.png" alt="NSNumber"></p>
<p>修改后：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/NSNumber_%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="NSNumber_修改后"></p>
<ul>
<li>4、第四处，封装的文件归档的代码，忘记什么时间写的了……</li>
</ul>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E6%96%87%E4%BB%B6%E5%BD%92%E6%A1%A3.png" alt="文件归档"></p>
<p>修改后：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E6%96%87%E4%BB%B6%E5%BD%92%E6%A1%A3_%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="文件归档_修改后"></p>
<h3 id="2、对项目进行动态分析。"><a href="#2、对项目进行动态分析。" class="headerlink" title="2、对项目进行动态分析。"></a>2、对项目进行动态分析。</h3><p>在使用Instruments 中的Leaks进行漏洞检测的时候发现下面的问题，吓的我立即从座位上弹了起来。不过Leaks还是很强大的，通过对源码的追踪，发现在封装的网络请求中 ‘AFURLSessionManager’重复创建未释放。</p>
<p>原因是将之前封装的HTTPS请求改成HTTP请求过程的中，忘记了 ‘AFURLSessionManager’并不是单例，然后造成了每次请求重复创建‘AFURLSessionManager’的情况。</p>
<p>同时还使用Time Profiler工具检测应用CPU使用情况、使用Zombies检测应用中是否存在僵尸对象、使用Energy Log 检测耗电情况、使用Core Animation 检测图层混合等GPU耗时、使用Network检测流量使用情况…… 并没发现问题，所以此次不再介绍。</p>
<p><img src="hhttp://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/动态分析.png" alt="动态分析"></p>
<p>修改后：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2017-12-29/%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90_%E4%BF%AE%E6%94%B9%E5%90%8E.png" alt="动态分析_ 修改后"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><ul>
<li>在此次的分析过程中除了使用静态分析和动态分析外，还使用了YYFPSLabel对帧率进行了测试，并没有发现离屏渲染等情况，所以这里也不再介绍。</li>
<li>instuments 是一个很强大的工具集，建议每次开发完后都抽出时间对项目进行测试、分析。</li>
</ul>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://www.cnblogs.com/starainDou/p/5208880.html">iOS性能调优系列：Analyze静态分析</a></li>
<li><a href="https://www.jianshu.com/p/6b97ee2eb1c0">iOS - 静态与动态内存分析</a></li>
<li><a href="https://www.jianshu.com/p/05b68c84913a">iOS 性能调优,成为一名合格iOS程序员必须掌握的技能</a></li>
<li><a href="http://www.cocoachina.com/ios/20150225/11163.html">iOS性能优化：Instruments使用实战</a></li>
<li><a href="https://www.jianshu.com/p/878bfd38666d">iOS查看屏幕帧数工具–YYFPSLabel</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
        <category>iOS性能调优</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>2017年个人总结</title>
    <url>/2018/03/09/2017%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<section style="width: 100%;" class="135bg" data-bgless="lighten:30%" data-bgopacity="40%" data-width="100%">
<img src="http://7xohp5.com1.z0.glb.clouddn.com/images/u3hA0tMNuE2tu5PUxpJ4PQ==" alt="" style="width: 100%; max-width: 100%;" data-width="100%" class="mCS_img_loaded"/>
</section>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一年又已经过去，回忆这一年的点点滴滴，仿佛都历历在目 ~ ~  哈哈~ ~ 好酸！！</p>
<p>或许自己不太敢写，毕竟是这一年的光景。自己并没有太过于努力、并没有成长太多，去年的目标还有些没有完全实现。未来将要如何？是继续实现去年制定的目标，还是重新规划未来的人生方向？这都是需要仔细和慎重考虑的事情，但最重要的是今年一定要将懒的毛病改掉[郑重脸~~]。</p>
<p>诚然，年度总结是一个审视自己的一个过程。在这一年里自己有哪些进步，有哪些不足，有哪些还有待提高。通过对一年工作、经历、学习等的总结，制定有效可行的未来计划，使自己的未来更加的丰富多彩。</p>
<p>毕竟，决定自身未来发展方向的，不是权利与财富，而是自身的心智和价值观。唯有坚持这点，才能不让自己在这个加速度的世界里迷失。</p>
<h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>年初公司从软件园搬到了观风亭，原来的一直带我的组长良伟也转到了更大的公司发展。于是，在这一年时间里暂代理组长的职位。在代理组长的期间，虽然也因很多业务的不熟悉，遇到过很多问题，但在自己不断地解决问题的同时，自己也在慢慢地提高。</p>
<p>在这一年感谢的人很多，不再一一列举。很感谢，感谢你们在我最黑暗的时刻给予帮助。也是这一年，让自己从黑暗走向光明，从幼稚走向成熟，从之前的茫然不知所措，到现在至少有些未来的目标和方向。</p>
<h3 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h3><p>学习，一个围绕自己一年的话题。在17年年初的时候，自己制定的目标中曾提过多读一些第三方库，多看些书。虽然这一年第三方库读了一些，书也买了很多，也看了很多。但总感觉缺少了些什么。</p>
<p>今年会重新制定自己的书单，多看些心理学、经济学之类的书籍。在编程方面也会多学习些底层相关方面的知识，提高自己的编程水平。</p>
<h3 id="关于旅游"><a href="#关于旅游" class="headerlink" title="关于旅游"></a>关于旅游</h3><p>关于旅行方面，仿佛在这一年里约朋友跑遍了福州的大街小巷。南后街的三坊七巷；鼓楼的福道；仓山的森林公园，铜盘的左海公园和西湖公园；六一北路的金鸡山公园；晋安区的鼓山 ~ ~。感谢朋友们的陪伴，今年我们继续浪啊！！！</p>
<p>六月有幸和庆安、欣柠坐邮轮去了趟日本，去了冲绳、宫古岛，体会了一种奢侈的宁静与祥和。体会了当地的风土人情，了解了大海的辽阔和孤寂。感触最深的应该是手扶着栏杆，享受着咸咸的海风吹来，瞭望着一片无际的大海，那种孤独与装B感吧[笑 ~ ]。</p>
<h3 id="关于投资"><a href="#关于投资" class="headerlink" title="关于投资"></a>关于投资</h3><p>从17年中旬慢慢跟着陆磊磊买了些基金，有的赚了，有的赔了。临近过年的时候将所有的基金都卖掉。最后扣掉手续费等一切费用，发现还赔了三百多，当时看到这个结果时自己也不禁苦笑不得。</p>
<p>今年偶尔也会买些基金，但更多的是买些有固定收益，浮动不是太大的基金。剩余的大部分会放到余利宝或余额宝中，毕竟一万元每天还有一元左右的利息不是[手动微笑~]。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>努力奋斗啊！不然会被抓回去结婚的呀！！！</p>
]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>关于本次偶遇优选v1.1版本更新</title>
    <url>/2018/02/07/2018-02-07/</url>
    <content><![CDATA[<h3 id="一、打包前准备"><a href="#一、打包前准备" class="headerlink" title="一、打包前准备"></a>一、打包前准备</h3><p>1、服务条款和关于优选两个Web 界面需要注释掉部分文案，审核通过后再开启；</p>
<p>2、打包前先检查是否有全局断点 ，如果有，去掉全局断点；</p>
<p>3、打包前检查是否添加了僵死对象 ，如果有，去掉僵尸对象；</p>
<p>4、 检查项目的 iOS Deployment Target 是否为8.0 （pods  和 项目） ；</p>
<p>5、检查项目的Version 和 Build（每重新打包上传APP Store<br>Build都要加一，苹果以此识别是否为新包） 是否更新；</p>
<p>6、先运行到手机，无问题后，选择 Xcode -&gt; Product - &gt; Archive  进行打包；</p>
<p>7、先打测试包（Ad Hoc），查看审核的账号是否能登录，审核账号中的数据是否正常。</p>
<h3 id="二、打包"><a href="#二、打包" class="headerlink" title="二、打包"></a>二、打包</h3><p>1、编译完成后会出现下面界面，选择Export 将打的包保存到桌面上。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-02-07/%E5%AF%BC%E5%87%BAIPA%E6%96%87%E4%BB%B6.png" alt="导出IPA文件"></p>
<p>2、选择 App Store  一直点Next ，不用任何操作。打包成功后，会让选择保存路径，将其保存到桌面上或其他地方。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-02-07/%E6%89%93AppStore%E5%8C%85.png" alt="打App Store包"></p>
<h3 id="三、上传"><a href="#三、上传" class="headerlink" title="三、上传"></a>三、上传</h3><p>上传使用Xcode自带的工具Application Loader进行上传，每次上传无论成功与失败，下次再上传都需要重新打包并将Build 加一。</p>
<p>1、 选择Xcode - &gt; Xcode - &gt; Open Developer Tool - &gt; Application Loader  </p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-02-07/%E4%B8%8A%E4%BC%A0IPA%E6%96%87%E4%BB%B6%E5%88%B0AppStore.png" alt="上传IPA文件到App Store"></p>
<p>2、然后选择相应的包，提交即可。成功后会显示成功，失败后会显示失败。如果失败会有邮件提醒，打开邮件找到相应问题然后解决，解决后需要重新打包（打包Build要相应加一），然后重新上传。</p>
<p>ps:  失败后先查看邮箱，多次上传同一问题的包，账号审核会被延迟。</p>
<h3 id="四、提交审核"><a href="#四、提交审核" class="headerlink" title="四、提交审核"></a>四、提交审核</h3><p>1、上传成功后iTunes Connect 的构建版本会出现加号，选中 然后点击右上方存储。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-02-07/%E6%B7%BB%E5%8A%A0%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC.png" alt="添加构建版本"></p>
<p>2、都没问题后，点击【提交以供审核】 ，会出现下面界面，因项目中使用了广告标识符（IDFA），根据下方选中即可。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-02-07/%E5%85%B3%E4%BA%8E%E5%B9%BF%E5%91%8A%E6%A0%87%E8%AF%86%E7%AC%A6.png" alt="关于广告标识符"></p>
<p>3、提交，然后等待结果。 如果是周三提交审核，大概会在周三夜十二点左右或周四夜十二点左右开始审核。在审核期间，服务端数据请勿改动，审核账号请勿登录，审核期间请勿推送消息到审核账号。</p>
<h3 id="五、发布"><a href="#五、发布" class="headerlink" title="五、发布"></a>五、发布</h3><p>1、审核通过后会收到邮件，如果手机安装 Connect ,也会收到审核的状态。</p>
<p>2、成功后登录iTunes Connect  点击发布即可（我们选的是手动发布，所以成功后需要手动发布）。</p>
<p>3、发布成功12小时左右App Store会显示。</p>
<h3 id="六：账号及其他"><a href="#六：账号及其他" class="headerlink" title="六：账号及其他"></a>六：账号及其他</h3><p>开发者中心：<a href="https://developer.apple.com/">https://developer.apple.com</a></p>
<p>iTunes Connect : <a href="https://itunesconnect.apple.com/">https://itunesconnect.apple.com</a></p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Block中的weakSelf和strongSelf</title>
    <url>/2018/02/28/2018-02-28/</url>
    <content><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>在年前一个朋友问我<code>__weak typeof(self) weakSelf = self;</code> 和 <code>__strong typeof(self) strongSelf = weakSelf;</code>的意思是什么？</p>
<p>当时瞬间词穷了，虽然知道它是为了避免循环引用，但如何避免？为什么用<code>__weak</code>和<code>__strong</code>进行修饰。于是和朋友讨论特整理此篇博客。</p>
<p>首先我们应该知道Blocks是C语言的扩充功能，是带有局部变量的匿名函数。当然，Block只是Objective-C对闭包的实现，并不是iOS独有的概念，在C++、Java等语言中也都是有闭包的。</p>
<h3 id="关于此问题"><a href="#关于此问题" class="headerlink" title="关于此问题"></a>关于此问题</h3><p>针对<code>__weak typeof(self) weakSelf = self;</code> 和 <code>__strong typeof(self) strongSelf = weakSelf;</code>分别代表什么意思的问题，最后和朋友讨论并查询资料，总结如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">__weak typeof(self) weakSelf = self;</span><br><span class="line"></span><br><span class="line">__strong typeof(self) strongSelf = weakSelf;</span><br><span class="line"></span><br><span class="line">- weakSelf 是为了不让引用计数增加</span><br><span class="line"></span><br><span class="line">- strongSelf 是为了防止weakSelf变为nil</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><img src="/2018-02-28/Blocks.png" alt="关于Block中的weakSelf和strongSelf"></p>
<p>为了避免循环引用<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html">Working With Blocks</a>文档上也给出了相应的解决方法“it’s best practice to capture a weak reference to self”。</p>
<p>所以当我们使用Block，将self传入Block之前，将self转换成weak automatic 的变量，这样block中就不会出现对self的强引用。</p>
<p>在执行完block以后，self就会被释放，weakSelf也会变成nil。</p>
<p>但如果在同一Block中多次调用self的时候，因为在调用第一次self的时候weakSelf就会变为nil, 所以就需要__strong来确保self不会被提前释放。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/WorkingwithBlocks/WorkingwithBlocks.html">Working With Blocks</a></li>
<li><a href="https://developer.apple.com/documentation?language=objc">Apple Developer Documentation</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9D%97_(C%E8%AF%AD%E8%A8%80%E6%89%A9%E5%B1%95)">块（C语言扩展）</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">闭包（计算机科学）</a></li>
<li><a href="https://halfrost.com/ios_block_retain_circle/">深入研究Block用weakSelf、strongSelf、@weakify、@strongify解决循环引用</a></li>
<li><a href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/">到底什么时候才需要在ObjC的Block中使用weakSelf&#x2F;strongSelf</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C Runtime的介绍及在工程中的使用</title>
    <url>/2018/04/12/2018-04-12/</url>
    <content><![CDATA[<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-12/class-diagram.jpg" alt="class-diagram"></p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>在项目的开发过程中，一些功能使用了Runtime去实现。于是在闲暇之余决定对Runtime在项目中使用的一些案例进行整理。毕竟好记性不如烂笔头，下次使用的时候不可能去一点点翻看之前项目中的源码。</p>
<h3 id="关于Runtime"><a href="#关于Runtime" class="headerlink" title="关于Runtime"></a>关于Runtime</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work.</span><br><span class="line"></span><br><span class="line">This document looks at the NSObject class and how Objective-C programs interact with the runtime system. In particular, it examines the paradigms for dynamically loading new classes at runtime, and forwarding messages to other objects. It also provides information about how you can find information about objects while your program is running.</span><br><span class="line"></span><br><span class="line">You should read this document to gain an understanding of how the Objective-C runtime system works and how you can take advantage of it. Typically, though, there should be little reason for you to need to know and understand this material to write a Cocoa application.</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>关于Runtime的介绍在<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Objective-C Runtime Programming Guide</a>中也有详细的介绍，我摘录了一些放到上面。</p>
<p>Objective-C动态语言，将静态语言再编译和链接时做的决策推迟到运行时，这样它就会动态地完成任务。这就意味着Objective-C不仅需要编译器，还需要运行时系统来执行编译后的代码。而这个运行时系统就是Runtime。</p>
<p>在写这篇博客之前也查找了一些资料，在<a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a>里可以看到。一些博客中也有关于isa、SEL、IMP、Method的介绍。如果要详细地了解Runtime，可以先明白isa、SEL、IMP、Method这些名词的概念，然后再使用Runtime实现开发中的一些功能。</p>
<p>为了便于后期的查阅，所以这里摘录了其他资料、博客中关于这些名词的解释，如下：</p>
<pre><code>isa:OC中，类和类的实例在本质上没有区别，都是对象，任何对象都有isa指针，它指向类或元类。

SEL:SEL（选择器）是方法的selector的指针。方法的selector表示运行时方法的名字。OC在编译时，会依据每一个方法的名字、参数，生成一个唯一的整型标识(Int类型的地址)，这个标识就是SEL。

IMP:IMP是一个函数指针，指向方法最终实现的首地址。SEL就是为了查找方法的最终实现IMP。

Method:用于表示类定义中的方法，它的结构体中包含一个SEL和IMP，相当于在SEL和IMP之间作了一个映射。
</code></pre>
<h3 id="关于Runtime的使用"><a href="#关于Runtime的使用" class="headerlink" title="关于Runtime的使用"></a>关于Runtime的使用</h3><p>在公司的几个项目中，使用Runtime实现的功能并不多。</p>
<p>一个就是在接收到推送的时候。需要跳转到某个ViewController并对这个ViewController的某个属性进行赋值。我实现的方法是先获取这个对象（ViewController）的属性列表，然后判断是否有服务端推送消息中包含的那个属性，如果有就使用KVC进行赋值，然后跳转。</p>
<p>还有一个就是处理数组和字典的时候。我们都知道如果数组不进行越界处理等等等，很容易因为数据的原因而出现问题。所以在项目中使用了IMP指针替换了系统的原生方法，对一些可能导致问题的方法进行处理。</p>
<p>下面是整理的一些关于Runtime的使用，代码存放再<a href="https://github.com/xnxy/iOS-Project-Examples/tree/master/RuntimeDemo">GitHub</a>可以直接使用。而关于字典和数组的处理代码同样存放再<a href="https://github.com/xnxy/iOS-Project-Examples/tree/master/SafeAryAndDic">GitHub</a>。</p>
<h3 id="Runtime的使用01：获取某个实例的属性列表"><a href="#Runtime的使用01：获取某个实例的属性列表" class="headerlink" title="Runtime的使用01：获取某个实例的属性列表"></a>Runtime的使用01：获取某个实例的属性列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark ---</span><br><span class="line">#pragma mark --- 获取某个实例的属性列表 ---</span><br><span class="line">+ (NSMutableArray *)propertiesInfoWithInstance:(id)instance&#123;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *propertieAry = [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">    unsigned int outCount, i;</span><br><span class="line">    // 获取对象里的属性列表</span><br><span class="line">    objc_property_t * properties = class_copyPropertyList([instance class], &amp;outCount);</span><br><span class="line">    for (i = 0; i &lt; outCount; i++) &#123;</span><br><span class="line">        objc_property_t property =properties[i];</span><br><span class="line">        //  属性名转成字符串</span><br><span class="line">        NSString *propertyName = [[NSString alloc] initWithCString:property_getName(property) encoding:NSUTF8StringEncoding];</span><br><span class="line">        </span><br><span class="line">        [propertieAry addObject:propertyName];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(properties);</span><br><span class="line">    </span><br><span class="line">    return propertieAry;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Runtime的使用02：获取某个类的成员变量列表"><a href="#Runtime的使用02：获取某个类的成员变量列表" class="headerlink" title="Runtime的使用02：获取某个类的成员变量列表"></a>Runtime的使用02：获取某个类的成员变量列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark ---</span><br><span class="line">#pragma mark --- 获取某个类的成员变量列表 ---</span><br><span class="line">+ (NSMutableArray *)ivarInfoWithInstance:(id)instance&#123;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *ivarInfoAry = [NSMutableArray array];</span><br><span class="line">    unsigned int count, i;</span><br><span class="line">    </span><br><span class="line">    Ivar *ivars = class_copyIvarList([instance class], &amp;count);</span><br><span class="line">    for (i = 0 ; i &lt; count ; i ++ ) &#123;</span><br><span class="line"></span><br><span class="line">        NSString *name = [NSString stringWithCString:ivar_getName(ivars[i]) encoding:NSUTF8StringEncoding];</span><br><span class="line">        [ivarInfoAry addObject:name];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">    return ivarInfoAry;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Runtime的使用03：获取某个类的方法列表"><a href="#Runtime的使用03：获取某个类的方法列表" class="headerlink" title="Runtime的使用03：获取某个类的方法列表"></a>Runtime的使用03：获取某个类的方法列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark ---</span><br><span class="line">#pragma mark --- 获取某个类的方法列表 ---</span><br><span class="line">+ (NSMutableArray *)methodListWithInstance:(id)instance&#123;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *methodListAry = [NSMutableArray array];</span><br><span class="line">    unsigned int count, i;</span><br><span class="line">    </span><br><span class="line">    Method *methods = class_copyMethodList([instance class], &amp;count);</span><br><span class="line">    for (i = 0 ; i &lt; count; i ++) &#123;</span><br><span class="line">        SEL name = method_getName(methods[i]);</span><br><span class="line">        NSString *methodStr = [NSString stringWithCString:sel_getName(name) encoding:NSUTF8StringEncoding];</span><br><span class="line">        [methodListAry addObject:methodStr];</span><br><span class="line">    &#125;</span><br><span class="line">    free(methods);</span><br><span class="line">    return methodListAry;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Runtime的使用04：检测对象的某个属性是否存在"><a href="#Runtime的使用04：检测对象的某个属性是否存在" class="headerlink" title="Runtime的使用04：检测对象的某个属性是否存在"></a>Runtime的使用04：检测对象的某个属性是否存在</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark -</span><br><span class="line">#pragma mark --- 检测对象的某个属性是否存在 ---</span><br><span class="line">+ (BOOL)checkIsExistPropertyWithInstance:(id)instance verifyPropertyName:(NSString *)verifyPropertyName</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int outCount, i;</span><br><span class="line">    // 获取对象里的属性列表</span><br><span class="line">    objc_property_t * properties = class_copyPropertyList([instance class], &amp;outCount);</span><br><span class="line">    </span><br><span class="line">    for (i = 0; i &lt; outCount; i++) &#123;</span><br><span class="line">        objc_property_t property =properties[i];</span><br><span class="line">        //  属性名转成字符串</span><br><span class="line">        NSString *propertyName = [[NSString alloc] initWithCString:property_getName(property) encoding:NSUTF8StringEncoding];</span><br><span class="line">        // 判断该属性是否存在</span><br><span class="line">        if ([propertyName isEqualToString:verifyPropertyName]) &#123;</span><br><span class="line">            free(properties);</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(properties);</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Runtime的使用05：IMP指针替换系统方法"><a href="#Runtime的使用05：IMP指针替换系统方法" class="headerlink" title="Runtime的使用05：IMP指针替换系统方法"></a>Runtime的使用05：IMP指针替换系统方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark ---</span><br><span class="line">#pragma mark --- IMP指针替换系统方法 ---</span><br><span class="line">+ (void)SwizzlingMethod:(NSString *)systemMethodString systemClassString:(NSString *)systemClassString toSafeMethodString:(NSString *)safeMethodString targetClassString:(NSString *)targetClassString&#123;</span><br><span class="line">    //获取系统方法IMP</span><br><span class="line">    Method sysMethod = class_getInstanceMethod(NSClassFromString(systemClassString), NSSelectorFromString(systemMethodString));</span><br><span class="line">    //自定义方法的IMP</span><br><span class="line">    Method safeMethod = class_getInstanceMethod(NSClassFromString(targetClassString), NSSelectorFromString(safeMethodString));</span><br><span class="line">    //IMP相互交换，方法的实现也就互相交换了</span><br><span class="line">    method_exchangeImplementations(safeMethod,sysMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Runtime的使用06：给系统类动态添加属性"><a href="#Runtime的使用06：给系统类动态添加属性" class="headerlink" title="Runtime的使用06：给系统类动态添加属性"></a>Runtime的使用06：给系统类动态添加属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark ---</span><br><span class="line">#pragma mark --- 给系统类动态添加属性 ---</span><br><span class="line"></span><br><span class="line">- (void)setName:(NSString *)name&#123;</span><br><span class="line">    /*</span><br><span class="line">     objc_setAssociatedObject 将某个值跟某个对象关联起来，将某个值存储到某个对象中。</span><br><span class="line">     object: 给哪个对象添加属性</span><br><span class="line">     key:属性的名称</span><br><span class="line">     value: 属性值</span><br><span class="line">     policy:保存策略</span><br><span class="line">     */</span><br><span class="line">//    objc_setAssociatedObject(&lt;#id  _Nonnull object#&gt;, &lt;#const void * _Nonnull key#&gt;, &lt;#id  _Nullable value#&gt;, &lt;#objc_AssociationPolicy policy#&gt;)</span><br><span class="line">    objc_setAssociatedObject(self, @&quot;name&quot;, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)name&#123;</span><br><span class="line">    /*</span><br><span class="line">     object:对象</span><br><span class="line">     key:属性的名称</span><br><span class="line">     */</span><br><span class="line">//    objc_getAssociatedObject(&lt;#id  _Nonnull object#&gt;, &lt;#const void * _Nonnull key#&gt;)</span><br><span class="line">    return objc_getAssociatedObject(self, @&quot;name&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://github.com/RetVal/objc-runtime">objc-runtime</a></li>
<li><a href="https://developer.apple.com/documentation/objectivec/objective_c_runtime?language=objc">Objective-C Runtime Reference</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048?language=objc">Objective-C Runtime Programming Guide</a></li>
<li><a href="http://www.cocoachina.com/ios/20170301/18804.html">iOS开发之Runtime常用示例总结</a></li>
<li><a href="https://www.jianshu.com/p/d6a68575ce10">runtime运行时 isa指针 SEL方法选择器 IMP函数指针 Method方法 runtime消息机制 runtime的使用</a></li>
<li><a href="http://blog.csdn.net/zy_flyway/article/details/75370404">iOS Runtime Method IMP指针详解</a></li>
<li><a href="http://www.cnblogs.com/CoderAlex/p/6741943.html">iOS—runtime之IMP指针,isa指针</a></li>
<li><a href="http://southpeak.github.io/categories/objectivec/">Objective-C Runtime 运行时</a></li>
<li><a href="http://blog.devtang.com/2013/10/15/objective-c-object-model/">Objective-C对象模型及应用</a></li>
<li><a href="https://juejin.im/entry/587d887f1b69e60058486a71">iOS Runtime 之一：Class 和 meta-class</a></li>
<li><a href="https://www.jianshu.com/p/ab966e8a82e2">OC最实用的runtime总结，面试、工作你看我就足够了！</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>关于开发者中心出现的update the mobile phone number associated with your Apple ID</title>
    <url>/2018/04/24/2018-04-24/</url>
    <content><![CDATA[<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E6%9B%B4%E6%96%B0%E5%8D%8F%E8%AE%AE.png" alt="更新协议"></p>
<blockquote>
<p>The Apple Developer Program License Agreement has been updated.<br>In order to access certain membership resources, you must accept the latest license agreement. First, you’ll need to update the mobile phone number associated with your Apple ID. Your mobile phone number must be based in your country&#x2F;region. Edit this number in the Account section of appleid.apple.com, and return to your developer account to continue.</p>
</blockquote>
<p>前段时间开发者中心出现上方警告，然后根据提示更新绑定的手机号，发现公司AppleID设置的密保问题忘记了,而且AppleID绑定的应急邮箱也不知道是谁的。在跟AppleID那边联系解决这个问题后，绑定手机号，发现开发者中心还是出现上述问题。于是再跟开发者中心那边的客服联系，在上周二将所有问题解决。</p>
<p>这周发现很多群中也有很多开发者受这个问题的困扰，所以决定将处理这个问题的整个步骤记录下来，以供参考。</p>
<h3 id="关于解决方式"><a href="#关于解决方式" class="headerlink" title="关于解决方式"></a>关于解决方式</h3><h6 id="第一步：用手机登录或电脑-网页或iCloud-登录AppleID"><a href="#第一步：用手机登录或电脑-网页或iCloud-登录AppleID" class="headerlink" title="第一步：用手机登录或电脑(网页或iCloud)登录AppleID"></a>第一步：用手机登录或电脑(网页或iCloud)登录AppleID</h6><h6 id="第二步：在用户中心-添加-电话号码-（电脑：iClound-gt-账户详细信息-gt-联系信息）、（手机：设置-gt-用户中心-gt-姓名、电话号码、电子邮件-gt-编辑-gt-添加电子邮件或电话号码-gt-添加电话号码）、（网页-登录管理AppleID-gt-Account-gt-编辑-gt-CONTACTABLE-AT-gt-Add-More……）。"><a href="#第二步：在用户中心-添加-电话号码-（电脑：iClound-gt-账户详细信息-gt-联系信息）、（手机：设置-gt-用户中心-gt-姓名、电话号码、电子邮件-gt-编辑-gt-添加电子邮件或电话号码-gt-添加电话号码）、（网页-登录管理AppleID-gt-Account-gt-编辑-gt-CONTACTABLE-AT-gt-Add-More……）。" class="headerlink" title="第二步：在用户中心 添加 电话号码 （电脑：iClound -&gt;账户详细信息 -&gt;联系信息）、（手机：设置-&gt;用户中心-&gt;姓名、电话号码、电子邮件 -&gt; 编辑 -&gt; 添加电子邮件或电话号码 -&gt;添加电话号码）、（网页: 登录管理AppleID - &gt; Account -&gt; 编辑 - &gt;  CONTACTABLE AT -&gt; Add More……）。"></a>第二步：在用户中心 添加 电话号码 （电脑：iClound -&gt;账户详细信息 -&gt;联系信息）、（手机：设置-&gt;用户中心-&gt;姓名、电话号码、电子邮件 -&gt; 编辑 -&gt; 添加电子邮件或电话号码 -&gt;添加电话号码）、（网页: 登录管理AppleID - &gt; Account -&gt; 编辑 - &gt;  CONTACTABLE AT -&gt; Add More……）。</h6><h6 id="第三步：登录开发者中心，同意协议。"><a href="#第三步：登录开发者中心，同意协议。" class="headerlink" title="第三步：登录开发者中心，同意协议。"></a>第三步：登录开发者中心，同意协议。</h6><h3 id="关于AppleID-密保问题忘记的情况"><a href="#关于AppleID-密保问题忘记的情况" class="headerlink" title="关于AppleID 密保问题忘记的情况"></a>关于AppleID 密保问题忘记的情况</h3><p>在开发者中心发现这个警告时，然后就点击<code>Edit phone Number</code>会跳转到<a href="https://appleid.apple.com/#!&page=signin">管理AppleID界面</a>，但在登录的时候发现需要输入密保问题。</p>
<p>在询问经理，得知并不知道密保问题的时候，于是开始联系AppleID的客服，寻求帮助。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><h6 id="1、在Apple-ID-官方Apple支持中选择技术支持。"><a href="#1、在Apple-ID-官方Apple支持中选择技术支持。" class="headerlink" title="1、在Apple ID -官方Apple支持中选择技术支持。"></a>1、在<a href="https://support.apple.com/zh-cn/apple-id">Apple ID -官方Apple支持</a>中选择技术支持。</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81.png" alt="技术支持"></p>
<h6 id="2、选择联系我们"><a href="#2、选择联系我们" class="headerlink" title="2、选择联系我们"></a>2、选择联系我们</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E8%8E%B7%E5%BE%97%E5%8D%8F%E5%8A%A9.png" alt="获得协助"></p>
<h6 id="3、选择Apple-ID"><a href="#3、选择Apple-ID" class="headerlink" title="3、选择Apple ID"></a>3、选择Apple ID</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/appleID.png" alt="Apple ID"></p>
<h6 id="4、选择遗忘安全问题"><a href="#4、选择遗忘安全问题" class="headerlink" title="4、选择遗忘安全问题"></a>4、选择遗忘安全问题</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E9%81%97%E5%BF%98%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.png" alt="遗忘安全问题"></p>
<h6 id="5、选择立即与Apple-支持部门人员通话"><a href="#5、选择立即与Apple-支持部门人员通话" class="headerlink" title="5、选择立即与Apple 支持部门人员通话"></a>5、选择立即与Apple 支持部门人员通话</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E4%B8%8EApple%E6%94%AF%E6%8C%81%E9%83%A8%E9%97%A8%E4%BA%BA%E5%91%98%E9%80%9A%E8%AF%9D.png" alt="与Apple支持部门人员通话"></p>
<p>提交完成后，客服不到两分钟就会打电话过来。其实还是蛮迅速的。</p>
<p>根据Apple支持部门的人员的方法，最后安全问题忘记的问题得到解决。</p>
<p>客服询问了是否有设备登录过这个AppleID，因为我手机中iTunes Connect 登录过，iMac也登录，最后她提议使用手机或电脑登录这个AppleID，然后开启双重验证。</p>
<p>于是在手机的设置中，退出自己的Apple ID 登录公司这个Apple ID 然后开启双重验证。 再到<a href="https://appleid.apple.com/#!&page=signin">管理AppleID</a>中登录。</p>
<p>这时手机上会出现地址验证，会有个验证码，在网页端输入即可。然后就可以更改手机号、应急邮箱等一些个人信息了。</p>
<h3 id="关于开发者中心仍出现上方警告的问题。"><a href="#关于开发者中心仍出现上方警告的问题。" class="headerlink" title="关于开发者中心仍出现上方警告的问题。"></a>关于开发者中心仍出现上方警告的问题。</h3><p>在Apple ID 那边绑定了手机号，邮箱等信息的时候，发现开发者中心仍出现上方警告，于是跟开发者中心客服联系沟通最后解决了这个问题。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E7%BB%91%E5%AE%9A%E6%89%8B%E6%9C%BA%E5%8F%B7.png" alt="绑定手机号"></p>
<p>在绑定手机号的时候要在账户<code>Account</code>中绑定，而一开始我是在<code>Security</code>中绑定，在询问开发者中心客服后在<code>Account</code>中绑定后，再重新登录<a href="https://developer.apple.com/">开发者中心</a>已经可以同意协议，然后就可以了。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h6 id="1、使用注册AppleID-的邮箱发送邮件到chinadev-chinadev-asia-apple-com-发送问题邮件。"><a href="#1、使用注册AppleID-的邮箱发送邮件到chinadev-chinadev-asia-apple-com-发送问题邮件。" class="headerlink" title="1、使用注册AppleID 的邮箱发送邮件到chinadev chinadev@asia.apple.com  发送问题邮件。"></a>1、使用注册AppleID 的邮箱发送邮件到chinadev <code>chinadev@asia.apple.com</code>  发送问题邮件。</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%88%B0chinadev.png" alt="发送邮件到chinadev"></p>
<p>第一个问题是因为我们开发者账号要续费了…………</p>
<h6 id="2、发送成功后，开发者中心会返回一个案例编号，记住案例编号，跟开发者中心客服联系需要用到，来证明你的身份。"><a href="#2、发送成功后，开发者中心会返回一个案例编号，记住案例编号，跟开发者中心客服联系需要用到，来证明你的身份。" class="headerlink" title="2、发送成功后，开发者中心会返回一个案例编号，记住案例编号，跟开发者中心客服联系需要用到，来证明你的身份。"></a>2、发送成功后，开发者中心会返回一个案例编号，记住案例编号，跟开发者中心客服联系需要用到，来证明你的身份。</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%AD%E5%BF%83%E5%9B%9E%E5%A4%8D.png" alt="开发者中心回复"></p>
<h6 id="3、开发者中心不会主动联系你，所以需要你联系客服-中国拨打-4006-701-855-具体号码可以查看-https-developer-apple-com-contact-phone-cn-。营业时间为9：00-到-17：00-。"><a href="#3、开发者中心不会主动联系你，所以需要你联系客服-中国拨打-4006-701-855-具体号码可以查看-https-developer-apple-com-contact-phone-cn-。营业时间为9：00-到-17：00-。" class="headerlink" title="3、开发者中心不会主动联系你，所以需要你联系客服,中国拨打 4006 701 855, 具体号码可以查看 https://developer.apple.com/contact/phone/cn/ 。营业时间为9：00 到 17：00 。"></a>3、开发者中心不会主动联系你，所以需要你联系客服,中国拨打 <code>4006 701 855</code>, 具体号码可以查看 <a href="https://developer.apple.com/contact/phone/cn/">https://developer.apple.com/contact/phone/cn/</a> 。营业时间为9：00 到 17：00 。</h6><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/2018-04-24/%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%AD%E5%BF%83%E5%AE%A2%E6%9C%8D%E7%94%B5%E8%AF%9D.png" alt="开发者中心客服电话"></p>
<h6 id="4、拨打电话需要排队，可能需要等很长一段时间。接通后你要主动提供刚才邮件发送给你的案例编号，这样就不用证明你是这个账号的持有者了。避免了很多麻烦。"><a href="#4、拨打电话需要排队，可能需要等很长一段时间。接通后你要主动提供刚才邮件发送给你的案例编号，这样就不用证明你是这个账号的持有者了。避免了很多麻烦。" class="headerlink" title="4、拨打电话需要排队，可能需要等很长一段时间。接通后你要主动提供刚才邮件发送给你的案例编号，这样就不用证明你是这个账号的持有者了。避免了很多麻烦。"></a>4、拨打电话需要排队，可能需要等很长一段时间。接通后你要主动提供刚才邮件发送给你的案例编号，这样就不用证明你是这个账号的持有者了。避免了很多麻烦。</h6><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>关于上方警告问题，需要先登录<a href="https://appleid.apple.com/#!&page=signin">AppleID</a>，登录后在Account账户这边绑定。</li>
<li>关于密保忘记无法登录<a href="https://appleid.apple.com/#!&page=signin">AppleID</a>的问题，用之前登录过这个AppleID的手机或电脑，再登录这个AppleID，然后开启双重验证。如果无法解决，根据上方方式寻求客服帮忙解决。</li>
<li>关于AppleID绑定手机号后还是出现警告的，可以联系开发者中心的客服。不过联系客服可以先用注册邮箱发送邮件，这样就避免了证明自己是这个账号拥有者的过程。</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>2019归途随笔</title>
    <url>/2019/01/31/2019%E5%BD%92%E9%80%94%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>小时候，我盼着长大成人，脱离家庭的束缚。</p>
<p>从喜欢玩网络游戏，梦想成为黑客，到后来选择了软件工程专业，当了程序员，漂泊大都市。</p>
<p>才发现离开了家的围栏后，撞到南墙才回头的那个东西叫生活。</p>
<p>离乡时，踌躇满志，怀揣着对未来的向往与渴望。</p>
<p>时过境迁，如今却只感到生活的压力，梦碎的无措。</p>
<p>渐渐地，开始心平气和地对待周边事物，开始体谅父母的催婚与唠叨。</p>
<p>像当年他们教我们说话走路一样，教他们用微信，用智能手机。</p>
<p>于是，不知从何时起，我们开始理解了双鬓已微微发白的父母。</p>
<p>开始理解了生活并非光靠梦想便能一帆风顺，开始与自己和解。</p>
<p>这或许就是成长……</p>
<p>2019年，无论未来如何，生活仍在继续，你我步履前行。</p>
<p align="right">——写于2019年1月31日福州-潢川的火车上</p>

]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android15应用适配指南</title>
    <url>/2024/06/17/Android15%E5%BA%94%E7%94%A8%E9%80%82%E9%85%8D%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<blockquote>
<p>目前国内很多渠道已经发布了Android 15的预览版，适配工作需要在2024年8月31日之前完成。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">尊敬的开发者：</span><br><span class="line">您好！</span><br><span class="line">目前小米已发布了Android 15预览版，开放平台也同步上线了带有新系统的远程真机，请开发者启动适配工作，并于2024年8月31日之前完成适配！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">若您在2024年8月31日前未进行处理，我们将按照产品对用户的影响程度，采取相关措施以保障用户使用体验，包括但不限于“搜索标签提示”、“应用降级”、“分机型屏蔽”、“应用下架”。 请各位开发者及时调整，小米与您一起建设更好的Android 生态。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">→Android 15适配指导：</span><br><span class="line">小米链接地址：[https://dev.mi.com/distribute/doc/details?pId=1826](https://u10426319.ct.sendgrid.net/ls/click?upn=u001.Zu86ttxf-2F80tTZbxAnjo5TEFUuoDoe-2BQsw4mrVANWdKb16MYOLPreY3dCB2q-2Bc5qoBpNOEtr9RN1594zlSszag-3D-3DPLDj_-2BvhKMbrjWytVKtzRQtBJB2MbsMYzyPUq0Z7vX1HUZCBy3Ei50Fbm5-2FsroNbbYloOWR5bLCl8QN1Z4VQKewBXS7wYswH2kDDVMWhj31TQXZsbbxnMHTOf-2F7zKe3abXDOOsk-2BKrj1geymVMpf5P7kYuZfrSx0IONQtOXUVW7J3gDCDXFFlNVLGbZavcHVQnfXxLi2LZ0B7Po1us79qGsgUhg-3D-3D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">→获取Android 15升级包：</span><br><span class="line">小米链接地址：[https://web.vip.miui.com/page/info/mio/mio/detail?postId=44582045](https://u10426319.ct.sendgrid.net/ls/click?upn=u001.Zu86ttxf-2F80tTZbxAnjo5cxw7rfsOz9YBqEff4OtZRZeZAWPT5ertzBrQA-2BvMqc6qqHHULC1Wttqettq0N-2BMUAARop5ePpP7jv6FDomBzy0-3DaX2f_-2BvhKMbrjWytVKtzRQtBJB2MbsMYzyPUq0Z7vX1HUZCBy3Ei50Fbm5-2FsroNbbYloOP0lOA-2F0R2P3IYJ2s8PENb9bE-2BSJy9sFRbxtFjrhqSF8IU0brY5y7cZXbAu6g12mtNpkzDTCMr0nQ8MZ7ELrmMFeyWFy76OavYto9RV751h7-2FaNzkZHJOsQLlWH2RZhpHT7942-2FWNKlNe4RovUS5ndA-3D-3D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">→Android 15云真机：</span><br><span class="line">小米链接地址：[https://testit.miui.com/remote](https://u10426319.ct.sendgrid.net/ls/click?upn=u001.Zu86ttxf-2F80tTZbxAnjo5UeZgR0mu6V739vxLKABg-2B9v84ZmEan4ibSkgbW-2FrMASWmSt_-2BvhKMbrjWytVKtzRQtBJB2MbsMYzyPUq0Z7vX1HUZCBy3Ei50Fbm5-2FsroNbbYloOIl5y5rfGjoyVNSig-2FK-2FrDdiuD3ngDNzdLgk0ClrqIbHbYXuLZC35igrSKzno0fFUwKNqSQcd5jN6sj7BTgq4Z2teo0Egg36amGMYhrF2OfZXML2tjcq322ShuFDc-2FO18R13SfyUO7O6t9UlpWeIsNw-3D-3D)</span><br><span class="line">云真机权限申请：[https://m.beehive.miui.com/vHRYzbRMBF3PQseTGz5cDw](https://u10426319.ct.sendgrid.net/ls/click?upn=u001.Zu86ttxf-2F80tTZbxAnjo5dM-2FfqvQmYymWEBNl1iWjWDgMJhik94SLkoaMrMUvMNSwP1q6B2igJYNffItJoks5g-3D-3DI-ED_-2BvhKMbrjWytVKtzRQtBJB2MbsMYzyPUq0Z7vX1HUZCBy3Ei50Fbm5-2FsroNbbYloO1VfK-2FEB4oaYcedHkk1RC6mEotFauDpCuN2idqEd0jnMxSMjx3pRF88NOtCt6LqFpNcNxXOO-2FAd-2Bj18R-2Fyj4KLFyndm3NDJugHWcArT-2Bry4lzMfDMgN9v0WOHOYWsXO0zwpCyMTdfYe9RFQvmEqrnMg-3D-3D)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如您在适配过程中如遇到错误，请咨询小米开放平台客服，平台客服将在第一时间帮助您解决问题。</span><br><span class="line">在线客服反馈地址：[https://dev.mi.com/platform/contact](https://u10426319.ct.sendgrid.net/ls/click?upn=u001.Zu86ttxf-2F80tTZbxAnjo5fUsebZXhhCkF86QOtBYGDFw5-2F5bh6cS0V7fnKRNL8pZikWB_-2BvhKMbrjWytVKtzRQtBJB2MbsMYzyPUq0Z7vX1HUZCBy3Ei50Fbm5-2FsroNbbYloONSJVQuApxBSDlTnLecYyWdWSfwNOVWbO2unkRBpiOy41VKiFNuYDQujM4viqScg79RrswNZsY4Q6xggdpmRBHUS8bklLmjwrx02Ta-2FBQddXrrR2wqWcPfUwVh17CdUG-2Bo2dUp0Ac8MzGf4UiF2zKhQ-3D-3D)</span><br><span class="line"></span><br><span class="line">小米应用商店</span><br><span class="line">2024.06.12</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>CADisplayLink介绍及其相关</title>
    <url>/2018/03/16/CADisplayLink%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>CADisplayLink其实就是一个定时器对象，是一个能让我们以和屏幕刷新率(60HZ)同步的频率将特定的内容画到屏幕上的定时器类。</p>
<p>在<a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink?language=objc">CADisplayLink 文档</a>中也有相应介绍。CADisplayLink以<code>addToRunLoop: forMode:</code> 注册到runloop上，每当屏幕显示内容刷新结束，runloop就会向CADisplayLink指定的target发送消息。</p>
<blockquote>
<p>Your application initializes a new display link, providing a target object and a selector to be called when the screen is updated. To synchronize your display loop with the display, your application adds it to a run loop using the addToRunLoop:forMode: method</p>
<p>Once the display link is associated with a run loop, the selector on the target is called when the screen’s contents need to be updated. The target can read the display link’s timestamp property to retrieve the time that the previous frame was displayed. For example, an application that displays movies might use the timestamp to calculate which video frame will be displayed next. An application that performs its own animations might use the timestamp to determine where and how displayed objects appear in the upcoming frame.</p>
<p>The duration property provides the amount of time between frames at the maximumFramesPerSecond. To calculate the actual frame duration, use targetTimestamp - timestamp. You can use actual frame duration in your application to calculate the frame rate of the display, the approximate time that the next frame will be displayed, and to adjust the drawing behavior so that the next frame is prepared in time to be displayed.</p>
<p>Your application can disable notifications by setting the paused property to YES. Also, if your application cannot provide frames in the time provided, you may want to choose a slower frame rate. An application with a slower but consistent frame rate appears smoother to the user than an application that skips frames. You can define the number of frames per second by setting the preferredFramesPerSecond property.</p>
<p>When your application finishes with a display link, it should call invalidate to remove it from all run loops and to disassociate it from the target.</p>
<p>CADisplayLink should not be subclassed.</p>
</blockquote>
<h3 id="关于CADisplayLink"><a href="#关于CADisplayLink" class="headerlink" title="关于CADisplayLink"></a>关于CADisplayLink</h3><p>无论是<a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink?language=objc">苹果的官方文档</a>还是网上的一些资料，对DADisplayLink介绍的都很详细。</p>
<p>我们创建个CADisplayLink对象，并将其添加到runloop中，并提供target和selector，那么在每次屏幕刷新的时候selector就会被调用（frameInterval 默认值为1）。 </p>
<p>同时我们也可以设置CADisplayLink对象的frameInterval属性来调整每次调用selector的间隔。</p>
<p>说白了，CADisplayLink就是一个跟屏幕刷新频率相同的定时器（60HZ）。CADisplayLink跟CoreAnimation类都属于QunartzCore.framework中API。</p>
<h3 id="CADisplayLink的使用"><a href="#CADisplayLink的使用" class="headerlink" title="CADisplayLink的使用"></a>CADisplayLink的使用</h3><figure class="highlight obj-c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">self</span>.displayLink = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span></span><br><span class="line">                                               selector:<span class="keyword">@selector</span>(timerRunEvent)];</span><br><span class="line"><span class="keyword">self</span>.displayLink.frameInterval = <span class="number">60</span>;</span><br><span class="line">[<span class="keyword">self</span>.displayLink addToRunLoop:[<span class="built_in">NSRunLoop</span> mainRunLoop] forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建CADisplayLink并将其添加到Runloop中。这样<code>timerRunEvent</code>(@selector)就会被周期调用，其中使用<code>frameInterval</code>设置调用的间隔，上方代表每秒调用一次（因为屏幕的刷新频率为60HZ，即每秒60次）。</p>
<figure class="highlight obj-c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.displayLink invalidate];</span><br><span class="line"><span class="keyword">self</span>.displayLink = <span class="literal">nil</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>停止，直接执行invalidate即可，类似于NSTimer的invalidate。执行完invalidate后，CADisplayLink对象从Runloop中移除，<code>timerRunEvent</code>(@selector)调用。</p>
<h3 id="CADisplayLink与NSTimer的不同"><a href="#CADisplayLink与NSTimer的不同" class="headerlink" title="CADisplayLink与NSTimer的不同"></a>CADisplayLink与NSTimer的不同</h3><p>在写这篇文章时，从网上搜了下，发现网上有很多关于CADisplayLink的介绍，而且比较详细。同时在CocoaChina上看到一篇关于<a href="http://www.cocoachina.com/ios/20160919/17595.html">iOS三种定时器的用法NSTimer、CADisplayLink、GCD</a>的文章。</p>
<h5 id="关于精度"><a href="#关于精度" class="headerlink" title="关于精度"></a>关于精度</h5><p>相对于NSTimer,CADisplayLink的精度更加准确些，毕竟苹果设备的屏幕的刷新频率是固定的，都是60HZ。而CADisplayLink在每次刷新结束后都会被调用，精度会比较高。同时我们也可以根据CADisplayLink这个特性来检测屏幕是否会出现掉帧现象，如：<a href="https://github.com/yehot/YYFPSLabel">YYKit 中计算当前界面每秒 FPS 帧数的小组件</a><br>就是根据此种原理。</p>
<h5 id="关于使用场景"><a href="#关于使用场景" class="headerlink" title="关于使用场景"></a>关于使用场景</h5><p>CADisplayLink的使用场景比较单一，适用于UI、动画的绘制与渲染。而比较著名的Facebook开源的第三方库<a href="https://github.com/facebook/pop">POP</a>就是基于CADisplayLink的，性能上比系统的CoreAnimation更加优秀。</p>
<p>而NSTimer在使用上就会更加的广泛了，基本很多场景都可使用。不管是一次性的还是连续周期性的timer事件，都会将NSTimer对象添加到Runloop中，但当Runloop正在执行另一个任务时，timer就会出现延迟。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>上面提到因为Facebook开源的动画库<a href="https://github.com/facebook/pop">POP</a>是基于CADisplayLink的，所以在开发过程中的一些定时器我们也可以使用POP来完成。比如下方的应用中经常出现的一个获取验证码的小功能，我们就可以使用POP去实现。</p>
<figure class="highlight obj-c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIButton</span> *btn = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">    <span class="keyword">self</span>.clickBtn = btn;</span><br><span class="line">    [btn setTitle:<span class="string">@&quot;获取验证码&quot;</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    [btn setTitleColor:[<span class="built_in">UIColor</span> whiteColor] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    btn.backgroundColor = [<span class="built_in">UIColor</span> purpleColor];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:btn];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//layout</span></span><br><span class="line">    [btn makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.center.equalTo(<span class="keyword">self</span>.view);</span><br><span class="line">        make.size.equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">200</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//action</span></span><br><span class="line">    @weakify(<span class="keyword">self</span>)</span><br><span class="line">    [btn bk_whenTapped:^&#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>)</span><br><span class="line">        [<span class="keyword">self</span> timeAnimation];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark ---</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> mark ---- Animation ---</span></span><br><span class="line">- (<span class="type">void</span>)timeAnimation&#123;</span><br><span class="line">    </span><br><span class="line">    POPBasicAnimation *basicAnimation = [POPBasicAnimation linearAnimation];</span><br><span class="line">    </span><br><span class="line">    POPAnimatableProperty *prop = [POPAnimatableProperty propertyWithName:<span class="string">@&quot;timeAnimation&quot;</span> initializer:^(POPMutableAnimatableProperty *prop) &#123;</span><br><span class="line">        </span><br><span class="line">        prop.writeBlock = ^(<span class="type">id</span> obj, <span class="keyword">const</span> <span class="built_in">CGFloat</span> *values) &#123;</span><br><span class="line">            <span class="built_in">UIButton</span> *btn = (<span class="built_in">UIButton</span> *)obj;</span><br><span class="line">            [btn setTitle:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%d&quot;</span>,(<span class="type">int</span>)values[<span class="number">0</span>]%<span class="number">60</span>] forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    basicAnimation.property = prop;</span><br><span class="line">    basicAnimation.fromValue = @(<span class="number">10</span>);</span><br><span class="line">    basicAnimation.toValue = @(<span class="number">0</span>);</span><br><span class="line">    basicAnimation.duration = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.clickBtn pop_addAnimation:basicAnimation forKey:<span class="string">@&quot;timeAnimation&quot;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开始</span></span><br><span class="line">    basicAnimation.animationDidStartBlock = ^(POPAnimation *anim) &#123;</span><br><span class="line">        <span class="keyword">self</span>.clickBtn.enabled = <span class="literal">NO</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//结束</span></span><br><span class="line">    basicAnimation.completionBlock = ^(POPAnimation *anim, <span class="type">BOOL</span> finished) &#123;</span><br><span class="line">        <span class="keyword">self</span>.clickBtn.enabled = <span class="literal">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span>.clickBtn setTitle:<span class="string">@&quot;重新发送&quot;</span> forState:<span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><a href="https://github.com/xnxy/iOS-Project-Examples/tree/master/Stopwatch">相关Demo</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink?language=objc">CADisplayLink</a></li>
<li><a href="https://github.com/yehot/YYFPSLabel">YYKit 中计算当前界面每秒 FPS 帧数的小组件</a></li>
<li><a href="https://github.com/facebook/pop">POP</a></li>
<li><a href="https://wiki.jikexueyuan.com/project/facebook-pop/">Facebook Pop使用指南</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Command-line参考(翻译)</title>
    <url>/2019/08/28/Command-line%E5%8F%82%E8%80%83(%E7%BF%BB%E8%AF%91)/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#Commands">Commands</a></li>
<li><a href="#Installation">Installation</a></li>
<li><a href="#Environment">Environment</a></li>
<li><a href="#Browse">Browse</a></li>
<li><a href="#Specifications">Specifications</a></li>
<li><a href="#Trunk">Trunk</a></li>
<li><a href="#Repos">Repos</a></li>
<li><a href="#Libraries">Libraries</a></li>
<li><a href="#IPC">IPC</a></li>
<li><a href="#Plugins">Plugins</a></li>
<li><a href="#Cache">Cache</a></li>
</ul>
<h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod </span><br></pre></td></tr></table></figure>
<p>Cocoa库包管理器。</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>这个组中列出的命令支持安装和集成Podfile中指定的依赖项。</p>
<p>下面是在用户项目中集成CocoaPods的基本工作流程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ touch Podfile</span><br><span class="line">$ vim Podfile</span><br><span class="line">$ pod install</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ open *.xcworkspace</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim podfile</span><br><span class="line">$ pod install</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pod outdated</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pod update</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Commands:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod init</span><br><span class="line"></span><br><span class="line">pod install</span><br><span class="line"></span><br><span class="line">pod update</span><br><span class="line"></span><br><span class="line">pod outdated</span><br><span class="line"></span><br><span class="line">pod deintegrate</span><br></pre></td></tr></table></figure>

<h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod init XCODEPROJ</span><br></pre></td></tr></table></figure>
<p>如果当前目录不存在，则为当前目录创建一个Podfile。如果指定了<code>XCODEPROJ</code>项目文件，或者当前目录中只有一个项目文件，那么将根据项目中定义的目标自动生成目标。</p>
<p>可以在<code>Podfile.default</code>(普通目标)Podfile中指定模板将使用的依赖项列表。<code>Podfile.test</code>(测试目标)，这些文件应该存储在<code>/home/travis/.cocoapods/templates</code>文件夹。</p>
<blockquote>
<p>继承的选项:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent    展示什么内容.</span><br><span class="line"></span><br><span class="line">--version   展示工具的版本。.</span><br><span class="line"></span><br><span class="line">--verbose   展示更多调试信息.</span><br><span class="line"></span><br><span class="line">--no-ansi   展示输出不包含ANSI代码.</span><br><span class="line"></span><br><span class="line">--help  展示帮助命令.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install </span><br></pre></td></tr></table></figure>

<p>下载<code>Podfile</code>中定义的所有依赖项，并在<code>./Pods</code>中创建一个Xcode Pods库项目。</p>
<p>Xcode项目文件应该在你的Podfile中指定如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project `path/to/XcodeProject.xcodeproj`</span><br></pre></td></tr></table></figure>
<p>如果没有指定项目，那么将对Xcode项目进行搜索。如果找到一个以上的Xcode项目，该命令将引发一个错误。</p>
<p>这将配置项目以引用Pods静态库，添加一个构建配置文件，并添加一个post构建脚本来复制Pod资源。</p>
<p>如果遇到问题，可能会返回几个错误代码中的一个。<code>*1</code>通用错误代码<code>*31</code>规格未找到(i。e失效的pod源，Pod名称错误等…)</p>
<blockquote>
<p>选项:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--repo-update</span><br><span class="line"></span><br><span class="line">Force running pod repo update before install.</span><br><span class="line"></span><br><span class="line">--deployment</span><br><span class="line"></span><br><span class="line">Disallow any changes to the Podfile or the Podfile.lock during installation.</span><br><span class="line"></span><br><span class="line">--clean-install</span><br><span class="line"></span><br><span class="line">Ignore the contents of the project cache and force a full pod installation. This only applies to projects that have enabled incremental installation.</span><br><span class="line"></span><br><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod update [POD_NAMES ...]</span><br></pre></td></tr></table></figure>
<p>更新由指定的<code>POD_NAMES</code>标识的pod，它是一个以空格分隔的pod名称列表。如果没有指定<code>pod_name</code>，它将更新所有pod，忽略Podfile.lock的内容。此命令用于更新依赖项;pod安装应该用于安装对Podfile的更改。</p>
<blockquote>
<p>选项:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--sources=https://cdn.cocoapods.org/</span><br><span class="line"></span><br><span class="line">The sources from which to update dependent pods. Multiple sources must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--exclude-pods=podName</span><br><span class="line"></span><br><span class="line">Pods to exclude during update. Multiple pods must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--clean-install</span><br><span class="line"></span><br><span class="line">Ignore the contents of the project cache and force a full pod installation. This only applies to projects that have enabled incremental installation.</span><br><span class="line"></span><br><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br><span class="line">--no-repo-update</span><br><span class="line"></span><br><span class="line">Skip running pod repo update before install.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="outdated"><a href="#outdated" class="headerlink" title="outdated"></a>outdated</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod outdated </span><br></pre></td></tr></table></figure>

<p>显示当前pod中过时的<code>Podfile.lock</code>，但是但仅限于规范回购，而非本地&#x2F;外部来源。。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br><span class="line">--no-repo-update</span><br><span class="line"></span><br><span class="line">Skip running pod repo update before install.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="deintegrate"><a href="#deintegrate" class="headerlink" title="deintegrate"></a>deintegrate</h4><blockquote>
<p>pod deintegrate</p>
</blockquote>
<p>自v1.0.0.beta.1可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod deintegrate [XCODE_PROJECT]</span><br></pre></td></tr></table></figure>
<p>把你的项目从CocoaPods中分离出来。从Xcode项目中删除所有CocoaPods的痕迹。</p>
<p>如果未指定xcodeproj，则将在当前目录中搜索Xcode项目。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod env</span><br></pre></td></tr></table></figure>

<h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod env </span><br></pre></td></tr></table></figure>

<p>显示Pod环境.</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Browse"><a href="#Browse" class="headerlink" title="Browse"></a>Browse</h3><p>浏览</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod search</span><br><span class="line"></span><br><span class="line">pod list</span><br><span class="line"></span><br><span class="line">pod try</span><br></pre></td></tr></table></figure>

<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>自v0.0.2可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod search QUERY</span><br></pre></td></tr></table></figure>
<p>搜索pods，忽略case，它的名称、摘要、描述或作者匹配查询。如果指定了<code>——simple</code>选项，这将只搜索仓库的名称。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--regex</span><br><span class="line"></span><br><span class="line">Interpret the QUERY as a regular expression.</span><br><span class="line"></span><br><span class="line">--simple</span><br><span class="line"></span><br><span class="line">Search only by name.</span><br><span class="line"></span><br><span class="line">--stats</span><br><span class="line"></span><br><span class="line">Show additional stats (like GitHub watchers and forks).</span><br><span class="line"></span><br><span class="line">--web</span><br><span class="line"></span><br><span class="line">Searches on cocoapods.org.</span><br><span class="line"></span><br><span class="line">--ios</span><br><span class="line"></span><br><span class="line">Restricts the search to Pods supported on iOS.</span><br><span class="line"></span><br><span class="line">--osx</span><br><span class="line"></span><br><span class="line">Restricts the search to Pods supported on macOS.</span><br><span class="line"></span><br><span class="line">--watchos</span><br><span class="line"></span><br><span class="line">Restricts the search to Pods supported on watchOS.</span><br><span class="line"></span><br><span class="line">--tvos</span><br><span class="line"></span><br><span class="line">Restricts the search to Pods supported on tvOS.</span><br><span class="line"></span><br><span class="line">--no-pager</span><br><span class="line"></span><br><span class="line">Do not pipe search results into a pager.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod list </span><br></pre></td></tr></table></figure>

<p>列出所有可用的pods.</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--update</span><br><span class="line"></span><br><span class="line">Run pod repo update before listing.</span><br><span class="line"></span><br><span class="line">--stats</span><br><span class="line"></span><br><span class="line">Show additional stats (like GitHub watchers and forks).</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="try"><a href="#try" class="headerlink" title="try"></a>try</h4><p>自v0.29.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod try NAME|URL</span><br></pre></td></tr></table></figure>
<p>下载带有给定<code>名称</code>(或Git URL)的Pod，根据需要安装它的依赖项并打开它的演示项目。如果提供了一个Git URL，则使用repo的头部。</p>
<p>如果指定了一个Git URL，那么可以提供一个<code>——podspec_name</code>，如果podspec名称由于某种原因与Git repo不同。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--podspec_name=[name]</span><br><span class="line"></span><br><span class="line">The name of the podspec file within the Git Repository.</span><br><span class="line"></span><br><span class="line">--no-repo-update</span><br><span class="line"></span><br><span class="line">Skip running pod repo update before install.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Specifications"><a href="#Specifications" class="headerlink" title="Specifications"></a>Specifications</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec create</span><br><span class="line"></span><br><span class="line">pod spec lint</span><br><span class="line"></span><br><span class="line">pod spec cat</span><br><span class="line"></span><br><span class="line">pod spec which</span><br><span class="line"></span><br><span class="line">pod spec edit</span><br></pre></td></tr></table></figure>

<h4 id="spec-create"><a href="#spec-create" class="headerlink" title="spec create"></a>spec create</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec create [NAME|https://github.com/USER/REPO]</span><br></pre></td></tr></table></figure>
<p>在当前工作目录中创建一个PodSpec，名为NAME.podspec。如果传递了一个GitHub url，spec就会被预填充。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="spec-lint"><a href="#spec-lint" class="headerlink" title="spec lint"></a>spec lint</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec lint [NAME.podspec|DIRECTORY|http://PATH/NAME.podspec ...]</span><br></pre></td></tr></table></figure>

<p>验证<code>NAME.podspec</code>。如果提供了<code>目录</code>，它将验证找到的podspec文件，包括子文件夹。如果该参数被省略，它默认为当前工作目录。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--quick</span><br><span class="line"></span><br><span class="line">Lint skips checks that would require to download and build the spec.</span><br><span class="line"></span><br><span class="line">--allow-warnings</span><br><span class="line"></span><br><span class="line">Lint validates even if warnings are present.</span><br><span class="line"></span><br><span class="line">--subspec=NAME</span><br><span class="line"></span><br><span class="line">Lint validates only the given subspec.</span><br><span class="line"></span><br><span class="line">--no-subspecs</span><br><span class="line"></span><br><span class="line">Lint skips validation of subspecs.</span><br><span class="line"></span><br><span class="line">--no-clean</span><br><span class="line"></span><br><span class="line">Lint leaves the build directory intact for inspection.</span><br><span class="line"></span><br><span class="line">--fail-fast</span><br><span class="line"></span><br><span class="line">Lint stops on the first failing platform or subspec.</span><br><span class="line"></span><br><span class="line">--use-libraries</span><br><span class="line"></span><br><span class="line">Lint uses static libraries to install the spec.</span><br><span class="line"></span><br><span class="line">--use-modular-headers</span><br><span class="line"></span><br><span class="line">Lint uses modular headers during installation.</span><br><span class="line"></span><br><span class="line">--sources=https://cdn.cocoapods.org/</span><br><span class="line"></span><br><span class="line">The sources from which to pull dependent pods (defaults to https://cdn.cocoapods.org/). Multiple sources must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--platforms=ios,macos</span><br><span class="line"></span><br><span class="line">Lint against specific platforms (defaults to all platforms supported by the podspec). Multiple platforms must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--private</span><br><span class="line"></span><br><span class="line">Lint skips checks that apply only to public specs.</span><br><span class="line"></span><br><span class="line">--swift-version=VERSION</span><br><span class="line"></span><br><span class="line">The SWIFT_VERSION that should be used to lint the spec. This takes precedence over the Swift versions specified by the spec or a .swift-version file.</span><br><span class="line"></span><br><span class="line">--skip-import-validation</span><br><span class="line"></span><br><span class="line">Lint skips validating that the pod can be imported.</span><br><span class="line"></span><br><span class="line">--skip-tests</span><br><span class="line"></span><br><span class="line">Lint skips building and running tests during validation.</span><br><span class="line"></span><br><span class="line">--analyze</span><br><span class="line"></span><br><span class="line">Validate with the Xcode Static Analysis tool.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="spec-cat"><a href="#spec-cat" class="headerlink" title="spec cat"></a>spec cat</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec cat [QUERY]</span><br></pre></td></tr></table></figure>

<p>打印名称与标准输出匹配的podspec的内容。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--regex</span><br><span class="line"></span><br><span class="line">Interpret the QUERY as a regular expression.</span><br><span class="line"></span><br><span class="line">--show-all</span><br><span class="line"></span><br><span class="line">Pick from all versions of the given podspec.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="spec-which"><a href="#spec-which" class="headerlink" title="spec which"></a>spec which</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec which [QUERY]</span><br></pre></td></tr></table></figure>
<p>打印名称与查询匹配的.podspec文件的路径</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--regex</span><br><span class="line"></span><br><span class="line">Interpret the QUERY as a regular expression.</span><br><span class="line"></span><br><span class="line">--show-all</span><br><span class="line"></span><br><span class="line">Print all versions of the given podspec.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="spec-edit"><a href="#spec-edit" class="headerlink" title="spec edit"></a>spec edit</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod spec edit [QUERY]</span><br></pre></td></tr></table></figure>
<p>打开要编辑的podspec匹配查询。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--regex</span><br><span class="line"></span><br><span class="line">Interpret the QUERY as a regular expression.</span><br><span class="line"></span><br><span class="line">--show-all</span><br><span class="line"></span><br><span class="line">Pick from all versions of the given podspec.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Trunk"><a href="#Trunk" class="headerlink" title="Trunk"></a>Trunk</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk add-owner</span><br><span class="line"></span><br><span class="line">pod trunk info</span><br><span class="line"></span><br><span class="line">pod trunk me</span><br><span class="line"></span><br><span class="line">pod trunk push</span><br><span class="line"></span><br><span class="line">pod trunk register</span><br><span class="line"></span><br><span class="line">pod trunk remove-owner</span><br><span class="line"></span><br><span class="line">pod trunk deprecate</span><br><span class="line"></span><br><span class="line">pod trunk delete</span><br></pre></td></tr></table></figure>

<h4 id="trunk-add-owner"><a href="#trunk-add-owner" class="headerlink" title="trunk add-owner"></a>trunk add-owner</h4><p>自V0.33.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk add-owner POD OWNER-EMAIL</span><br></pre></td></tr></table></figure>

<p>将具有指定<code>所有者电子邮件</code>的注册用户添加为给定POD的所有者。“所有者”是一个注册用户，允许对pod进行更改，比如推送新版本和添加或删除其他“所有者”。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-info"><a href="#trunk-info" class="headerlink" title="trunk info"></a>trunk info</h4><p>自V0.33.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk info NAME</span><br></pre></td></tr></table></figure>
<p>返回关于Pod的信息。</p>
<p>继承的选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-me"><a href="#trunk-me" class="headerlink" title="trunk me"></a>trunk me</h4><p>自V0.33.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk me </span><br></pre></td></tr></table></figure>
<p>包括关于你的登记的信息，然后是你的所有会话。</p>
<p>这些会话包括当前会话、其他有效会话、未验证会话和过期会话。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-push"><a href="#trunk-push" class="headerlink" title="trunk push"></a>trunk push</h4><p>自V0.33.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push [PATH]</span><br></pre></td></tr></table></figure>
<p>在<code>PATH</code>上发布podspec，使其对“trunk”spec-repo的所有用户可用。如果没有提供路径，则默认为当前目录。</p>
<p>在将podspec推送到cocoapods.org之前，这将执行podspec的一个本地lint，包括一个库的构建。但是，您仍然有责任确保发布的podspec能够真正为您的用户工作。因此，建议您首先尝试使用podspec将该库集成到演示和&#x2F;或实际应用程序中。</p>
<p>如果这是您第一次发布这个pod的规范，那么您将自动注册为这个pod的“所有者”。(注意，这里的“所有者”指的是允许发布新版本并添加其他“所有者”的人，不一定是库的作者。)</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--allow-warnings</span><br><span class="line"></span><br><span class="line">Allows push even if there are lint warnings.</span><br><span class="line"></span><br><span class="line">--use-libraries</span><br><span class="line"></span><br><span class="line">Linter uses static libraries to install the spec.</span><br><span class="line"></span><br><span class="line">--use-modular-headers</span><br><span class="line"></span><br><span class="line">Lint uses modular headers during installation.</span><br><span class="line"></span><br><span class="line">--swift-version=VERSION</span><br><span class="line"></span><br><span class="line">The SWIFT_VERSION that should be used to lint the spec. This takes precedence over a .swift-version file..</span><br><span class="line"></span><br><span class="line">--skip-import-validation</span><br><span class="line"></span><br><span class="line">Lint skips validating that the pod can be imported.</span><br><span class="line"></span><br><span class="line">--skip-tests</span><br><span class="line"></span><br><span class="line">Lint skips building and running tests during validation.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-register"><a href="#trunk-register" class="headerlink" title="trunk register"></a>trunk register</h4><p>自V0.33.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk register EMAIL [YOUR_NAME]</span><br></pre></td></tr></table></figure>

<p>注册一个新帐户，或创建一个新会话。</p>
<p>如果这是你的第一次注册，你的电子邮件地址和你的名字都是必须的。如果您已经在trunk上注册了，您可以省略YOUR_NAME(除非您想更改它)。</p>
<p>建议您提供会话的描述，以便以后更容易识别。例如，当您想清理会话时。一个常见的示例是指定您正在使用会话的机器的物理位置。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pod trunk register eloy@example.com `Eloy Durán` --description=`Personal Laptop`</span><br><span class="line">$ pod trunk register eloy@example.com --description=`Work Laptop`</span><br><span class="line">$ pod trunk register eloy@example.com</span><br></pre></td></tr></table></figure>

<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--description=DESCRIPTION</span><br><span class="line"></span><br><span class="line">An arbitrary description to easily identify your session later on..</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-remove-owner"><a href="#trunk-remove-owner" class="headerlink" title="trunk remove-owner"></a>trunk remove-owner</h4><p>自V0.33.0可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk remove-owner POD OWNER-EMAIL</span><br></pre></td></tr></table></figure>

<p>删除具有指定所有者电子邮件的用户，使其不再是给定POD的所有者。“所有者”是一个注册用户，允许对pod进行更改，比如推送新版本和添加或删除其他“所有者”。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-deprecate"><a href="#trunk-deprecate" class="headerlink" title="trunk deprecate"></a>trunk deprecate</h4><p>自v1.0.0.beta.1可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk deprecate NAME</span><br></pre></td></tr></table></figure>

<p>弃用某个pod。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--in-favor-of=OTHER_NAME</span><br><span class="line"></span><br><span class="line">The pod to deprecate this pod in favor of..</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="trunk-delete"><a href="#trunk-delete" class="headerlink" title="trunk delete"></a>trunk delete</h4><p>自v1.0.0.beta.1可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk delete NAME VERSION</span><br></pre></td></tr></table></figure>

<p>警告:删除别人依赖的Pod版本通常被认为是不良行为!请考虑使用deprecate命令。</p>
<p>从trunk和master specs repo中删除指定的pod版本。一旦删除，这个版本就不能再推了。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Repos"><a href="#Repos" class="headerlink" title="Repos"></a>Repos</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo add</span><br><span class="line"></span><br><span class="line">pod repo add-cdn</span><br><span class="line"></span><br><span class="line">pod repo update</span><br><span class="line"></span><br><span class="line">pod repo lint</span><br><span class="line"></span><br><span class="line">pod repo list</span><br><span class="line"></span><br><span class="line">pod repo remove</span><br><span class="line"></span><br><span class="line">pod repo push</span><br><span class="line"></span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure>

<h4 id="repo-add"><a href="#repo-add" class="headerlink" title="repo add"></a>repo add</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo add NAME URL [BRANCH]</span><br></pre></td></tr></table></figure>
<p>克隆位于<code>/home/travis/.cocoapods/repos</code>的本地spec repos目录中的<code>URL</code>。以后可以按名称引用远程服务器。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--progress</span><br><span class="line"></span><br><span class="line">Show the progress of cloning the spec repository.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="repo-add-cdn"><a href="#repo-add-cdn" class="headerlink" title="repo add-cdn"></a>repo add-cdn</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo add-cdn NAME URL</span><br></pre></td></tr></table></figure>

<p>将URL添加到本地spec repos目录&#x2F;home&#x2F;travis&#x2F;.cocoapods&#x2F;repos。以后可以按名称引用远程服务器。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="repo-update"><a href="#repo-update" class="headerlink" title="repo update"></a>repo update</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo update [NAME]</span><br></pre></td></tr></table></figure>
<p>更新规范repo名称的本地克隆。如果省略名称，则将更新&#x2F;home&#x2F;travis&#x2F;.cocoapods&#x2F;repos中的所有规范repo。</p>
<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="repo-lint"><a href="#repo-lint" class="headerlink" title="repo lint"></a>repo lint</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo lint [NAME|DIRECTORY]</span><br></pre></td></tr></table></figure>
<p>Lints规范repo名称。如果提供了目录，则假定该目录是repo的根目录。最后，如果没有提供名称，这将删除CocoaPods已知的所有spec repo。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--only-errors</span><br><span class="line"></span><br><span class="line">Lint presents only the errors.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="repo-list"><a href="#repo-list" class="headerlink" title="repo list"></a>repo list</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo list </span><br></pre></td></tr></table></figure>

<p>从&#x2F;home&#x2F;travis&#x2F;.cocoapods&#x2F;repos的本地spec repos目录中列出repos。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--count-only</span><br><span class="line"></span><br><span class="line">Show the total number of repos.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="repo-remove"><a href="#repo-remove" class="headerlink" title="repo remove"></a>repo remove</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo remove NAME</span><br></pre></td></tr></table></figure>

<p>从&#x2F;home&#x2F;travis&#x2F;.cocoapods&#x2F;repos的本地spec repos目录中删除远程命名名称。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="repo-push"><a href="#repo-push" class="headerlink" title="repo push"></a>repo push</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo push REPO [NAME.podspec]</span><br></pre></td></tr></table></figure>

<p>验证<code>NAME.podspec</code>或当前工作目录中的<code>*.podspec</code>，在<code>REPO</code>的本地副本（&#x2F;home&#x2F;travis&#x2F;.cocoapods&#x2F;repos&#x2F;[REPO]）中为pod创建一个目录和版本文件夹，将podspec文件复制到版本目录中，最后将REPO推送到远程。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--allow-warnings</span><br><span class="line"></span><br><span class="line">Allows pushing even if there are warnings.</span><br><span class="line"></span><br><span class="line">--use-libraries</span><br><span class="line"></span><br><span class="line">Linter uses static libraries to install the spec.</span><br><span class="line"></span><br><span class="line">--use-modular-headers</span><br><span class="line"></span><br><span class="line">Lint uses modular headers during installation.</span><br><span class="line"></span><br><span class="line">--sources=https://cdn.cocoapods.org/</span><br><span class="line"></span><br><span class="line">The sources from which to pull dependent pods (defaults to all available repos). Multiple sources must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--local-only</span><br><span class="line"></span><br><span class="line">Does not perform the step of pushing REPO to its remote.</span><br><span class="line"></span><br><span class="line">--no-private</span><br><span class="line"></span><br><span class="line">Lint includes checks that apply only to public repos.</span><br><span class="line"></span><br><span class="line">--skip-import-validation</span><br><span class="line"></span><br><span class="line">Lint skips validating that the pod can be imported.</span><br><span class="line"></span><br><span class="line">--skip-tests</span><br><span class="line"></span><br><span class="line">Lint skips building and running tests during validation.</span><br><span class="line"></span><br><span class="line">--commit-message=&quot;Fix bug in pod&quot;</span><br><span class="line"></span><br><span class="line">Add custom commit message. Opens default editor if no commit message is specified.</span><br><span class="line"></span><br><span class="line">--use-json</span><br><span class="line"></span><br><span class="line">Convert the podspec to JSON before pushing it to the repo.</span><br><span class="line"></span><br><span class="line">--swift-version=VERSION</span><br><span class="line"></span><br><span class="line">The SWIFT_VERSION that should be used when linting the spec. This takes precedence over the Swift versions specified by the spec or a .swift-version file.</span><br><span class="line"></span><br><span class="line">--no-overwrite</span><br><span class="line"></span><br><span class="line">Disallow pushing that would overwrite an existing spec.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod setup </span><br></pre></td></tr></table></figure>
<p>设置CocoaPods环境。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--version</span><br><span class="line"></span><br><span class="line">Show the version of the tool.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod lib create</span><br><span class="line"></span><br><span class="line">pod lib lint</span><br></pre></td></tr></table></figure>

<h4 id="lib-create"><a href="#lib-create" class="headerlink" title="lib create"></a>lib create</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod lib create NAME</span><br></pre></td></tr></table></figure>
<p>根据CocoaPods的最佳实践，创建一个用于开发名为NAME的新Pod的仓库。如果指定了包含兼容模板的git repo的模板URL，则将使用该URL代替默认的模板URL。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--template-url=URL</span><br><span class="line"></span><br><span class="line">The URL of the git repo containing a compatible template.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="lib-lint"><a href="#lib-lint" class="headerlink" title="lib lint"></a>lib lint</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod lib lint [PODSPEC_PATHS ...]</span><br></pre></td></tr></table></figure>

<p>使用工作目录中的文件验证Pod。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--quick</span><br><span class="line"></span><br><span class="line">Lint skips checks that would require to download and build the spec.</span><br><span class="line"></span><br><span class="line">--allow-warnings</span><br><span class="line"></span><br><span class="line">Lint validates even if warnings are present.</span><br><span class="line"></span><br><span class="line">--subspec=NAME</span><br><span class="line"></span><br><span class="line">Lint validates only the given subspec.</span><br><span class="line"></span><br><span class="line">--no-subspecs</span><br><span class="line"></span><br><span class="line">Lint skips validation of subspecs.</span><br><span class="line"></span><br><span class="line">--no-clean</span><br><span class="line"></span><br><span class="line">Lint leaves the build directory intact for inspection.</span><br><span class="line"></span><br><span class="line">--fail-fast</span><br><span class="line"></span><br><span class="line">Lint stops on the first failing platform or subspec.</span><br><span class="line"></span><br><span class="line">--use-libraries</span><br><span class="line"></span><br><span class="line">Lint uses static libraries to install the spec.</span><br><span class="line"></span><br><span class="line">--use-modular-headers</span><br><span class="line"></span><br><span class="line">Lint uses modular headers during installation.</span><br><span class="line"></span><br><span class="line">--sources=https://cdn.cocoapods.org/</span><br><span class="line"></span><br><span class="line">The sources from which to pull dependent pods (defaults to https://cdn.cocoapods.org/). Multiple sources must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--platforms=ios,macos</span><br><span class="line"></span><br><span class="line">Lint against specific platforms (defaults to all platforms supported by the podspec). Multiple platforms must be comma-delimited.</span><br><span class="line"></span><br><span class="line">--private</span><br><span class="line"></span><br><span class="line">Lint skips checks that apply only to public specs.</span><br><span class="line"></span><br><span class="line">--swift-version=VERSION</span><br><span class="line"></span><br><span class="line">The SWIFT_VERSION that should be used to lint the spec. This takes precedence over the Swift versions specified by the spec or a .swift-version file.</span><br><span class="line"></span><br><span class="line">--include-podspecs=**/*.podspec</span><br><span class="line"></span><br><span class="line">Additional ancillary podspecs which are used for linting via :path.</span><br><span class="line"></span><br><span class="line">--external-podspecs=**/*.podspec</span><br><span class="line"></span><br><span class="line">Additional ancillary podspecs which are used for linting via :podspec. If there are --include-podspecs, then these are removed from them.</span><br><span class="line"></span><br><span class="line">--skip-import-validation</span><br><span class="line"></span><br><span class="line">Lint skips validating that the pod can be imported.</span><br><span class="line"></span><br><span class="line">--skip-tests</span><br><span class="line"></span><br><span class="line">Lint skips building and running tests during validation.</span><br><span class="line"></span><br><span class="line">--analyze</span><br><span class="line"></span><br><span class="line">Validate with the Xcode Static Analysis tool.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc repl</span><br><span class="line"></span><br><span class="line">pod ipc spec</span><br><span class="line"></span><br><span class="line">pod ipc podfile</span><br><span class="line"></span><br><span class="line">pod ipc podfile-json</span><br><span class="line"></span><br><span class="line">pod ipc list</span><br><span class="line"></span><br><span class="line">pod ipc update-search-index</span><br></pre></td></tr></table></figure>

<h4 id="ipc-repl"><a href="#ipc-repl" class="headerlink" title="ipc repl"></a>ipc repl</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc repl </span><br></pre></td></tr></table></figure>
<p>repl监听标准输入上的命令，并将它们的结果输出到标准输出。它接受所有其他ipc子命令。repl将用ASCII CR+LF <code>\n\r</code>来表示输出的结束。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="ipc-spec"><a href="#ipc-spec" class="headerlink" title="ipc spec"></a>ipc spec</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc spec PATH</span><br></pre></td></tr></table></figure>

<p>将podspec转换为JSON并将其打印到STDOUT。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ipc-podfile"><a href="#ipc-podfile" class="headerlink" title="ipc podfile"></a>ipc podfile</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc podfile PATH</span><br></pre></td></tr></table></figure>

<p>将Podfile转换为YAML并将其打印到STDOUT。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ipc-podfile-json"><a href="#ipc-podfile-json" class="headerlink" title="ipc podfile-json"></a>ipc podfile-json</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc podfile-json PATH</span><br></pre></td></tr></table></figure>
<p>将Podfile转换为JSON并将其打印到STDOUT。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--project-directory=/project/dir/</span><br><span class="line"></span><br><span class="line">The path to the root of the project directory.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ipc-list"><a href="#ipc-list" class="headerlink" title="ipc list"></a>ipc list</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc list </span><br></pre></td></tr></table></figure>

<p>打印到STDOUT一个YAML字典，其中键是规范的名称，每个对应的值是一个具有以下键的字典：-在文件中定义的-version-authors-summary-description-platforms</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br></pre></td></tr></table></figure>

<h4 id="ipc-update-search-index"><a href="#ipc-update-search-index" class="headerlink" title="ipc update-search-index"></a>ipc update-search-index</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod ipc update-search-index </span><br></pre></td></tr></table></figure>

<p>更新搜索索引并将其路径打印到标准输出。搜索索引是一个YAML编码的字典，其中键是Pods的名称，值是一个包含以下信息的字典:- version - summary - description - authors</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod plugins list</span><br><span class="line"></span><br><span class="line">pod plugins search</span><br><span class="line"></span><br><span class="line">pod plugins installed</span><br><span class="line"></span><br><span class="line">pod plugins create</span><br><span class="line"></span><br><span class="line">pod plugins publish</span><br></pre></td></tr></table></figure>

<h4 id="plugins-list"><a href="#plugins-list" class="headerlink" title="plugins list"></a>plugins list</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod plugins list </span><br></pre></td></tr></table></figure>
<p>列出所有已知的插件（根据github.com&#x2F;CocoaPods&#x2F;cocoapods-plugins）</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="plugins-search"><a href="#plugins-search" class="headerlink" title="plugins search"></a>plugins search</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod plugins search QUERY</span><br></pre></td></tr></table></figure>

<p>搜索其是否包含<code>名称</code>的<code>插件</code>。查询是一个正则表达式，忽略大小写。</p>
<p>使用<code>——full</code>，它还可以根据<code>作者</code>和<code>描述</code>进行搜索。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--full</span><br><span class="line"></span><br><span class="line">Search by name, author, and description.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="plugins-installed"><a href="#plugins-installed" class="headerlink" title="plugins installed"></a>plugins installed</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod plugins installed </span><br></pre></td></tr></table></figure>
<p>列出所有已安装的插件及其各自的版本。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="plugins-create"><a href="#plugins-create" class="headerlink" title="plugins create"></a>plugins create</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod plugins create NAME [TEMPLATE_URL]</span><br></pre></td></tr></table></figure>

<p>根据CocoaPods的最佳实践，创建一个名为<code>NAME</code>的新插件开发框架。</p>
<p>如果指定了指向包含兼容模板的git repo的<code>TEMPLATE_URL</code>，则将使用它来替代默认模板。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="plugins-publish"><a href="#plugins-publish" class="headerlink" title="plugins publish"></a>plugins publish</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod plugins publish </span><br></pre></td></tr></table></figure>

<p>这个命令只对CocoaPods插件的开发者有用。</p>
<p>它打开一个新的GitHub问题，请求将当前正在开发的插件添加到官方插件列表中。</p>
<p>当前目录应该有一个(而且只有一个).gemspec文件描述CocoaPods插件gem。</p>
<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod cache list</span><br><span class="line"></span><br><span class="line">pod cache clean</span><br></pre></td></tr></table></figure>

<h4 id="cache-list"><a href="#cache-list" class="headerlink" title="cache list"></a>cache list</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod cache list [NAME]</span><br></pre></td></tr></table></figure>
<p>将pods缓存的内容显示为按pod组织的YAML树输出。如果给出了名称，那么输出中只会包含该pod的缓存。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--short</span><br><span class="line"></span><br><span class="line">Only print the path relative to the cache root.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="cache-clean"><a href="#cache-clean" class="headerlink" title="cache clean"></a>cache clean</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod cache clean [NAME]</span><br></pre></td></tr></table></figure>

<p>删除给定pod的缓存，或者完全清除缓存。</p>
<p>如果请求的pod的不同版本有多个缓存，您将被询问要清除哪个缓存。使用——all来清洗它们。</p>
<p>如果没有给出pod名称，则需要指定——all标志(这是为了避免错误地清除所有缓存)。</p>
<blockquote>
<p>选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--all</span><br><span class="line"></span><br><span class="line">Remove all the cached pods without asking.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>继承的选项：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--silent</span><br><span class="line"></span><br><span class="line">Show nothing.</span><br><span class="line"></span><br><span class="line">--verbose</span><br><span class="line"></span><br><span class="line">Show more debugging information.</span><br><span class="line"></span><br><span class="line">--no-ansi</span><br><span class="line"></span><br><span class="line">Show output without ANSI codes.</span><br><span class="line"></span><br><span class="line">--help</span><br><span class="line"></span><br><span class="line">Show help banner of specified command.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://guides.cocoapods.org/terminal/commands.html">Command-line Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>Dart线程管理详解</title>
    <url>/2023/12/14/Dart%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><iframe src="https://dartpad.cn/?" width="800" height="300"></iframe>

<p><a href="">Dart</a>是一个优秀的编程语言，它提供了对多线程的支持。尤其是在<a href="">Flutter</a>框架中，Dart线程管理尤为重要。</p>
<p>而在<a href="">Flutter</a>中，线程管理主要涉及到两个方面：一个是<a href="">Flutter 引擎</a>的线程管理，另一个是<a href="">Dart</a>本身的线程管理。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://dart.cn/">Dart中文文档</a></li>
<li><a href="https://medium.com/dartlang">dartlang</a></li>
<li><a href="https://dart.dev/#try-dart">try-dart</a></li>
<li><a href="https://dartpad.cn/">dartpad</a></li>
<li><a href="https://pub.dev/documentation/thread/latest/">Flutter-documentation-thread</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/40069285?utm_id=0">聊一聊Flutter线程管理与Dart Isolate机制</a></li>
<li><a href="https://juejin.cn/post/7130915241344368671">详解 Flutter engine多线程、Dart isolate和异步</a></li>
<li><a href="https://cloud.tencent.com/developer/article/2305626?areaId=106001">《深入浅出Dart》事件循环和协程机制</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter RepaintBoundary 详细解析</title>
    <url>/2025/09/17/Flutter%20RepaintBoundary%20%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>RepaintBoundary 是 Flutter 中用于提升渲染性能的一个核心组件，它通过创建独立的绘制边界来隔离不必要的重绘。下面我会详细解释其工作原理、使用场景、使用方法以及注意事项。</p>
<h2 id="1-什么是-RepaintBoundary"><a href="#1-什么是-RepaintBoundary" class="headerlink" title="1. 什么是 RepaintBoundary"></a>1. 什么是 RepaintBoundary</h2><p>RepaintBoundary 是 Flutter 中的一个 Widget，它为其子组件创建一个独立的<strong>绘制层</strong>（Layer），从而在渲染树上建立一个绘制边界。这个边界可以阻止重绘操作向父组件传播，也可以防止父组件的重绘操作影响到边界内的子组件，有效隔离了不必要的重绘，提升渲染性能。</p>
<p>在 Flutter 的渲染流程中，当某个 <code>RenderObject</code> 需要重绘（如调用了 <code>markNeedsPaint()</code>），Flutter 会向上查找最近的 <code>isRepaintBoundary</code> 为 <code>true</code> 的祖先节点，然后将该祖先节点加入待重绘列表。在向下绘制时，如果遇到 <code>isRepaintBoundary</code> 为 <code>true</code> 的节点，则会停止向下遍历，直接复用该节点的 Layer。<code>RepaintBoundary</code> 对应的 <code>RenderObject</code> 是 <code>RenderRepaintBoundary</code>，其 <code>isRepaintBoundary</code> 属性返回 <code>true</code>，因此能够创建独立的 Layer。</p>
<h2 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2.  工作原理"></a>2.  工作原理</h2><p>Flutter 的重绘过程遵循”绘制上界”和”绘制下界”的原则：</p>
<ul>
<li><p><strong>绘制上界（向上传播）</strong>：当一个 <code>RenderObject</code> 需要重绘时（例如调用了 <code>markNeedsPaint()</code>），它会检查自身的 <code>isRepaintBoundary</code> 属性。</p>
<ul>
<li>如果为 <code>true</code>，则将自己加入待重绘列表 (<code>_nodesNeedingPaint</code>)。</li>
<li>如果为 <code>false</code>，则会<strong>向上递归</strong>查找最近的 <code>isRepaintBoundary</code> 为 <code>true</code> 的祖先节点，并将该祖先节点加入待重绘列表。</li>
</ul>
</li>
<li><p><strong>绘制下界（向下绘制）</strong>：在 <code>PaintingContext.paintChild</code> 方法中，当绘制一个子 <code>RenderObject</code> 时：</p>
<ul>
<li>如果该子节点的 <code>isRepaintBoundary</code> 为 <code>true</code>，则会停止当前 Layer 的录制，并通过 <code>_compositeChild</code> 方法将该子节点合成到独立的 Layer 中。</li>
<li>如果为 <code>false</code>，则会继续在该子节点的上下文中进行绘制。</li>
</ul>
</li>
</ul>
<p>这种机制意味着，通过设置 <code>RepaintBoundary</code>，可以将重绘范围限制在发生视觉变化的子树内，避免牵连其他无关部分进行重绘。</p>
<h2 id="3-何时使用-RepaintBoundary"><a href="#3-何时使用-RepaintBoundary" class="headerlink" title="3.  何时使用 RepaintBoundary"></a>3.  何时使用 RepaintBoundary</h2><p>在以下场景中，考虑使用 <code>RepaintBoundary</code> 可以带来显著的性能提升：</p>
<table>
<thead>
<tr>
<th align="left">场景类型</th>
<th align="left">具体例子</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>频繁更新的小部件</strong></td>
<td align="left">动画、光标、频繁变化的指示器（如文本输入框的闪烁光标）</td>
</tr>
<tr>
<td align="left"><strong>复杂静态背景</strong></td>
<td align="left">由 <code>CustomPainter</code> 绘制的复杂且不常变化的背景（如带有大量图形的背景）</td>
</tr>
<tr>
<td align="left"><strong>滚动列表中的复杂项</strong></td>
<td align="left"><code>ListView</code> 或 <code>GridView</code> 中具有复杂绘制逻辑的子项（Flutter 的 <code>SliverChildBuilderDelegate</code> 默认会为列表项添加 <code>RepaintBoundary</code>）</td>
</tr>
<tr>
<td align="left"><strong>与周围重绘频率不同的子树</strong></td>
<td align="left">子树内部频繁变化而周围静态，或子树静态而周围频繁变化（如一个静态的图表位于一个频繁更新的计时器旁边）</td>
</tr>
</tbody></table>
<h2 id="4-️-如何使用-RepaintBoundary"><a href="#4-️-如何使用-RepaintBoundary" class="headerlink" title="4. ️ 如何使用 RepaintBoundary"></a>4. ️ 如何使用 RepaintBoundary</h2><p>使用 <code>RepaintBoundary</code> 非常简单，只需将需要隔离绘制的子组件用 <code>RepaintBoundary</code> 包裹起来即可。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">RepaintBoundary(</span><br><span class="line">  child: YourFrequentlyRepaintingWidget(), <span class="comment">// 你的需要独立重绘的组件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>Flutter 框架本身也在一些地方使用了 <code>RepaintBoundary</code>，例如：</p>
<ul>
<li><strong>滚动条</strong> (<code>Scrollbar</code>, <code>CupertinoScrollbar</code>)</li>
<li><strong>文本输入框</strong> (<code>TextField</code>, <code>CupertinoTextField</code>) 的光标</li>
<li><strong>过度滚动指示器</strong> (<code>GlowingOverscrollIndicator</code>)</li>
<li><strong>流式布局</strong> (<code>Flow</code>) 会为每个子组件自动包裹 <code>RepaintBoundary</code></li>
<li><strong>列表构建</strong> (<code>SliverChildBuilderDelegate</code>) 在 <code>addRepaintBoundaries</code> 为 <code>true</code>（默认值）时会为每个列表项添加 <code>RepaintBoundary</code></li>
</ul>
<h2 id="5-注意事项与优化建议"><a href="#5-注意事项与优化建议" class="headerlink" title="5.  注意事项与优化建议"></a>5.  注意事项与优化建议</h2><p>虽然 <code>RepaintBoundary</code> 能提升性能，但滥用则会适得其反。</p>
<ul>
<li><strong>避免滥用</strong>：每个 <code>RepaintBoundary</code> 都会创建一个新的 <strong>Layer</strong>。过多的 Layer 会增加内存开销和合成时间，可能反而导致性能下降。因此，不应为每个小部件都添加 <code>RepaintBoundary</code>，而应<strong>有选择地</strong>用于那些真正能从中受益的组件。</li>
<li><strong>结合性能分析</strong>：使用 Flutter DevTools 的 <strong>性能视图（Performance View）</strong> 和 <strong>图层视图（Layer View）</strong> 来分析应用的实际表现。如果你发现某个区域的频繁重绘导致了性能问题，并且该区域与周围的重绘频率不同，那么就是使用 <code>RepaintBoundary</code> 的好时机。</li>
<li><strong>与其他优化手段结合</strong>：<ul>
<li>对于 <code>CustomPainter</code>，确保正确实现 <code>shouldRepaint</code> 方法，以避免不必要的重绘。</li>
<li>对不变的 widget 使用 <code>const</code> 构造函数。</li>
<li>对于长列表，使用 <code>ListView.builder</code> 或 <code>GridView.builder</code> 进行懒加载。</li>
</ul>
</li>
</ul>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.  总结"></a>6.  总结</h2><p><code>RepaintBoundary</code> 是 Flutter 中一个强大的性能优化工具，它通过建立独立的绘制边界，将重绘操作限制在必要的范围内，有效减少了不必要的绘制计算，从而提升应用的渲染性能，尤其是在处理复杂动画、自定义绘制和滚动列表时效果显著。</p>
<p>然而，它也并非万能药，需要根据实际性能分析结果谨慎使用，避免因创建过多 Layer 而导致新的性能瓶颈。正确使用 <code>RepaintBoundary</code>，结合其他优化策略，可以帮助你构建出更流畅的 Flutter 应用。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter与原生交互</title>
    <url>/2022/04/16/Flutter%E4%B8%8E%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Flutter-Native 消息通道一共有以下三种，在日常开发的过程中我们可能使用的<code>MethodChannel</code>相对比较多一些。</p>
<p>而这三种消息通道都是在<code>Flutter</code>的<code>flutter/services.dart</code>库中提供,具体使用哪种方式，需要根据具体的业务来决定。</p>
<ul>
<li><p><code>MethodChannel</code>：用于单向调用，Flutter端可以调用原生平台的方法，原生端可以返回结果给Flutter端。</p>
</li>
<li><p><code>EventChannel</code>：用于双向通信，Flutter端可以监听原生平台发出的事件，原生端也可以发送事件给Flutter端。</p>
</li>
<li><p><code>BasicMessageChannel</code>：用于传递任意类型的消息，可以实现双向通信。Flutter端和原生端可以互相发送和接收不同类型的消息。</p>
</li>
</ul>
<h2 id="MethodChannel"><a href="#MethodChannel" class="headerlink" title="MethodChannel"></a>MethodChannel</h2><p>使用<code>MethodChannel</code>可以实现Flutter与原生平台的单向通信，Flutter端可以调用原生平台的方法，并接收返回的结果。</p>
<p>在实际开发中，我们获取设备的信息、或者唤起原生的相机、相册等功能都会使用<code>MethodChannel</code>实现。</p>
<h3 id="Flutter端实现"><a href="#Flutter端实现" class="headerlink" title="Flutter端实现"></a>Flutter端实现</h3><p>需要在Flutter端创建一个MethodChannel，具体示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;package:flutter/services.dart&#x27;;</span><br><span class="line"></span><br><span class="line">class YourMethodChannel &#123;</span><br><span class="line">    const platform = const MethodChannel(&#x27;com.example.flutter_native_communication&#x27;);</span><br><span class="line"></span><br><span class="line">    Future&lt;void&gt; callNativeMethod() async &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        final String result = await platform.invokeMethod(&#x27;getPlatformVersion&#x27;);</span><br><span class="line">        print(&#x27;Response from native code: $result&#x27;);</span><br><span class="line">    &#125; on PlatformException catch (e) &#123;</span><br><span class="line">        print(&#x27;Error: $&#123;e.message&#125;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安卓端实现"><a href="#安卓端实现" class="headerlink" title="安卓端实现"></a>安卓端实现</h3><p>在Android平台上实现相应的方法。具体我们可以创建一个插件类来处理Flutter调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.flutter_channel_plugin;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line">import io.flutter.embedding.engine.plugins.FlutterPlugin;</span><br><span class="line">import io.flutter.plugin.common.MethodCall;</span><br><span class="line">import io.flutter.plugin.common.MethodChannel;</span><br><span class="line">import io.flutter.plugin.common.MethodChannel.MethodCallHandler;</span><br><span class="line">import io.flutter.plugin.common.MethodChannel.Result;</span><br><span class="line"></span><br><span class="line">/// MethodChannel：用于单向调用，Flutter端可以调用原生平台的方法，原生端可以返回结果给Flutter端。</span><br><span class="line">public class FlutterChannelPlugin implements FlutterPlugin, MethodCallHandler &#123;</span><br><span class="line">  private MethodChannel channel;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onAttachedToEngine(@NonNull FlutterPluginBinding flutterPluginBinding) &#123;</span><br><span class="line">    channel = new MethodChannel(flutterPluginBinding.getBinaryMessenger(), &quot;flutter_channel_plugin&quot;);</span><br><span class="line">    channel.setMethodCallHandler(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onMethodCall(@NonNull MethodCall call, @NonNull Result result) &#123;</span><br><span class="line">    if (call.method.equals(&quot;getPlatformVersion&quot;)) &#123;</span><br><span class="line">      result.success(&quot;Android &quot; + android.os.Build.VERSION.RELEASE);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result.notImplemented();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void onDetachedFromEngine(@NonNull FlutterPluginBinding binding) &#123;</span><br><span class="line">    channel.setMethodCallHandler(null);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="iOS实现"><a href="#iOS实现" class="headerlink" title="iOS实现"></a>iOS实现</h3><p>在iOS端我们同样需要创建个插件类来处理Flutter的调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Flutter/Flutter.h&gt;</span><br><span class="line"></span><br><span class="line">@interface FlutterChannelPlugin () &lt;FlutterPlugin&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) FlutterMethodChannel *channel;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation FlutterChannelPlugin</span><br><span class="line"></span><br><span class="line">+ (void)registerWithRegistrar:(NSObject&lt;FlutterPluginRegistrar&gt;*)registrar &#123;</span><br><span class="line">  // 创建插件实例并注册</span><br><span class="line">  FlutterChannelPlugin* instance = [[FlutterChannelPlugin alloc] init];</span><br><span class="line">  [instance setupMethodChannel:registrar];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setupMethodChannel:(NSObject&lt;FlutterPluginRegistrar&gt; *)registrar &#123;</span><br><span class="line">  // 创建FlutterMethodChannel实例</span><br><span class="line">  self.channel = [FlutterMethodChannel</span><br><span class="line">      methodChannelWithName:@&quot;com.example.flutter_native_communication&quot;</span><br><span class="line">            binaryMessenger:[registrar messenger]];</span><br><span class="line">  </span><br><span class="line">  // 设置回调函数</span><br><span class="line">  __weak typeof(self) weakSelf = self;</span><br><span class="line">  [self.channel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) &#123;</span><br><span class="line">    [weakSelf handleMethodCall:call result:result];</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result &#123;</span><br><span class="line">  if ([call.method isEqualToString:@&quot;getPlatformVersion&quot;]) &#123;</span><br><span class="line">    NSString* platform = [NSString stringWithFormat:@&quot;iOS %@&quot;, [[UIDevice currentDevice] systemVersion]];</span><br><span class="line">    result(platform);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    result(FlutterMethodNotImplemented);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>


<h2 id="EventChannel"><a href="#EventChannel" class="headerlink" title="EventChannel"></a>EventChannel</h2><p><code>EventChannel</code>基本用于<code>Flutter</code>与原生平台之间进行双向通信，允许原生平台向 <code>Flutter</code>发送事件。</p>
<h3 id="Flutter端实现-1"><a href="#Flutter端实现-1" class="headerlink" title="Flutter端实现"></a>Flutter端实现</h3><p>在Flutter端，我们需要使用Dart语言中创建一个EventChannel的实例，并设置事件监听器，具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;package:flutter/services.dart&#x27;;</span><br><span class="line"></span><br><span class="line">class YourEventChannel &#123;</span><br><span class="line">    // 创建 EventChannel 实例</span><br><span class="line">    EventChannel eventChannel = EventChannel(&#x27;com.example.flutter_native_communication/events&#x27;);</span><br><span class="line"></span><br><span class="line">    // 监听来自原生平台的事件</span><br><span class="line">    StreamSubscription subscription;</span><br><span class="line">    subscription = eventChannel.receiveBroadcastStream().listen((event) &#123;</span><br><span class="line">    // 处理来自原生平台的事件</span><br><span class="line">    print(&#x27;Received event: $event&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 在不需要时取消监听</span><br><span class="line">    subscription.cancel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安卓端实现-1"><a href="#安卓端实现-1" class="headerlink" title="安卓端实现"></a>安卓端实现</h3><p>在安卓端，我们同样需要创建一个<code>EventChannel</code>实例，并通过该实例发送事件到 Flutter,具体代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.flutter_channel_plugin;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import io.flutter.embedding.engine.FlutterEngine;</span><br><span class="line">import io.flutter.plugin.common.BinaryMessenger;</span><br><span class="line">import io.flutter.plugin.common.EventChannel;</span><br><span class="line">import io.flutter.plugin.common.EventChannel.EventSink;</span><br><span class="line">import io.flutter.plugin.common.EventChannel.StreamHandler;</span><br><span class="line"></span><br><span class="line">public class FlutterEventChannelPlugin implements StreamHandler &#123;</span><br><span class="line">    private static final String EVENT_CHANNEL = &quot;com.example.flutter_native_communication/events&quot;;</span><br><span class="line">    private EventSink eventSink;</span><br><span class="line"></span><br><span class="line">    public static void register(Context context, BinaryMessenger messenger) &#123;</span><br><span class="line">        FlutterEventChannelPlugin plugin = new FlutterEventChannelPlugin();</span><br><span class="line">        EventChannel eventChannel = new EventChannel(messenger, EVENT_CHANNEL);</span><br><span class="line">        eventChannel.setStreamHandler(plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onListen(Object arguments, EventSink eventSink) &#123;</span><br><span class="line">        this.eventSink = eventSink;</span><br><span class="line"></span><br><span class="line">        // 将事件发送到Flutter端</span><br><span class="line">        sendMessageToFlutter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCancel(Object arguments) &#123;</span><br><span class="line">        // 取消监听</span><br><span class="line">        eventSink = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void sendMessageToFlutter() &#123;</span><br><span class="line">        // 模拟发送事件到Flutter端</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(1000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (eventSink != null) &#123;</span><br><span class="line">                        eventSink.success(&quot;Event: &quot; + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="iOS端实现"><a href="#iOS端实现" class="headerlink" title="iOS端实现"></a>iOS端实现</h3><p>在iOS端，我们同样也需要创建一个<code>EventChannel</code>实例，并通过该实例发送事件到 Flutter,具体代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface FlutterEventChannelPlugin()&lt;FlutterStreamHandler&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) FlutterEventChannel *eventChannel;</span><br><span class="line">@property (nonatomic, copy) FlutterEventSink eventSink;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation FlutterEventChannelPlugin</span><br><span class="line"></span><br><span class="line">+ (void)registerWithRegistrar:(NSObject&lt;FlutterPluginRegistrar&gt;*)registrar &#123;</span><br><span class="line">    FlutterEventChannelPlugin* instance = [[FlutterEventChannelPlugin alloc] init];</span><br><span class="line">    [instance setupEventChannel:registrar];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setupEventChannel:(NSObject&lt;FlutterPluginRegistrar&gt; *)registrar &#123;</span><br><span class="line">  // 创建 FlutterEventChannel 实例</span><br><span class="line">    self.eventChannel = [FlutterEventChannel</span><br><span class="line">      eventChannelWithName:@&quot;com.example.flutter_native_communication/events&quot;</span><br><span class="line">            binaryMessenger:[registrar messenger]];</span><br><span class="line">    [self.eventChannel setStreamHandler:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在某个地方调用这个方法向 Flutter 发送事件</span><br><span class="line">- (void)sendEventToFlutter:(NSString*)event &#123;</span><br><span class="line">    if (self.eventSink) &#123;</span><br><span class="line">        self.eventSink(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)stopListening &#123;</span><br><span class="line">  // 在这里添加停止监听事件的逻辑</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)sendEvent:(id)eventData &#123;</span><br><span class="line">    if (self.eventSink) &#123;</span><br><span class="line">        self.eventSink(eventData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (FlutterError* _Nullable)onListenWithArguments:(id _Nullable)arguments eventSink:(FlutterEventSink)events &#123;</span><br><span class="line">    self.eventSink = events;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (FlutterError* _Nullable)onCancelWithArguments:(id _Nullable)arguments &#123;</span><br><span class="line">    self.eventSink = nil;</span><br><span class="line">    // 在这里添加取消监听事件的逻辑</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="BasicMessageChannel"><a href="#BasicMessageChannel" class="headerlink" title="BasicMessageChannel"></a>BasicMessageChannel</h2><p><code>BasicMessageChannel</code>可以进行原生和Flutter双向通信。</p>
<h3 id="Flutter端实现-2"><a href="#Flutter端实现-2" class="headerlink" title="Flutter端实现"></a>Flutter端实现</h3><p>在Flutter我们需要使用Dart语言创建个<code>BasicMessageChannel</code>实例，并设置消息监听器,示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#x27;package:flutter/services.dart&#x27;;</span><br><span class="line"></span><br><span class="line">class YourBasicMessageChannel &#123;</span><br><span class="line">  static const String _channelName = &#x27;your_basic_message_channel_name&#x27;;</span><br><span class="line">  final MethodChannel _methodChannel = MethodChannel(_channelName);</span><br><span class="line"></span><br><span class="line">  Future&lt;dynamic&gt; sendMessage(dynamic message) async &#123;</span><br><span class="line">    final dynamic response = await _methodChannel.invokeMethod(&#x27;sendMessage&#x27;, message);</span><br><span class="line">    return response;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void setMessageHandler(Future&lt;dynamic&gt; Function(dynamic) handler) &#123;</span><br><span class="line">    _methodChannel.setMethodCallHandler((MethodCall call) &#123;</span><br><span class="line">      if (call.method == &#x27;receiveMessage&#x27;) &#123;</span><br><span class="line">        return handler(call.arguments);</span><br><span class="line">      &#125;</span><br><span class="line">      return handler(null);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Android端实现"><a href="#Android端实现" class="headerlink" title="Android端实现"></a>Android端实现</h3><p>在Android端，我们同样需要创建一个<code>BasicMessageChannel</code>实例，并通过该实例发送消息到 Flutter，示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.flutter_channel_plugin;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import io.flutter.plugin.common.BasicMessageChannel;</span><br><span class="line">import io.flutter.plugin.common.StringCodec;</span><br><span class="line">import io.flutter.plugin.common.BinaryMessenger;</span><br><span class="line">import io.flutter.plugin.common.MessageCodec;</span><br><span class="line"></span><br><span class="line">public class FlutterBasicChannelPlugin &#123;</span><br><span class="line">    private static final String CHANNEL_NAME = &quot;com.example.flutter_native_communication/basic_message&quot;;</span><br><span class="line"></span><br><span class="line">    public static void register(Context context, BinaryMessenger messenger) &#123;</span><br><span class="line">        BasicMessageChannel&lt;String&gt; messageChannel = new BasicMessageChannel&lt;&gt;(messenger, CHANNEL_NAME, StringCodec.INSTANCE);</span><br><span class="line">        messageChannel.setMessageHandler(new BasicMessageChannel.MessageHandler&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(String message, BasicMessageChannel.Reply&lt;String&gt; reply) &#123;</span><br><span class="line">                // 处理来自Flutter端的消息</span><br><span class="line">                String replyMessage = &quot;Received message: &quot; + message;</span><br><span class="line">                reply.reply(replyMessage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="iOS端实现-1"><a href="#iOS端实现-1" class="headerlink" title="iOS端实现"></a>iOS端实现</h3><p>在Android端，我们也需要创建一个<code>BasicMessageChannel</code>实例，并通过该实例发送消息到 Flutter，示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Flutter/Flutter.h&gt;</span><br><span class="line">@interface NativeCommunicationPlugin () &lt;FlutterMessageListener&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) FlutterBasicMessageChannel *messageChannel;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation NativeCommunicationPlugin</span><br><span class="line"></span><br><span class="line">+ (void)registerWithRegistrar:(NSObject&lt;FlutterPluginRegistrar&gt;*)registrar &#123;</span><br><span class="line">  // 创建插件实例并注册</span><br><span class="line">  NativeCommunicationPlugin* instance = [[NativeCommunicationPlugin alloc] init];</span><br><span class="line">  [instance setupMessageChannel:registrar];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setupMessageChannel:(NSObject&lt;FlutterPluginRegistrar&gt; *)registrar &#123;</span><br><span class="line">  // 创建 FlutterBasicMessageChannel 实例</span><br><span class="line">  self.messageChannel = [FlutterBasicMessageChannel</span><br><span class="line">                         messageChannelWithName:@&quot;com.example.flutter_native_communication/basic_message&quot;</span><br><span class="line">                                  binaryMessenger:[registrar messenger]];</span><br><span class="line">  </span><br><span class="line">  // 设置消息处理器</span><br><span class="line">  __weak typeof(self) weakSelf = self;</span><br><span class="line">  [self.messageChannel setMessageHandler:^(id message, FlutterReply reply) &#123;</span><br><span class="line">    // 处理来自 Flutter 的消息</span><br><span class="line">    NSLog(@&quot;Received message: %@&quot;, message);</span><br><span class="line">    </span><br><span class="line">    // 回复消息给 Flutter</span><br><span class="line">    reply(@&quot;Reply from iOS&quot;);</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在某个地方调用这个方法向 Flutter 发送消息</span><br><span class="line">- (void)sendMessageToFlutter:(NSString *)message &#123;</span><br><span class="line">  [self.messageChannel sendMessage:message reply:^(id reply) &#123;</span><br><span class="line">    // 处理来自 Flutter 的回复消息</span><br><span class="line">    NSLog(@&quot;Received reply: %@&quot;, reply);</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://api.flutter-io.cn/flutter/services/BasicMessageChannel-class.html">BasicMessageChannel&lt;T&gt; class</a></li>
<li><a href="https://api.flutter-io.cn/flutter/services/EventChannel-class.html">EventChannel class</a></li>
<li><a href="https://api.flutter-io.cn/flutter/services/MethodChannel-class.html">MethodChannel class</a></li>
<li><a href="https://flutter.cn/docs/development/platform-integration/platform-channels?tab=ios-channel-objective-c-tab">撰写双端平台代码（插件编写实现）</a></li>
<li><a href="https://myoule.zhipin.com/articles/1a47aa6302584ce8qxB72ty4FA~~.html">有道词典 Flutter 架构与应用</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 调试工具与开发优化指南</title>
    <url>/2022/04/15/Flutter%20%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%B8%8E%E5%BC%80%E5%8F%91%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Flutter-调试工具与开发优化指南"><a href="#Flutter-调试工具与开发优化指南" class="headerlink" title="Flutter 调试工具与开发优化指南"></a>Flutter 调试工具与开发优化指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#flutter-%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E8%AF%A6%E8%A7%A3">Flutter 调试工具详解</a></li>
<li><a href="#%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">开发技巧与最佳实践</a></li>
<li><a href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5">性能优化策略</a></li>
<li><a href="#%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE">项目优化建议</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ol>
<hr>
<h2 id="Flutter-调试工具详解"><a href="#Flutter-调试工具详解" class="headerlink" title="Flutter 调试工具详解"></a>Flutter 调试工具详解</h2><h3 id="1-debugPaintSizeEnabled-布局边界可视化"><a href="#1-debugPaintSizeEnabled-布局边界可视化" class="headerlink" title="1. debugPaintSizeEnabled - 布局边界可视化"></a>1. debugPaintSizeEnabled - 布局边界可视化</h3><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><p><code>debugPaintSizeEnabled</code> 是 Flutter 提供的调试工具，用于显示所有 Widget 的布局边界。启用后，每个 Widget 都会显示一个彩色边框，帮助开发者理解布局结构和调试布局问题。</p>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>; <span class="comment">// 导入渲染库</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>; <span class="comment">// 导入基础库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 只在调试模式下启用，避免影响生产环境性能</span></span><br><span class="line">  <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">    debugPaintSizeEnabled = <span class="keyword">true</span>; <span class="comment">// 启用布局边界显示</span></span><br><span class="line">  &#125;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行时切换"><a href="#运行时切换" class="headerlink" title="运行时切换"></a>运行时切换</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在应用运行时动态切换</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebugToggleWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _DebugToggleWidgetState createState() =&gt; _DebugToggleWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DebugToggleWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">DebugToggleWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> FloatingActionButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="comment">// 切换布局边界显示状态</span></span><br><span class="line">          debugPaintSizeEnabled = !debugPaintSizeEnabled;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Icon(debugPaintSizeEnabled ? Icons.visibility_off : Icons.visibility),</span><br><span class="line">      tooltip: debugPaintSizeEnabled ? <span class="string">&#x27;隐藏布局边界&#x27;</span> : <span class="string">&#x27;显示布局边界&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul>
<li><strong>布局调试</strong>：查看 Widget 的实际占用空间</li>
<li><strong>对齐问题</strong>：检查元素是否正确对齐</li>
<li><strong>间距调试</strong>：验证 padding 和 margin 设置</li>
<li><strong>嵌套分析</strong>：理解复杂的 Widget 嵌套结构</li>
</ul>
<h3 id="2-debugRepaintRainbowEnabled-重绘可视化"><a href="#2-debugRepaintRainbowEnabled-重绘可视化" class="headerlink" title="2. debugRepaintRainbowEnabled - 重绘可视化"></a>2. debugRepaintRainbowEnabled - 重绘可视化</h3><h4 id="功能说明-1"><a href="#功能说明-1" class="headerlink" title="功能说明"></a>功能说明</h4><p><code>debugRepaintRainbowEnabled</code> 用于显示 Widget 的重绘情况。启用后，每次 Widget 重绘时都会显示不同颜色的边框，颜色会随着重绘次数变化，帮助识别不必要的重绘操作。</p>
<h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/rendering.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">    debugRepaintRainbowEnabled = <span class="keyword">true</span>; <span class="comment">// 启用重绘彩虹显示</span></span><br><span class="line">    <span class="comment">// 注意：不要同时启用 debugPaintSizeEnabled，会影响观察效果</span></span><br><span class="line">    <span class="comment">// debugPaintSizeEnabled = false;</span></span><br><span class="line">  &#125;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高级用法：条件启用"><a href="#高级用法：条件启用" class="headerlink" title="高级用法：条件启用"></a>高级用法：条件启用</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceDebugApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;性能调试&#x27;</span>),</span><br><span class="line">          actions: [</span><br><span class="line">            <span class="comment">// 添加调试工具切换按钮</span></span><br><span class="line">            IconButton(</span><br><span class="line">              icon: <span class="keyword">const</span> Icon(Icons.bug_report),</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="comment">// 切换重绘彩虹显示</span></span><br><span class="line">                debugRepaintRainbowEnabled = !debugRepaintRainbowEnabled;</span><br><span class="line">                <span class="comment">// 强制重建以应用更改</span></span><br><span class="line">                (context <span class="keyword">as</span> <span class="built_in">Element</span>).markNeedsBuild();</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">const</span> PerformanceTestWidget(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="性能分析示例"><a href="#性能分析示例" class="headerlink" title="性能分析示例"></a>性能分析示例</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 演示如何使用重绘彩虹分析性能问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepaintAnalysisWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _RepaintAnalysisWidgetState createState() =&gt; _RepaintAnalysisWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_RepaintAnalysisWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RepaintAnalysisWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 这个 Text 会频繁重绘（不好的做法）</span></span><br><span class="line">        Text(<span class="string">&#x27;计数器: <span class="subst">$_counter</span>&#x27;</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 RepaintBoundary 隔离重绘区域（好的做法）</span></span><br><span class="line">        RepaintBoundary(</span><br><span class="line">          child: CounterDisplay(counter: _counter),</span><br><span class="line">        ),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 静态内容，不应该重绘</span></span><br><span class="line">        <span class="keyword">const</span> RepaintBoundary(</span><br><span class="line">          child: Text(<span class="string">&#x27;这是静态内容，不应该重绘&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        </span><br><span class="line">        ElevatedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _counter++; <span class="comment">// 只更新必要的状态</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&#x27;增加计数&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立的计数器显示组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterDisplay</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> counter;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> CounterDisplay(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.counter&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 这个组件只在 counter 变化时重建</span></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        border: Border.all(color: Colors.blue),</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">8</span>),</span><br><span class="line">      ),</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&#x27;当前计数: <span class="subst">$counter</span>&#x27;</span>,</span><br><span class="line">        style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">24</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-其他重要调试工具"><a href="#3-其他重要调试工具" class="headerlink" title="3. 其他重要调试工具"></a>3. 其他重要调试工具</h3><h4 id="debugPaintLayerBordersEnabled-图层边界显示"><a href="#debugPaintLayerBordersEnabled-图层边界显示" class="headerlink" title="debugPaintLayerBordersEnabled - 图层边界显示"></a>debugPaintLayerBordersEnabled - 图层边界显示</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">    debugPaintLayerBordersEnabled = <span class="keyword">true</span>; <span class="comment">// 显示渲染图层边界</span></span><br><span class="line">  &#125;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="debugProfileBuildsEnabled-构建性能分析"><a href="#debugProfileBuildsEnabled-构建性能分析" class="headerlink" title="debugProfileBuildsEnabled - 构建性能分析"></a>debugProfileBuildsEnabled - 构建性能分析</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">    debugProfileBuildsEnabled = <span class="keyword">true</span>; <span class="comment">// 启用构建性能分析</span></span><br><span class="line">  &#125;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组合使用调试工具"><a href="#组合使用调试工具" class="headerlink" title="组合使用调试工具"></a>组合使用调试工具</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建调试工具管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebugToolsManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> _isEnabled = <span class="keyword">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 切换所有调试工具</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> toggleDebugTools() &#123;</span><br><span class="line">    _isEnabled = !_isEnabled;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = _isEnabled;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">false</span>; <span class="comment">// 避免同时启用</span></span><br><span class="line">      debugPaintLayerBordersEnabled = _isEnabled;</span><br><span class="line">      debugProfileBuildsEnabled = _isEnabled;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 只启用重绘分析</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> enableRepaintAnalysis() &#123;</span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">true</span>;</span><br><span class="line">      debugPaintLayerBordersEnabled = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 只启用布局分析</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> enableLayoutAnalysis() &#123;</span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">true</span>;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugPaintLayerBordersEnabled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-调试工具最佳实践"><a href="#4-调试工具最佳实践" class="headerlink" title="4. 调试工具最佳实践"></a>4. 调试工具最佳实践</h3><h4 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h4><ol>
<li><strong>分阶段使用</strong>：不要同时启用所有调试工具</li>
<li><strong>针对性分析</strong>：根据具体问题选择合适的工具</li>
<li><strong>生产环境禁用</strong>：确保调试工具不会影响发布版本</li>
<li><strong>结合 DevTools</strong>：配合 Flutter DevTools 进行深度分析</li>
</ol>
<h4 id="调试流程建议"><a href="#调试流程建议" class="headerlink" title="调试流程建议"></a>调试流程建议</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推荐的调试流程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebugWorkflow</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 第一步：布局问题诊断</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> step1_layoutDebugging() &#123;</span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">true</span>;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">false</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;步骤1: 启用布局边界显示，检查布局问题&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第二步：性能问题诊断</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> step2_performanceDebugging() &#123;</span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">true</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;步骤2: 启用重绘彩虹，分析性能问题&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 第三步：图层问题诊断</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> step3_layerDebugging() &#123;</span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugPaintLayerBordersEnabled = <span class="keyword">true</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;步骤3: 启用图层边界，检查渲染层次&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 关闭所有调试工具</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> disableAllDebugging() &#123;</span><br><span class="line">    <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugPaintLayerBordersEnabled = <span class="keyword">false</span>;</span><br><span class="line">      debugProfileBuildsEnabled = <span class="keyword">false</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;调试完成: 已关闭所有调试工具&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="开发技巧与最佳实践"><a href="#开发技巧与最佳实践" class="headerlink" title="开发技巧与最佳实践"></a>开发技巧与最佳实践</h2><h3 id="1-Widget-构建优化"><a href="#1-Widget-构建优化" class="headerlink" title="1. Widget 构建优化"></a>1. Widget 构建优化</h3><h4 id="避免在-build-方法中创建-Widget"><a href="#避免在-build-方法中创建-Widget" class="headerlink" title="避免在 build 方法中创建 Widget"></a>避免在 build 方法中创建 Widget</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误做法：每次重建都会创建新的 Widget 实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        _buildHeader(), <span class="comment">// 问题：每次 build 都会重新创建，浪费性能</span></span><br><span class="line">        _buildContent(), <span class="comment">// 同样的问题</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这个方法每次调用都会创建新的 Container</span></span><br><span class="line">  Widget _buildHeader() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Widget _buildContent() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">200</span>,</span><br><span class="line">      color: Colors.green,</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;内容&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确做法：将静态 Widget 提取为类成员，避免重复创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将不变的 Widget 声明为 final 成员变量，只创建一次</span></span><br><span class="line">  <span class="keyword">final</span> Widget header = Container(</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">    child: <span class="keyword">const</span> Text(<span class="string">&#x27;标题&#x27;</span>),</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">final</span> Widget content = Container(</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    color: Colors.green,</span><br><span class="line">    child: <span class="keyword">const</span> Text(<span class="string">&#x27;内容&#x27;</span>),</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        header, <span class="comment">// 直接复用已创建的 Widget 实例</span></span><br><span class="line">        content, <span class="comment">// 避免重复创建，提升性能</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🔥 最佳做法：对于需要参数的 Widget，使用工厂方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BestExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用工厂方法创建可配置的 Widget</span></span><br><span class="line">  <span class="keyword">static</span> Widget _createHeader(<span class="built_in">String</span> title) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">      child: Text(title),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        _createHeader(<span class="string">&#x27;动态标题&#x27;</span>), <span class="comment">// 根据需要创建</span></span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>), <span class="comment">// 使用 const 构造函数</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-const-构造函数"><a href="#使用-const-构造函数" class="headerlink" title="使用 const 构造函数"></a>使用 const 构造函数</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 使用 const 减少重建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> OptimizedWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Text(<span class="string">&#x27;静态文本&#x27;</span>), <span class="comment">// const 构造函数</span></span><br><span class="line">        Icon(Icons.star), <span class="comment">// const 构造函数</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-状态管理优化"><a href="#2-状态管理优化" class="headerlink" title="2. 状态管理优化"></a>2. 状态管理优化</h3><h4 id="精确控制-setState-范围"><a href="#精确控制-setState-范围" class="headerlink" title="精确控制 setState 范围"></a>精确控制 setState 范围</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CounterWidgetState createState() =&gt; _CounterWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CounterWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CounterWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>; <span class="comment">// 会变化的状态</span></span><br><span class="line">  <span class="built_in">String</span> _title = <span class="string">&#x27;计数器&#x27;</span>; <span class="comment">// 不变的状态</span></span><br><span class="line">  <span class="built_in">bool</span> _isLoading = <span class="keyword">false</span>; <span class="comment">// 加载状态</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// ✅ 只更新需要变化的状态，避免不必要的重建</span></span><br><span class="line">      _counter++;</span><br><span class="line">      <span class="comment">// ❌ 避免在这里更新不相关的状态，如 _title</span></span><br><span class="line">      <span class="comment">// _title = &#x27;新标题&#x27;; // 这样会导致整个 Widget 重建</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 模拟异步操作</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isLoading = <span class="keyword">true</span>; <span class="comment">// 只更新加载状态</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟网络请求</span></span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isLoading = <span class="keyword">false</span>; <span class="comment">// 只更新加载状态</span></span><br><span class="line">      _counter += <span class="number">10</span>; <span class="comment">// 同时更新计数器</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CounterWidget build 被调用&#x27;</span>); <span class="comment">// 调试信息：观察重建频率</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 静态内容：_title 不变，所以这个 Text 不会重建</span></span><br><span class="line">        Text(</span><br><span class="line">          _title,</span><br><span class="line">          style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">24</span>, fontWeight: FontWeight.bold),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态内容：只有 _counter 变化时才重建</span></span><br><span class="line">        CounterDisplay(counter: _counter),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加载状态显示</span></span><br><span class="line">        <span class="keyword">if</span> (_isLoading)</span><br><span class="line">          <span class="keyword">const</span> CircularProgressIndicator()</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">            children: [</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                onPressed: _incrementCounter,</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&#x27;增加 1&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                onPressed: _loadData,</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&#x27;加载数据 (+10)&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将变化的部分提取为独立 Widget，实现精确重建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CounterDisplay</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> counter;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> CounterDisplay(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.counter&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;CounterDisplay build 被调用，counter: <span class="subst">$counter</span>&#x27;</span>); <span class="comment">// 调试信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: Colors.blue.shade50,</span><br><span class="line">        borderRadius: BorderRadius.circular(<span class="number">8</span>),</span><br><span class="line">        border: Border.all(color: Colors.blue),</span><br><span class="line">      ),</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&#x27;当前计数: <span class="subst">$counter</span>&#x27;</span>,</span><br><span class="line">        style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">          fontSize: <span class="number">20</span>,</span><br><span class="line">          fontWeight: FontWeight.w600,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🔥 进阶技巧：使用 ValueNotifier 进一步优化性能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedCounterWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _OptimizedCounterWidgetState createState() =&gt; _OptimizedCounterWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_OptimizedCounterWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">OptimizedCounterWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 ValueNotifier 避免整个 Widget 重建</span></span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;<span class="built_in">int</span>&gt; _counterNotifier = ValueNotifier&lt;<span class="built_in">int</span>&gt;(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _title = <span class="string">&#x27;优化版计数器&#x27;</span>; <span class="comment">// 不变的状态</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    <span class="comment">// 只通知监听器，不触发 setState</span></span><br><span class="line">    _counterNotifier.value++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OptimizedCounterWidget build 被调用&#x27;</span>); <span class="comment">// 这个应该很少被调用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Text(</span><br><span class="line">          _title,</span><br><span class="line">          style: <span class="keyword">const</span> TextStyle(fontSize: <span class="number">24</span>, fontWeight: FontWeight.bold),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 ValueListenableBuilder 只重建必要的部分</span></span><br><span class="line">        ValueListenableBuilder&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">          valueListenable: _counterNotifier,</span><br><span class="line">          builder: (context, counter, child) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;ValueListenableBuilder 重建，counter: <span class="subst">$counter</span>&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> CounterDisplay(counter: counter);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>),</span><br><span class="line">        </span><br><span class="line">        ElevatedButton(</span><br><span class="line">          onPressed: _incrementCounter,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&#x27;增加&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _counterNotifier.dispose(); <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="3-列表性能优化"><a href="#3-列表性能优化" class="headerlink" title="3. 列表性能优化"></a>3. 列表性能优化</h3><h4 id="使用-ListView-builder-处理大数据"><a href="#使用-ListView-builder-处理大数据" class="headerlink" title="使用 ListView.builder 处理大数据"></a>使用 ListView.builder 处理大数据</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 高效的列表实现：只渲染可见区域的 item</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EfficientListView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> EfficientListView(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.items&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: items.length, <span class="comment">// 总数据量</span></span><br><span class="line">      <span class="comment">// 关键优化：只构建当前可见的 item，而不是全部</span></span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;构建第 <span class="subst">$index</span> 个 item&#x27;</span>); <span class="comment">// 调试信息：观察构建频率</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ListTile(</span><br><span class="line">          leading: CircleAvatar(</span><br><span class="line">            backgroundColor: Colors.blue,</span><br><span class="line">            child: Text(<span class="string">&#x27;<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          title: Text(items[index]),</span><br><span class="line">          subtitle: Text(<span class="string">&#x27;索引: <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">          trailing: <span class="keyword">const</span> Icon(Icons.arrow_forward_ios),</span><br><span class="line">          <span class="comment">// 使用 key 优化重建性能，避免 Widget 错位</span></span><br><span class="line">          key: ValueKey(<span class="string">&#x27;item_<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;点击了第 <span class="subst">$index</span> 个 item: <span class="subst">$&#123;items[index]&#125;</span>&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 性能优化配置</span></span><br><span class="line">      physics: <span class="keyword">const</span> BouncingScrollPhysics(), <span class="comment">// 使用弹性滚动</span></span><br><span class="line">      cacheExtent: <span class="number">200</span>, <span class="comment">// 缓存区域大小，提前渲染即将可见的内容</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 错误做法：一次性创建所有 Widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InEfficientListView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> InEfficientListView(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.items&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView(</span><br><span class="line">      children: items.map((item) &#123;</span><br><span class="line">        <span class="comment">// 问题：即使有10000个 item，也会一次性全部创建</span></span><br><span class="line">        <span class="keyword">return</span> ListTile(title: Text(item));</span><br><span class="line">      &#125;).toList(), <span class="comment">// 这会创建一个巨大的 Widget 列表</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🔥 进阶优化：自定义 item 高度和分隔符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvancedListView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; items;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> AdvancedListView(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.items&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.separated(</span><br><span class="line">      itemCount: items.length,</span><br><span class="line">      <span class="comment">// 构建列表项</span></span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">          height: <span class="number">80</span>, <span class="comment">// 固定高度有助于性能优化</span></span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">16</span>, vertical: <span class="number">8</span>),</span><br><span class="line">          child: Row(</span><br><span class="line">            children: [</span><br><span class="line">              Container(</span><br><span class="line">                width: <span class="number">50</span>,</span><br><span class="line">                height: <span class="number">50</span>,</span><br><span class="line">                decoration: BoxDecoration(</span><br><span class="line">                  color: Colors.blue.shade100,</span><br><span class="line">                  borderRadius: BorderRadius.circular(<span class="number">25</span>),</span><br><span class="line">                ),</span><br><span class="line">                child: Center(</span><br><span class="line">                  child: Text(</span><br><span class="line">                    <span class="string">&#x27;<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&#x27;</span>,</span><br><span class="line">                    style: <span class="keyword">const</span> TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">const</span> SizedBox(width: <span class="number">16</span>),</span><br><span class="line">              Expanded(</span><br><span class="line">                child: Column(</span><br><span class="line">                  crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                  mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                  children: [</span><br><span class="line">                    Text(</span><br><span class="line">                      items[index],</span><br><span class="line">                      style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                        fontSize: <span class="number">16</span>,</span><br><span class="line">                        fontWeight: FontWeight.w600,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                    <span class="keyword">const</span> SizedBox(height: <span class="number">4</span>),</span><br><span class="line">                    Text(</span><br><span class="line">                      <span class="string">&#x27;创建时间: <span class="subst">$&#123;DateTime.now().toString().substring(<span class="number">0</span>, <span class="number">19</span>)&#125;</span>&#x27;</span>,</span><br><span class="line">                      style: TextStyle(</span><br><span class="line">                        fontSize: <span class="number">12</span>,</span><br><span class="line">                        color: Colors.grey.shade600,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ],</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 分隔符构建器</span></span><br><span class="line">      separatorBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> Divider(</span><br><span class="line">          height: <span class="number">1</span>,</span><br><span class="line">          thickness: <span class="number">1</span>,</span><br><span class="line">          indent: <span class="number">66</span>, <span class="comment">// 与头像对齐</span></span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现懒加载"><a href="#实现懒加载" class="headerlink" title="实现懒加载"></a>实现懒加载</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🔥 完整的懒加载列表实现，包含错误处理和状态管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyLoadingList</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _LazyLoadingListState createState() =&gt; _LazyLoadingListState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LazyLoadingListState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LazyLoadingList</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _items = []; <span class="comment">// 存储列表数据</span></span><br><span class="line">  <span class="built_in">bool</span> _isLoading = <span class="keyword">false</span>; <span class="comment">// 加载状态标识</span></span><br><span class="line">  <span class="built_in">bool</span> _hasError = <span class="keyword">false</span>; <span class="comment">// 错误状态标识</span></span><br><span class="line">  <span class="built_in">bool</span> _hasMoreData = <span class="keyword">true</span>; <span class="comment">// 是否还有更多数据可加载</span></span><br><span class="line">  <span class="built_in">String</span> _errorMessage = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 错误信息存储</span></span><br><span class="line">  <span class="keyword">final</span> ScrollController _scrollController = ScrollController();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分页参数配置</span></span><br><span class="line">  <span class="built_in">int</span> _currentPage = <span class="number">0</span>; <span class="comment">// 当前页码，从0开始</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> _pageSize = <span class="number">20</span>; <span class="comment">// 每页加载的数据量</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _loadInitialData(); <span class="comment">// 加载初始数据</span></span><br><span class="line">    _scrollController.addListener(_onScroll); <span class="comment">// 监听滚动</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 滚动监听器：智能检测是否需要加载更多数据</span></span><br><span class="line">  <span class="keyword">void</span> _onScroll() &#123;</span><br><span class="line">    <span class="comment">// 当滚动接近底部时提前触发加载，提升用户体验</span></span><br><span class="line">    <span class="keyword">if</span> (_scrollController.position.pixels &gt;= </span><br><span class="line">        _scrollController.position.maxScrollExtent - <span class="number">200</span>) &#123; <span class="comment">// 提前200像素开始预加载</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📍 滚动触发懒加载，当前位置: <span class="subst">$&#123;_scrollController.position.pixels&#125;</span>&#x27;</span>);</span><br><span class="line">      _loadMoreData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加载初始数据 - 应用启动时的第一次数据加载</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _loadInitialData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🚀 开始加载初始数据...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isLoading = <span class="keyword">true</span>;</span><br><span class="line">      _hasError = <span class="keyword">false</span>;</span><br><span class="line">      _currentPage = <span class="number">0</span>;</span><br><span class="line">      _errorMessage = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟网络请求延迟</span></span><br><span class="line">      <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 模拟随机网络错误（10%概率）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">DateTime</span>.now().millisecond % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&#x27;网络连接超时，请检查网络设置&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 生成第一页数据</span></span><br><span class="line">      <span class="keyword">final</span> newItems = <span class="built_in">List</span>.generate(</span><br><span class="line">        _pageSize, </span><br><span class="line">        (index) =&gt; <span class="string">&#x27;Item <span class="subst">$&#123;_currentPage * _pageSize + index + <span class="number">1</span>&#125;</span> - 初始数据&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _items.clear(); <span class="comment">// 清空现有数据</span></span><br><span class="line">        _items.addAll(newItems);</span><br><span class="line">        _isLoading = <span class="keyword">false</span>;</span><br><span class="line">        _currentPage++; <span class="comment">// 页码递增</span></span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 初始数据加载成功，共<span class="subst">$&#123;newItems.length&#125;</span>条&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _isLoading = <span class="keyword">false</span>;</span><br><span class="line">        _hasError = <span class="keyword">true</span>;</span><br><span class="line">        _errorMessage = e.toString();</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 初始数据加载失败: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加载更多数据 - 懒加载的核心实现</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _loadMoreData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 防止重复加载和无效请求</span></span><br><span class="line">    <span class="keyword">if</span> (_isLoading || !_hasMoreData || _hasError) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;⚠️ 跳过加载：isLoading=<span class="subst">$_isLoading</span>, hasMoreData=<span class="subst">$_hasMoreData</span>, hasError=<span class="subst">$_hasError</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;📡 开始加载第<span class="subst">$&#123;_currentPage + <span class="number">1</span>&#125;</span>页数据...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _isLoading = <span class="keyword">true</span>;</span><br><span class="line">      _hasError = <span class="keyword">false</span>;</span><br><span class="line">      _errorMessage = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 模拟真实的网络请求延迟</span></span><br><span class="line">      <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">800</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 模拟数据加载完毕的情况（总共100条数据）</span></span><br><span class="line">      <span class="keyword">if</span> (_items.length &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _isLoading = <span class="keyword">false</span>;</span><br><span class="line">          _hasMoreData = <span class="keyword">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;🎉 所有数据加载完成，共<span class="subst">$&#123;_items.length&#125;</span>条&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 模拟随机网络错误（约7%概率）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">DateTime</span>.now().millisecond % <span class="number">15</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&#x27;网络请求超时，请检查网络连接&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 生成新的数据页</span></span><br><span class="line">      <span class="keyword">final</span> newItems = <span class="built_in">List</span>.generate(</span><br><span class="line">        <span class="number">10</span>, <span class="comment">// 后续每次加载10条数据，减少加载时间</span></span><br><span class="line">        (index) =&gt; <span class="string">&#x27;Item <span class="subst">$&#123;_items.length + index + <span class="number">1</span>&#125;</span> - 第<span class="subst">$&#123;_currentPage + <span class="number">1</span>&#125;</span>页&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _items.addAll(newItems);</span><br><span class="line">        _isLoading = <span class="keyword">false</span>;</span><br><span class="line">        _currentPage++;</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 第<span class="subst">$_currentPage</span>页加载完成，新增<span class="subst">$&#123;newItems.length&#125;</span>条，总计<span class="subst">$&#123;_items.length&#125;</span>条&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _isLoading = <span class="keyword">false</span>;</span><br><span class="line">        _hasError = <span class="keyword">true</span>;</span><br><span class="line">        _errorMessage = e.toString();</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 数据加载失败: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重试加载</span></span><br><span class="line">  <span class="keyword">void</span> _retryLoad() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_items.isEmpty) &#123;</span><br><span class="line">      _loadInitialData();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _loadMoreData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 下拉刷新 - 重置所有状态并重新加载</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _onRefresh() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🔄 用户触发下拉刷新&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _hasMoreData = <span class="keyword">true</span>; <span class="comment">// 重置数据状态</span></span><br><span class="line">      _hasError = <span class="keyword">false</span>; <span class="comment">// 清除错误状态</span></span><br><span class="line">      _errorMessage = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> _loadInitialData(); <span class="comment">// 重新加载初始数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 下拉刷新完成&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 如果初始加载失败，显示错误页面</span></span><br><span class="line">    <span class="keyword">if</span> (_items.isEmpty &amp;&amp; _hasError) &#123;</span><br><span class="line">      <span class="keyword">return</span> Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            <span class="keyword">const</span> Icon(</span><br><span class="line">              Icons.error_outline,</span><br><span class="line">              size: <span class="number">64</span>,</span><br><span class="line">              color: Colors.red,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;加载失败&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headlineSmall,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">8</span>),</span><br><span class="line">            Text(</span><br><span class="line">              _errorMessage,</span><br><span class="line">              style: Theme.of(context).textTheme.bodyMedium,</span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">const</span> SizedBox(height: <span class="number">16</span>),</span><br><span class="line">            ElevatedButton(</span><br><span class="line">              onPressed: _retryLoad,</span><br><span class="line">              child: <span class="keyword">const</span> Text(<span class="string">&#x27;重试&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果正在初始加载，显示加载指示器</span></span><br><span class="line">    <span class="keyword">if</span> (_items.isEmpty &amp;&amp; _isLoading) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">const</span> Center(</span><br><span class="line">        child: CircularProgressIndicator(),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主列表界面</span></span><br><span class="line">    <span class="keyword">return</span> RefreshIndicator(</span><br><span class="line">      onRefresh: _onRefresh, <span class="comment">// 下拉刷新</span></span><br><span class="line">      child: ListView.builder(</span><br><span class="line">        controller: _scrollController,</span><br><span class="line">        physics: <span class="keyword">const</span> AlwaysScrollableScrollPhysics(), <span class="comment">// 确保可以下拉刷新</span></span><br><span class="line">        itemCount: _items.length + <span class="number">1</span>, <span class="comment">// +1 用于底部状态显示</span></span><br><span class="line">        itemBuilder: (context, index) &#123;</span><br><span class="line">          <span class="comment">// 列表项</span></span><br><span class="line">          <span class="keyword">if</span> (index &lt; _items.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> ListTile(</span><br><span class="line">              leading: CircleAvatar(</span><br><span class="line">                backgroundColor: Colors.blue,</span><br><span class="line">                child: Text(<span class="string">&#x27;<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">              title: Text(_items[index]),</span><br><span class="line">              subtitle: Text(<span class="string">&#x27;索引: <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">              key: ValueKey(<span class="string">&#x27;lazy_item_<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 底部状态显示</span></span><br><span class="line">          <span class="keyword">return</span> _buildBottomWidget();</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 构建底部状态 Widget</span></span><br><span class="line">  Widget _buildBottomWidget() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_isLoading) &#123;</span><br><span class="line">      <span class="comment">// 正在加载</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">const</span> Padding(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: [</span><br><span class="line">              SizedBox(</span><br><span class="line">                width: <span class="number">20</span>,</span><br><span class="line">                height: <span class="number">20</span>,</span><br><span class="line">                child: CircularProgressIndicator(strokeWidth: <span class="number">2</span>),</span><br><span class="line">              ),</span><br><span class="line">              SizedBox(width: <span class="number">12</span>),</span><br><span class="line">              Text(<span class="string">&#x27;正在加载...&#x27;</span>),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_hasError) &#123;</span><br><span class="line">      <span class="comment">// 加载错误</span></span><br><span class="line">      <span class="keyword">return</span> Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Column(</span><br><span class="line">            children: [</span><br><span class="line">              Text(</span><br><span class="line">                <span class="string">&#x27;加载失败: <span class="subst">$_errorMessage</span>&#x27;</span>,</span><br><span class="line">                style: <span class="keyword">const</span> TextStyle(color: Colors.red),</span><br><span class="line">                textAlign: TextAlign.center,</span><br><span class="line">              ),</span><br><span class="line">              <span class="keyword">const</span> SizedBox(height: <span class="number">8</span>),</span><br><span class="line">              ElevatedButton(</span><br><span class="line">                onPressed: _retryLoad,</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&#x27;重试&#x27;</span>),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!_hasMoreData) &#123;</span><br><span class="line">      <span class="comment">// 没有更多数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">const</span> Padding(</span><br><span class="line">        padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">&#x27;没有更多数据了&#x27;</span>,</span><br><span class="line">            style: TextStyle(color: Colors.grey),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认情况：空白区域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> SizedBox(height: <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _scrollController.dispose(); <span class="comment">// 释放滚动控制器</span></span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🔥 使用 Provider 或 Bloc 的懒加载实现（更高级的状态管理）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvancedLazyLoadingList</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AdvancedLazyLoadingListState createState() =&gt; _AdvancedLazyLoadingListState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AdvancedLazyLoadingListState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AdvancedLazyLoadingList</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ScrollController _scrollController = ScrollController();</span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt; _itemsNotifier = ValueNotifier&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;([]);</span><br><span class="line">  <span class="keyword">final</span> ValueNotifier&lt;<span class="built_in">bool</span>&gt; _isLoadingNotifier = ValueNotifier&lt;<span class="built_in">bool</span>&gt;(<span class="keyword">false</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _loadInitialData();</span><br><span class="line">    _scrollController.addListener(_onScroll);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _onScroll() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_scrollController.position.pixels &gt;= </span><br><span class="line">        _scrollController.position.maxScrollExtent - <span class="number">100</span>) &#123;</span><br><span class="line">      _loadMoreData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _loadInitialData() <span class="keyword">async</span> &#123;</span><br><span class="line">    _isLoadingNotifier.value = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> items = <span class="built_in">List</span>.generate(<span class="number">20</span>, (index) =&gt; <span class="string">&#x27;Advanced Item <span class="subst">$index</span>&#x27;</span>);</span><br><span class="line">    _itemsNotifier.value = items;</span><br><span class="line">    _isLoadingNotifier.value = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _loadMoreData() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (_isLoadingNotifier.value) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    _isLoadingNotifier.value = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">800</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> currentItems = _itemsNotifier.value;</span><br><span class="line">    <span class="keyword">final</span> newItems = <span class="built_in">List</span>.generate(</span><br><span class="line">      <span class="number">10</span>, </span><br><span class="line">      (index) =&gt; <span class="string">&#x27;Advanced Item <span class="subst">$&#123;currentItems.length + index&#125;</span>&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    _itemsNotifier.value = [...currentItems, ...newItems];</span><br><span class="line">    _isLoadingNotifier.value = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ValueListenableBuilder&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;(</span><br><span class="line">      valueListenable: _itemsNotifier,</span><br><span class="line">      builder: (context, items, child) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListView.builder(</span><br><span class="line">          controller: _scrollController,</span><br><span class="line">          itemCount: items.length + <span class="number">1</span>,</span><br><span class="line">          itemBuilder: (context, index) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; items.length) &#123;</span><br><span class="line">              <span class="keyword">return</span> ListTile(</span><br><span class="line">                title: Text(items[index]),</span><br><span class="line">                key: ValueKey(<span class="string">&#x27;advanced_item_<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> ValueListenableBuilder&lt;<span class="built_in">bool</span>&gt;(</span><br><span class="line">              valueListenable: _isLoadingNotifier,</span><br><span class="line">              builder: (context, isLoading, child) &#123;</span><br><span class="line">                <span class="keyword">return</span> isLoading</span><br><span class="line">                    ? <span class="keyword">const</span> Padding(</span><br><span class="line">                        padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">                        child: Center(child: CircularProgressIndicator()),</span><br><span class="line">                      )</span><br><span class="line">                    : <span class="keyword">const</span> SizedBox(height: <span class="number">50</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _scrollController.dispose();</span><br><span class="line">    _itemsNotifier.dispose();</span><br><span class="line">    _isLoadingNotifier.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">## 性能优化策略</span><br><span class="line"></span><br><span class="line">### <span class="number">1.</span> 避免不必要的重建</span><br><span class="line"></span><br><span class="line">#### 使用 RepaintBoundary</span><br><span class="line"></span><br><span class="line">```dart</span><br><span class="line"><span class="comment">// 将不需要频繁重绘的部分包装起来</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        RepaintBoundary(</span><br><span class="line">          <span class="comment">// 静态内容，避免重绘</span></span><br><span class="line">          child: ExpensiveWidget(),</span><br><span class="line">        ),</span><br><span class="line">        DynamicWidget(), <span class="comment">// 动态内容</span></span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-AutomaticKeepAliveClientMixin"><a href="#使用-AutomaticKeepAliveClientMixin" class="headerlink" title="使用 AutomaticKeepAliveClientMixin"></a>使用 AutomaticKeepAliveClientMixin</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保持页面状态，避免重建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeepAliveTab</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _KeepAliveTabState createState() =&gt; _KeepAliveTabState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_KeepAliveTabState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">KeepAliveTab</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>; <span class="comment">// 保持状态</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context); <span class="comment">// 必须调用</span></span><br><span class="line">    <span class="keyword">return</span> ExpensiveWidget();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-图片优化"><a href="#2-图片优化" class="headerlink" title="2. 图片优化"></a>2. 图片优化</h3><h4 id="网络图片缓存优化"><a href="#网络图片缓存优化" class="headerlink" title="网络图片缓存优化"></a>网络图片缓存优化</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 推荐：使用 CachedNetworkImage 进行网络图片缓存</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:cached_network_image/cached_network_image.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedImageWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> imageUrl;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double?</span> width;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double?</span> height;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> OptimizedImageWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.imageUrl,</span><br><span class="line">    <span class="keyword">this</span>.width,</span><br><span class="line">    <span class="keyword">this</span>.height,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> CachedNetworkImage(</span><br><span class="line">      imageUrl: imageUrl,</span><br><span class="line">      width: width,</span><br><span class="line">      height: height,</span><br><span class="line">      fit: BoxFit.cover, <span class="comment">// 指定合适的填充方式</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 占位符 - 加载时显示</span></span><br><span class="line">      placeholder: (context, url) =&gt; Container(</span><br><span class="line">        width: width,</span><br><span class="line">        height: height,</span><br><span class="line">        color: Colors.grey[<span class="number">200</span>],</span><br><span class="line">        child: Center(</span><br><span class="line">          child: CircularProgressIndicator(</span><br><span class="line">            strokeWidth: <span class="number">2</span>,</span><br><span class="line">            valueColor: AlwaysStoppedAnimation&lt;Color&gt;(Colors.blue),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 错误处理 - 加载失败时显示</span></span><br><span class="line">      errorWidget: (context, url, error) =&gt; Container(</span><br><span class="line">        width: width,</span><br><span class="line">        height: height,</span><br><span class="line">        color: Colors.grey[<span class="number">100</span>],</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: [</span><br><span class="line">            Icon(Icons.broken_image, color: Colors.grey[<span class="number">400</span>], size: <span class="number">32</span>),</span><br><span class="line">            SizedBox(height: <span class="number">8</span>),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;图片加载失败&#x27;</span>,</span><br><span class="line">              style: TextStyle(color: Colors.grey[<span class="number">600</span>], fontSize: <span class="number">12</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 缓存配置</span></span><br><span class="line">      cacheManager: DefaultCacheManager(),</span><br><span class="line">      maxWidthDiskCache: <span class="number">1000</span>, <span class="comment">// 限制缓存图片的最大宽度</span></span><br><span class="line">      maxHeightDiskCache: <span class="number">1000</span>, <span class="comment">// 限制缓存图片的最大高度</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 渐显动画</span></span><br><span class="line">      fadeInDuration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">      fadeOutDuration: <span class="built_in">Duration</span>(milliseconds: <span class="number">100</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片预加载策略"><a href="#图片预加载策略" class="headerlink" title="图片预加载策略"></a>图片预加载策略</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagePreloader</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 预加载关键图片，提升用户体验</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; preloadCriticalImages(BuildContext context) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> imagesToPreload = [</span><br><span class="line">      <span class="string">&#x27;assets/images/logo.png&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;assets/images/background.jpg&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;assets/images/placeholder.png&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🖼️ 开始预加载<span class="subst">$&#123;imagesToPreload.length&#125;</span>张关键图片...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 并行预加载多张图片</span></span><br><span class="line">      <span class="keyword">await</span> Future.wait(</span><br><span class="line">        imagesToPreload.map((imagePath) =&gt; </span><br><span class="line">          precacheImage(AssetImage(imagePath), context)</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 关键图片预加载完成&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 图片预加载失败: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 预加载网络图片</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; preloadNetworkImage(</span><br><span class="line">    BuildContext context, </span><br><span class="line">    <span class="built_in">String</span> imageUrl</span><br><span class="line">  ) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> precacheImage(NetworkImage(imageUrl), context);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 网络图片预加载完成: <span class="subst">$imageUrl</span>&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 网络图片预加载失败: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片尺寸优化"><a href="#图片尺寸优化" class="headerlink" title="图片尺寸优化"></a>图片尺寸优化</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：加载过大的图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BadImageExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      child: Image.asset(</span><br><span class="line">        <span class="string">&#x27;assets/images/large_image.jpg&#x27;</span>, <span class="comment">// 4K分辨率图片</span></span><br><span class="line">        fit: BoxFit.cover,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 推荐：使用合适尺寸的图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodImageExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      child: Image.asset(</span><br><span class="line">        <span class="string">&#x27;assets/images/thumbnail_100x100.jpg&#x27;</span>, <span class="comment">// 合适尺寸的缩略图</span></span><br><span class="line">        fit: BoxFit.cover,</span><br><span class="line">        <span class="comment">// 指定缓存尺寸，避免内存浪费</span></span><br><span class="line">        cacheWidth: <span class="number">100</span>,</span><br><span class="line">        cacheHeight: <span class="number">100</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="响应式图片加载"><a href="#响应式图片加载" class="headerlink" title="响应式图片加载"></a>响应式图片加载</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponsiveImageWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> imageUrl;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> ResponsiveImageWidget(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.imageUrl&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(</span><br><span class="line">      builder: (context, constraints) &#123;</span><br><span class="line">        <span class="comment">// 根据容器大小选择合适的图片尺寸</span></span><br><span class="line">        <span class="keyword">final</span> width = constraints.maxWidth;</span><br><span class="line">        <span class="keyword">final</span> height = constraints.maxHeight;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Image.network(</span><br><span class="line">          imageUrl,</span><br><span class="line">          width: width,</span><br><span class="line">          height: height,</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">          <span class="comment">// 根据实际显示尺寸设置缓存大小</span></span><br><span class="line">          cacheWidth: width.toInt(),</span><br><span class="line">          cacheHeight: height.toInt(),</span><br><span class="line">          loadingBuilder: (context, child, loadingProgress) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loadingProgress == <span class="keyword">null</span>) <span class="keyword">return</span> child;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              width: width,</span><br><span class="line">              height: height,</span><br><span class="line">              color: Colors.grey[<span class="number">200</span>],</span><br><span class="line">              child: Center(</span><br><span class="line">                child: CircularProgressIndicator(</span><br><span class="line">                  value: loadingProgress.expectedTotalBytes != <span class="keyword">null</span></span><br><span class="line">                      ? loadingProgress.cumulativeBytesLoaded /</span><br><span class="line">                          loadingProgress.expectedTotalBytes!</span><br><span class="line">                      : <span class="keyword">null</span>,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-动画优化"><a href="#3-动画优化" class="headerlink" title="3. 动画优化"></a>3. 动画优化</h3><h4 id="使用-AnimatedBuilder-优化动画性能"><a href="#使用-AnimatedBuilder-优化动画性能" class="headerlink" title="使用 AnimatedBuilder 优化动画性能"></a>使用 AnimatedBuilder 优化动画性能</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 推荐：使用 AnimatedBuilder 避免不必要的重建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedAnimation</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _OptimizedAnimationState createState() =&gt; _OptimizedAnimationState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_OptimizedAnimationState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">OptimizedAnimation</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _controller;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _scaleAnimation;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;<span class="built_in">double</span>&gt; _rotationAnimation;</span><br><span class="line">  <span class="keyword">late</span> Animation&lt;Color?&gt; _colorAnimation;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    </span><br><span class="line">    _controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建多个动画，复用同一个控制器</span></span><br><span class="line">    _scaleAnimation = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">0.5</span>,</span><br><span class="line">      end: <span class="number">1.5</span>,</span><br><span class="line">    ).animate(CurvedAnimation(</span><br><span class="line">      parent: _controller,</span><br><span class="line">      curve: Curves.elasticOut, <span class="comment">// 使用合适的缓动曲线</span></span><br><span class="line">    ));</span><br><span class="line">    </span><br><span class="line">    _rotationAnimation = Tween&lt;<span class="built_in">double</span>&gt;(</span><br><span class="line">      begin: <span class="number">0</span>,</span><br><span class="line">      end: <span class="number">2</span> * <span class="number">3.14159</span>, <span class="comment">// 360度旋转</span></span><br><span class="line">    ).animate(CurvedAnimation(</span><br><span class="line">      parent: _controller,</span><br><span class="line">      curve: Curves.easeInOut,</span><br><span class="line">    ));</span><br><span class="line">    </span><br><span class="line">    _colorAnimation = ColorTween(</span><br><span class="line">      begin: Colors.blue,</span><br><span class="line">      end: Colors.red,</span><br><span class="line">    ).animate(_controller);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 静态标题，不参与动画</span></span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;动画演示&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">24</span>, fontWeight: FontWeight.bold),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">32</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 AnimatedBuilder 优化性能</span></span><br><span class="line">        AnimatedBuilder(</span><br><span class="line">          animation: _controller,</span><br><span class="line">          <span class="comment">// 静态部分作为 child 传入，避免重建</span></span><br><span class="line">          child: <span class="keyword">const</span> ExpensiveStaticWidget(),</span><br><span class="line">          builder: (context, child) &#123;</span><br><span class="line">            <span class="keyword">return</span> Transform.scale(</span><br><span class="line">              scale: _scaleAnimation.value,</span><br><span class="line">              child: Transform.rotate(</span><br><span class="line">                angle: _rotationAnimation.value,</span><br><span class="line">                child: Container(</span><br><span class="line">                  width: <span class="number">100</span>,</span><br><span class="line">                  height: <span class="number">100</span>,</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    color: _colorAnimation.value,</span><br><span class="line">                    borderRadius: BorderRadius.circular(<span class="number">12</span>),</span><br><span class="line">                    boxShadow: [</span><br><span class="line">                      BoxShadow(</span><br><span class="line">                        color: Colors.black26,</span><br><span class="line">                        blurRadius: <span class="number">8</span>,</span><br><span class="line">                        offset: Offset(<span class="number">0</span>, <span class="number">4</span>),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  child: child, <span class="comment">// 复用静态部分，避免重建</span></span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> SizedBox(height: <span class="number">32</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 控制按钮</span></span><br><span class="line">        Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">          children: [</span><br><span class="line">            ElevatedButton(</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                <span class="keyword">if</span> (_controller.status == AnimationStatus.completed) &#123;</span><br><span class="line">                  _controller.reverse();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  _controller.forward();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Text(_controller.status == AnimationStatus.completed </span><br><span class="line">                  ? <span class="string">&#x27;反向播放&#x27;</span> : <span class="string">&#x27;开始动画&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">            ElevatedButton(</span><br><span class="line">              onPressed: () =&gt; _controller.reset(),</span><br><span class="line">              child: <span class="keyword">const</span> Text(<span class="string">&#x27;重置&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose(); <span class="comment">// 释放动画控制器</span></span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态组件，不会因为动画而重建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpensiveStaticWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ExpensiveStaticWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ExpensiveStaticWidget 被构建&#x27;</span>); <span class="comment">// 调试信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Icon(</span><br><span class="line">      Icons.star,</span><br><span class="line">      size: <span class="number">40</span>,</span><br><span class="line">      color: Colors.white,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="高性能列表动画"><a href="#高性能列表动画" class="headerlink" title="高性能列表动画"></a>高性能列表动画</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 使用 AnimatedList 实现高性能列表动画</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedListExample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AnimatedListExampleState createState() =&gt; _AnimatedListExampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedListExampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedListExample</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;AnimatedListState&gt; _listKey = GlobalKey&lt;AnimatedListState&gt;();</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _items = [<span class="string">&#x27;Item 1&#x27;</span>, <span class="string">&#x27;Item 2&#x27;</span>, <span class="string">&#x27;Item 3&#x27;</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _addItem() &#123;</span><br><span class="line">    <span class="keyword">final</span> index = _items.length;</span><br><span class="line">    _items.insert(index, <span class="string">&#x27;Item <span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&#x27;</span>);</span><br><span class="line">    _listKey.currentState?.insertItem(index, duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _removeItem(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">final</span> removedItem = _items.removeAt(index);</span><br><span class="line">    _listKey.currentState?.removeItem(</span><br><span class="line">      index,</span><br><span class="line">      (context, animation) =&gt; _buildItem(removedItem, animation),</span><br><span class="line">      duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Widget _buildItem(<span class="built_in">String</span> item, Animation&lt;<span class="built_in">double</span>&gt; animation) &#123;</span><br><span class="line">    <span class="keyword">return</span> SlideTransition(</span><br><span class="line">      position: animation.drive(</span><br><span class="line">        Tween&lt;Offset&gt;(</span><br><span class="line">          begin: <span class="keyword">const</span> Offset(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">          end: Offset.zero,</span><br><span class="line">        ).chain(CurveTween(curve: Curves.easeOut)),</span><br><span class="line">      ),</span><br><span class="line">      child: Card(</span><br><span class="line">        margin: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">16</span>, vertical: <span class="number">4</span>),</span><br><span class="line">        child: ListTile(</span><br><span class="line">          title: Text(item),</span><br><span class="line">          trailing: IconButton(</span><br><span class="line">            icon: <span class="keyword">const</span> Icon(Icons.delete),</span><br><span class="line">            onPressed: () =&gt; _removeItem(_items.indexOf(item)),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        ElevatedButton(</span><br><span class="line">          onPressed: _addItem,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&#x27;添加项目&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        Expanded(</span><br><span class="line">          child: AnimatedList(</span><br><span class="line">            key: _listKey,</span><br><span class="line">            initialItemCount: _items.length,</span><br><span class="line">            itemBuilder: (context, index, animation) &#123;</span><br><span class="line">              <span class="keyword">return</span> _buildItem(_items[index], animation);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="页面转场动画优化"><a href="#页面转场动画优化" class="headerlink" title="页面转场动画优化"></a>页面转场动画优化</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ✅ 自定义页面转场动画，提升用户体验</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPageRoute</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">PageRouteBuilder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  <span class="keyword">final</span> AxisDirection direction;</span><br><span class="line">  </span><br><span class="line">  CustomPageRoute(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">this</span>.direction = AxisDirection.right,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(</span><br><span class="line">    transitionDuration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">    reverseTransitionDuration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">    pageBuilder: (context, animation, secondaryAnimation) =&gt; child,</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget buildTransitions(</span><br><span class="line">    BuildContext context,</span><br><span class="line">    Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">    Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation,</span><br><span class="line">    Widget child,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> SlideTransition(</span><br><span class="line">      position: animation.drive(</span><br><span class="line">        Tween&lt;Offset&gt;(</span><br><span class="line">          begin: _getBeginOffset(),</span><br><span class="line">          end: Offset.zero,</span><br><span class="line">        ).chain(CurveTween(curve: Curves.easeInOut)),</span><br><span class="line">      ),</span><br><span class="line">      child: child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Offset _getBeginOffset() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">      <span class="keyword">case</span> AxisDirection.up:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> Offset(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">case</span> AxisDirection.down:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> Offset(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">case</span> AxisDirection.left:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> Offset(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">case</span> AxisDirection.right:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> Offset(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavigationExample</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        Navigator.of(context).push(</span><br><span class="line">          CustomPageRoute(</span><br><span class="line">            child: <span class="keyword">const</span> NextPage(),</span><br><span class="line">            direction: AxisDirection.left,</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;自定义转场&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动画性能监控"><a href="#动画性能监控" class="headerlink" title="动画性能监控"></a>动画性能监控</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🔥 动画性能监控工具</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationPerformanceMonitor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> monitorAnimation(AnimationController controller, <span class="built_in">String</span> name) &#123;</span><br><span class="line">    controller.addListener(() &#123;</span><br><span class="line">      <span class="comment">// 监控动画帧率</span></span><br><span class="line">      <span class="keyword">final</span> fps = <span class="number">1000</span> / (<span class="built_in">DateTime</span>.now().millisecondsSinceEpoch % <span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">if</span> (fps &lt; <span class="number">50</span>) &#123; <span class="comment">// 低于50fps时警告</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;⚠️ 动画性能警告: <span class="subst">$name</span> 当前帧率: <span class="subst">$&#123;fps.toStringAsFixed(<span class="number">1</span>)&#125;</span> FPS&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    controller.addStatusListener((status) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📊 动画状态变化: <span class="subst">$name</span> -&gt; <span class="subst">$status</span>&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 批量监控多个动画控制器</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> monitorMultipleAnimations(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, AnimationController&gt; controllers) &#123;</span><br><span class="line">    controllers.forEach((name, controller) &#123;</span><br><span class="line">      monitorAnimation(controller, name);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目优化建议"><a href="#项目优化建议" class="headerlink" title="项目优化建议"></a>项目优化建议</h2><h3 id="1-代码结构优化"><a href="#1-代码结构优化" class="headerlink" title="1. 代码结构优化"></a>1. 代码结构优化</h3><h4 id="按功能模块组织代码"><a href="#按功能模块组织代码" class="headerlink" title="按功能模块组织代码"></a>按功能模块组织代码</h4><pre><code>lib/
├── core/                 # 核心功能
│   ├── constants/       # 常量定义
│   ├── utils/          # 工具类
│   └── services/       # 服务类
├── features/           # 功能模块
│   ├── auth/          # 认证模块
│   │   ├── data/      # 数据层
│   │   ├── domain/    # 业务逻辑层
│   │   └── presentation/ # 表现层
│   └── home/          # 首页模块
├── shared/            # 共享组件
│   ├── widgets/       # 通用 Widget
│   └── themes/        # 主题配置
└── main.dart
</code></pre>
<h4 id="使用依赖注入"><a href="#使用依赖注入" class="headerlink" title="使用依赖注入"></a>使用依赖注入</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🏗️ 使用 get_it 进行依赖注入管理</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get_it/get_it.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务定位器 - 全局依赖管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceLocator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> GetIt _getIt = GetIt.instance;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化所有依赖</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; setup() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🚀 开始初始化依赖注入...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册核心服务（单例模式）</span></span><br><span class="line">    _getIt.registerLazySingleton&lt;ApiService&gt;(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📡 创建 ApiService 实例&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> ApiService();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    _getIt.registerLazySingleton&lt;DatabaseService&gt;(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;💾 创建 DatabaseService 实例&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> DatabaseService();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    _getIt.registerLazySingleton&lt;CacheService&gt;(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🗄️ 创建 CacheService 实例&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> CacheService();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册 Repository 层（依赖注入）</span></span><br><span class="line">    _getIt.registerLazySingleton&lt;UserRepository&gt;(</span><br><span class="line">      () =&gt; UserRepositoryImpl(</span><br><span class="line">        apiService: _getIt&lt;ApiService&gt;(),</span><br><span class="line">        cacheService: _getIt&lt;CacheService&gt;(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    _getIt.registerLazySingleton&lt;ProductRepository&gt;(</span><br><span class="line">      () =&gt; ProductRepositoryImpl(</span><br><span class="line">        apiService: _getIt&lt;ApiService&gt;(),</span><br><span class="line">        databaseService: _getIt&lt;DatabaseService&gt;(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册业务逻辑层（Use Cases）</span></span><br><span class="line">    _getIt.registerFactory&lt;LoginUseCase&gt;(</span><br><span class="line">      () =&gt; LoginUseCase(_getIt&lt;UserRepository&gt;()),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    _getIt.registerFactory&lt;GetProductsUseCase&gt;(</span><br><span class="line">      () =&gt; GetProductsUseCase(_getIt&lt;ProductRepository&gt;()),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注册状态管理（Provider/BLoC）</span></span><br><span class="line">    _getIt.registerFactory&lt;AuthProvider&gt;(</span><br><span class="line">      () =&gt; AuthProvider(_getIt&lt;LoginUseCase&gt;()),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 依赖注入初始化完成&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取依赖实例</span></span><br><span class="line">  <span class="keyword">static</span> T <span class="keyword">get</span>&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _getIt.<span class="keyword">get</span>&lt;T&gt;();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 获取依赖失败: <span class="subst">$T</span> - <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">rethrow</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 检查依赖是否已注册</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> isRegistered&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;() &#123;</span><br><span class="line">    <span class="keyword">return</span> _getIt.isRegistered&lt;T&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重置所有依赖（主要用于测试）</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; reset() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> _getIt.reset();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🔄 依赖注入已重置&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例 - 在 Widget 中获取依赖</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 通过依赖注入获取服务</span></span><br><span class="line">    <span class="keyword">final</span> userRepository = ServiceLocator.<span class="keyword">get</span>&lt;UserRepository&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> FutureBuilder&lt;User&gt;(</span><br><span class="line">      future: userRepository.getCurrentUser(),</span><br><span class="line">      builder: (context, snapshot) &#123;</span><br><span class="line">        <span class="keyword">if</span> (snapshot.hasData) &#123;</span><br><span class="line">          <span class="keyword">return</span> Text(<span class="string">&#x27;用户: <span class="subst">$&#123;snapshot.data!.name&#125;</span>&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> CircularProgressIndicator();</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用启动时初始化</span></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化依赖注入</span></span><br><span class="line">  <span class="keyword">await</span> ServiceLocator.setup();</span><br><span class="line">  </span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Clean-Architecture-实现"><a href="#Clean-Architecture-实现" class="headerlink" title="Clean Architecture 实现"></a>Clean Architecture 实现</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🏛️ Clean Architecture 分层实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Domain Layer - 业务实体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> email;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">DateTime</span> createdAt;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> User(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.email,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.createdAt,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Domain Layer - Repository 接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">  Future&lt;User&gt; getUserById(<span class="built_in">String</span> id);</span><br><span class="line">  Future&lt;<span class="built_in">List</span>&lt;User&gt;&gt; getAllUsers();</span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; saveUser(User user);</span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; deleteUser(<span class="built_in">String</span> id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Domain Layer - Use Case</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetUserUseCase</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> UserRepository _repository;</span><br><span class="line">  </span><br><span class="line">  GetUserUseCase(<span class="keyword">this</span>._repository);</span><br><span class="line">  </span><br><span class="line">  Future&lt;User&gt; execute(<span class="built_in">String</span> userId) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🔍 执行获取用户用例: <span class="subst">$userId</span>&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> user = <span class="keyword">await</span> _repository.getUserById(userId);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 用户获取成功: <span class="subst">$&#123;user.name&#125;</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 用户获取失败: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">rethrow</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data Layer - Repository 实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ApiService _apiService;</span><br><span class="line">  <span class="keyword">final</span> CacheService _cacheService;</span><br><span class="line">  </span><br><span class="line">  UserRepositoryImpl(&#123;</span><br><span class="line">    <span class="keyword">required</span> ApiService apiService,</span><br><span class="line">    <span class="keyword">required</span> CacheService cacheService,</span><br><span class="line">  &#125;) : _apiService = apiService,</span><br><span class="line">       _cacheService = cacheService;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;User&gt; getUserById(<span class="built_in">String</span> id) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 先检查缓存</span></span><br><span class="line">    <span class="keyword">final</span> cachedUser = <span class="keyword">await</span> _cacheService.getUser(id);</span><br><span class="line">    <span class="keyword">if</span> (cachedUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📦 从缓存获取用户: <span class="subst">$id</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> cachedUser;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从网络获取</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🌐 从网络获取用户: <span class="subst">$id</span>&#x27;</span>);</span><br><span class="line">    <span class="keyword">final</span> userData = <span class="keyword">await</span> _apiService.getUser(id);</span><br><span class="line">    <span class="keyword">final</span> user = User(</span><br><span class="line">      id: userData[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">      name: userData[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">      email: userData[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">      createdAt: <span class="built_in">DateTime</span>.parse(userData[<span class="string">&#x27;created_at&#x27;</span>]),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存结果</span></span><br><span class="line">    <span class="keyword">await</span> _cacheService.saveUser(user);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="built_in">List</span>&lt;User&gt;&gt; getAllUsers() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 实现获取所有用户的逻辑</span></span><br><span class="line">    <span class="keyword">final</span> usersData = <span class="keyword">await</span> _apiService.getAllUsers();</span><br><span class="line">    <span class="keyword">return</span> usersData.map&lt;User&gt;((data) =&gt; User(</span><br><span class="line">      id: data[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">      name: data[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">      email: data[<span class="string">&#x27;email&#x27;</span>],</span><br><span class="line">      createdAt: <span class="built_in">DateTime</span>.parse(data[<span class="string">&#x27;created_at&#x27;</span>]),</span><br><span class="line">    )).toList();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; saveUser(User user) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> _apiService.saveUser(&#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: user.id,</span><br><span class="line">      <span class="string">&#x27;name&#x27;</span>: user.name,</span><br><span class="line">      <span class="string">&#x27;email&#x27;</span>: user.email,</span><br><span class="line">      <span class="string">&#x27;created_at&#x27;</span>: user.createdAt.toIso8601String(),</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新缓存</span></span><br><span class="line">    <span class="keyword">await</span> _cacheService.saveUser(user);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; deleteUser(<span class="built_in">String</span> id) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> _apiService.deleteUser(id);</span><br><span class="line">    <span class="keyword">await</span> _cacheService.removeUser(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Presentation Layer - Provider</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProvider</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GetUserUseCase _getUserUseCase;</span><br><span class="line">  </span><br><span class="line">  User? _currentUser;</span><br><span class="line">  <span class="built_in">bool</span> _isLoading = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">String?</span> _error;</span><br><span class="line">  </span><br><span class="line">  UserProvider(<span class="keyword">this</span>._getUserUseCase);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Getters</span></span><br><span class="line">  User? <span class="keyword">get</span> currentUser =&gt; _currentUser;</span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isLoading =&gt; _isLoading;</span><br><span class="line">  <span class="built_in">String?</span> <span class="keyword">get</span> error =&gt; _error;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加载用户</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; loadUser(<span class="built_in">String</span> userId) <span class="keyword">async</span> &#123;</span><br><span class="line">    _setLoading(<span class="keyword">true</span>);</span><br><span class="line">    _setError(<span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> user = <span class="keyword">await</span> _getUserUseCase.execute(userId);</span><br><span class="line">      _currentUser = user;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      _setError(e.toString());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _setLoading(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _setLoading(<span class="built_in">bool</span> loading) &#123;</span><br><span class="line">    _isLoading = loading;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _setError(<span class="built_in">String?</span> error) &#123;</span><br><span class="line">    _error = error;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-内存管理"><a href="#2-内存管理" class="headerlink" title="2. 内存管理"></a>2. 内存管理</h3><h4 id="正确处理资源释放"><a href="#正确处理资源释放" class="headerlink" title="正确处理资源释放"></a>正确处理资源释放</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🧹 完整的资源管理示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResourceManagementWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ResourceManagementWidgetState createState() =&gt; </span><br><span class="line">      _ResourceManagementWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ResourceManagementWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ResourceManagementWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 需要手动释放的资源</span></span><br><span class="line">  <span class="keyword">late</span> StreamSubscription _dataSubscription;</span><br><span class="line">  <span class="keyword">late</span> StreamSubscription _connectivitySubscription;</span><br><span class="line">  <span class="keyword">late</span> Timer _periodicTimer;</span><br><span class="line">  <span class="keyword">late</span> AnimationController _animationController;</span><br><span class="line">  <span class="keyword">final</span> TextEditingController _textController = TextEditingController();</span><br><span class="line">  <span class="keyword">final</span> ScrollController _scrollController = ScrollController();</span><br><span class="line">  <span class="keyword">final</span> FocusNode _focusNode = FocusNode();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 流控制器</span></span><br><span class="line">  <span class="keyword">final</span> StreamController&lt;<span class="built_in">String</span>&gt; _messageController = StreamController&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _initializeResources();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _initializeResources() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🚀 初始化资源...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化动画控制器</span></span><br><span class="line">    _animationController = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 订阅数据流</span></span><br><span class="line">    _dataSubscription = _createDataStream().listen(</span><br><span class="line">      (data) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;📊 接收到数据: <span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mounted) &#123; <span class="comment">// 检查 Widget 是否仍然挂载</span></span><br><span class="line">          setState(() &#123;</span><br><span class="line">            <span class="comment">// 更新UI</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      onError: (error) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;❌ 数据流错误: <span class="subst">$error</span>&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      onDone: () &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;✅ 数据流完成&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听网络连接状态</span></span><br><span class="line">    _connectivitySubscription = Connectivity().onConnectivityChanged.listen(</span><br><span class="line">      (ConnectivityResult result) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;🌐 网络状态变化: <span class="subst">$result</span>&#x27;</span>);</span><br><span class="line">        _handleConnectivityChange(result);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建周期性定时器</span></span><br><span class="line">    _periodicTimer = Timer.periodic(</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">      (timer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mounted) &#123;</span><br><span class="line">          _performPeriodicTask();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          timer.cancel(); <span class="comment">// 如果Widget已销毁，取消定时器</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听滚动事件</span></span><br><span class="line">    _scrollController.addListener(_onScroll);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听焦点变化</span></span><br><span class="line">    _focusNode.addListener(_onFocusChange);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 资源初始化完成&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建数据流</span></span><br><span class="line">  Stream&lt;<span class="built_in">String</span>&gt; _createDataStream() &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.periodic(</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>),</span><br><span class="line">      (count) =&gt; <span class="string">&#x27;Data <span class="subst">$count</span>&#x27;</span>,</span><br><span class="line">    ).take(<span class="number">10</span>); <span class="comment">// 限制流的数量，避免无限流</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _handleConnectivityChange(ConnectivityResult result) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">      <span class="keyword">case</span> ConnectivityResult.wifi:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;📶 已连接到WiFi&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ConnectivityResult.mobile:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;📱 已连接到移动网络&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ConnectivityResult.none:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;🚫 网络连接断开&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;❓ 未知网络状态&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _performPeriodicTask() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;⏰ 执行周期性任务: <span class="subst">$&#123;DateTime.now()&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="comment">// 执行定期任务，如数据同步、状态检查等</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _onScroll() &#123;</span><br><span class="line">    <span class="comment">// 滚动监听逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (_scrollController.position.pixels &gt; <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="comment">// 滚动超过100像素时的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _onFocusChange() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_focusNode.hasFocus) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🎯 输入框获得焦点&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🎯 输入框失去焦点&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🧹 开始释放资源...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放订阅（按照创建的逆序释放）</span></span><br><span class="line">    _dataSubscription.cancel();</span><br><span class="line">    _connectivitySubscription.cancel();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放定时器</span></span><br><span class="line">    _periodicTimer.cancel();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放动画控制器</span></span><br><span class="line">    _animationController.dispose();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放控制器</span></span><br><span class="line">    _textController.dispose();</span><br><span class="line">    _scrollController.dispose();</span><br><span class="line">    _focusNode.dispose();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭流控制器</span></span><br><span class="line">    _messageController.close();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 资源释放完成&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Column(</span><br><span class="line">        children: [</span><br><span class="line">          <span class="comment">// 输入框</span></span><br><span class="line">          TextField(</span><br><span class="line">            controller: _textController,</span><br><span class="line">            focusNode: _focusNode,</span><br><span class="line">            decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">              hintText: <span class="string">&#x27;请输入内容&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 可滚动列表</span></span><br><span class="line">          Expanded(</span><br><span class="line">            child: ListView.builder(</span><br><span class="line">              controller: _scrollController,</span><br><span class="line">              itemCount: <span class="number">100</span>,</span><br><span class="line">              itemBuilder: (context, index) &#123;</span><br><span class="line">                <span class="keyword">return</span> ListTile(</span><br><span class="line">                  title: Text(<span class="string">&#x27;Item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 动画按钮</span></span><br><span class="line">          AnimatedBuilder(</span><br><span class="line">            animation: _animationController,</span><br><span class="line">            builder: (context, child) &#123;</span><br><span class="line">              <span class="keyword">return</span> Transform.scale(</span><br><span class="line">                scale: <span class="number">1.0</span> + _animationController.value * <span class="number">0.1</span>,</span><br><span class="line">                child: ElevatedButton(</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_animationController.isCompleted) &#123;</span><br><span class="line">                      _animationController.reverse();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      _animationController.forward();</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  child: <span class="keyword">const</span> Text(<span class="string">&#x27;动画按钮&#x27;</span>),</span><br><span class="line">                ),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="内存泄漏检测和预防"><a href="#内存泄漏检测和预防" class="headerlink" title="内存泄漏检测和预防"></a>内存泄漏检测和预防</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🔍 内存泄漏检测工具</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryLeakDetector</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; _widgetCounts = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册Widget创建</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> registerWidget(<span class="built_in">String</span> widgetName) &#123;</span><br><span class="line">    _widgetCounts[widgetName] = (_widgetCounts[widgetName] ?? <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;📈 Widget创建: <span class="subst">$widgetName</span> (总数: <span class="subst">$&#123;_widgetCounts[widgetName]&#125;</span>)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注册Widget销毁</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> unregisterWidget(<span class="built_in">String</span> widgetName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_widgetCounts.containsKey(widgetName)) &#123;</span><br><span class="line">      _widgetCounts[widgetName] = _widgetCounts[widgetName]! - <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📉 Widget销毁: <span class="subst">$widgetName</span> (剩余: <span class="subst">$&#123;_widgetCounts[widgetName]&#125;</span>)&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (_widgetCounts[widgetName]! &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        _widgetCounts.remove(widgetName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 打印内存使用报告</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> printMemoryReport() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n📊 内存使用报告:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (_widgetCounts.isEmpty) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 没有检测到内存泄漏&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _widgetCounts.forEach((widget, count) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;⚠️ <span class="subst">$widget</span>: <span class="subst">$count</span> 个实例未释放&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用内存检测的Widget基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackedStatefulWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TrackedStatefulWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  TrackedState createState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackedState</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">TrackedStatefulWidget</span>&gt; <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    MemoryLeakDetector.registerWidget(runtimeType.toString());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    MemoryLeakDetector.unregisterWidget(runtimeType.toString());</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTrackedWidget</span> <span class="keyword">extends</span> <span class="title">TrackedStatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyTrackedWidgetState createState() =&gt; _MyTrackedWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyTrackedWidgetState</span> <span class="keyword">extends</span> <span class="title">TrackedState</span>&lt;<span class="title">MyTrackedWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: Text(<span class="string">&#x27;被跟踪的Widget&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="大数据集合优化"><a href="#大数据集合优化" class="headerlink" title="大数据集合优化"></a>大数据集合优化</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🗂️ 大数据集合的内存优化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedDataManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用弱引用缓存，避免内存泄漏</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, WeakReference&lt;<span class="built_in">dynamic</span>&gt;&gt; _cache = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 分页数据管理</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">int</span>, <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;&gt; _pageCache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> _pageSize = <span class="number">50</span>;</span><br><span class="line">  <span class="built_in">int</span> _maxCachedPages = <span class="number">10</span>; <span class="comment">// 最多缓存10页数据</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取分页数据</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; getPageData(<span class="built_in">int</span> page) &#123;</span><br><span class="line">    <span class="comment">// 检查缓存</span></span><br><span class="line">    <span class="keyword">if</span> (_pageCache.containsKey(page)) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📦 从缓存获取第<span class="subst">$&#123;page&#125;</span>页数据&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> _pageCache[page]!;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟加载数据</span></span><br><span class="line">    <span class="keyword">final</span> data = _loadPageData(page);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓存数据，但限制缓存大小</span></span><br><span class="line">    _cachePageData(page, data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; _loadPageData(<span class="built_in">int</span> page) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🌐 加载第<span class="subst">$&#123;page&#125;</span>页数据&#x27;</span>);</span><br><span class="line">    <span class="comment">// 模拟数据加载</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">List</span>.generate(_pageSize, (index) =&gt; &#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: page * _pageSize + index,</span><br><span class="line">      <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Item <span class="subst">$&#123;page * _pageSize + index&#125;</span>&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;Some data for item <span class="subst">$&#123;page * _pageSize + index&#125;</span>&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> _cachePageData(<span class="built_in">int</span> page, <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; data) &#123;</span><br><span class="line">    <span class="comment">// 如果缓存已满，移除最旧的页面</span></span><br><span class="line">    <span class="keyword">if</span> (_pageCache.length &gt;= _maxCachedPages) &#123;</span><br><span class="line">      <span class="keyword">final</span> oldestPage = _pageCache.keys.first;</span><br><span class="line">      _pageCache.remove(oldestPage);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🗑️ 移除缓存页面: <span class="subst">$oldestPage</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _pageCache[page] = data;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;💾 缓存第<span class="subst">$&#123;page&#125;</span>页数据&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清理缓存</span></span><br><span class="line">  <span class="keyword">void</span> clearCache() &#123;</span><br><span class="line">    _pageCache.clear();</span><br><span class="line">    _cache.clear();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🧹 缓存已清理&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取缓存统计信息</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; getCacheStats() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">&#x27;cached_pages&#x27;</span>: _pageCache.length,</span><br><span class="line">      <span class="string">&#x27;cache_size_mb&#x27;</span>: _estimateCacheSize(),</span><br><span class="line">      <span class="string">&#x27;max_pages&#x27;</span>: _maxCachedPages,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">double</span> _estimateCacheSize() &#123;</span><br><span class="line">    <span class="comment">// 简单估算缓存大小（实际应用中可以更精确）</span></span><br><span class="line">    <span class="built_in">int</span> totalItems = _pageCache.values.fold(<span class="number">0</span>, (sum, page) =&gt; sum + page.length);</span><br><span class="line">    <span class="keyword">return</span> totalItems * <span class="number">0.001</span>; <span class="comment">// 假设每个项目约1KB</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-网络请求优化"><a href="#3-网络请求优化" class="headerlink" title="3. 网络请求优化"></a>3. 网络请求优化</h3><h4 id="实现请求缓存和重试机制"><a href="#实现请求缓存和重试机制" class="headerlink" title="实现请求缓存和重试机制"></a>实现请求缓存和重试机制</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🌐 完整的网络服务管理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Dio _dio = Dio();</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, CacheItem&gt; _cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Completer&lt;<span class="built_in">dynamic</span>&gt;&gt; _pendingRequests = &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 缓存配置</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">int</span> _defaultCacheDuration = <span class="number">300</span>; <span class="comment">// 5分钟</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">int</span> _maxCacheSize = <span class="number">100</span>; <span class="comment">// 最大缓存条目数</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> initialize() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🚀 初始化网络服务...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置拦截器</span></span><br><span class="line">    _dio.interceptors.add(</span><br><span class="line">      InterceptorsWrapper(</span><br><span class="line">        onRequest: (options, handler) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;📤 发送请求: <span class="subst">$&#123;options.method&#125;</span> <span class="subst">$&#123;options.uri&#125;</span>&#x27;</span>);</span><br><span class="line">          <span class="comment">// 添加通用请求头</span></span><br><span class="line">          options.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = <span class="string">&#x27;Flutter App&#x27;</span>;</span><br><span class="line">          options.headers[<span class="string">&#x27;Accept&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span>;</span><br><span class="line">          handler.next(options);</span><br><span class="line">        &#125;,</span><br><span class="line">        onResponse: (response, handler) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;📥 收到响应: <span class="subst">$&#123;response.statusCode&#125;</span> <span class="subst">$&#123;response.requestOptions.uri&#125;</span>&#x27;</span>);</span><br><span class="line">          handler.next(response);</span><br><span class="line">        &#125;,</span><br><span class="line">        onError: (error, handler) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;❌ 请求错误: <span class="subst">$&#123;error.message&#125;</span>&#x27;</span>);</span><br><span class="line">          handler.next(error);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置超时</span></span><br><span class="line">    _dio.options.connectTimeout = <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">10</span>);</span><br><span class="line">    _dio.options.receiveTimeout = <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">30</span>);</span><br><span class="line">    _dio.options.sendTimeout = <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 网络服务初始化完成&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通用请求方法</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;T&gt; request&lt;T&gt;(</span><br><span class="line">    <span class="built_in">String</span> url, &#123;</span><br><span class="line">    <span class="built_in">String</span> method = <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;? params,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;? data,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;? headers,</span><br><span class="line">    <span class="built_in">bool</span> useCache = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">int</span> cacheDuration = _defaultCacheDuration,</span><br><span class="line">    <span class="built_in">int</span> retryCount = <span class="number">3</span>,</span><br><span class="line">    <span class="built_in">Duration</span> retryDelay = <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">  &#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> cacheKey = _generateCacheKey(url, method, params, data);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查缓存</span></span><br><span class="line">    <span class="keyword">if</span> (useCache &amp;&amp; method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> cachedResult = _getFromCache&lt;T&gt;(cacheKey);</span><br><span class="line">      <span class="keyword">if</span> (cachedResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;📦 从缓存获取: <span class="subst">$url</span>&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> cachedResult;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否有相同的请求正在进行</span></span><br><span class="line">    <span class="keyword">if</span> (_pendingRequests.containsKey(cacheKey)) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;⏳ 等待相同请求完成: <span class="subst">$url</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> _pendingRequests[cacheKey]!.future;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建请求完成器</span></span><br><span class="line">    <span class="keyword">final</span> completer = Completer&lt;T&gt;();</span><br><span class="line">    _pendingRequests[cacheKey] = completer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> result = <span class="keyword">await</span> _executeRequestWithRetry&lt;T&gt;(</span><br><span class="line">        url,</span><br><span class="line">        method: method,</span><br><span class="line">        params: params,</span><br><span class="line">        data: data,</span><br><span class="line">        headers: headers,</span><br><span class="line">        retryCount: retryCount,</span><br><span class="line">        retryDelay: retryDelay,</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 缓存GET请求结果</span></span><br><span class="line">      <span class="keyword">if</span> (useCache &amp;&amp; method == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        _saveToCache(cacheKey, result, cacheDuration);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      completer.complete(result);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      completer.completeError(error);</span><br><span class="line">      <span class="keyword">rethrow</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _pendingRequests.remove(cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行带重试的请求</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;T&gt; _executeRequestWithRetry&lt;T&gt;(</span><br><span class="line">    <span class="built_in">String</span> url, &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">String</span> method,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;? params,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;? data,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;? headers,</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">int</span> retryCount,</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">Duration</span> retryDelay,</span><br><span class="line">  &#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    Exception? lastException;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> attempt = <span class="number">1</span>; attempt &lt;= retryCount; attempt++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;🔄 尝试请求 (<span class="subst">$attempt</span>/<span class="subst">$retryCount</span>): <span class="subst">$url</span>&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> options = Options(</span><br><span class="line">          method: method,</span><br><span class="line">          headers: headers,</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        Response response;</span><br><span class="line">        <span class="keyword">switch</span> (method.toUpperCase()) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            response = <span class="keyword">await</span> _dio.<span class="keyword">get</span>(url, queryParameters: params, options: options);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            response = <span class="keyword">await</span> _dio.post(url, data: data, queryParameters: params, options: options);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">            response = <span class="keyword">await</span> _dio.put(url, data: data, queryParameters: params, options: options);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">            response = <span class="keyword">await</span> _dio.delete(url, data: data, queryParameters: params, options: options);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> UnsupportedError(<span class="string">&#x27;不支持的HTTP方法: <span class="subst">$method</span>&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查响应状态</span></span><br><span class="line">        <span class="keyword">if</span> (response.statusCode! &gt;= <span class="number">200</span> &amp;&amp; response.statusCode! &lt; <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;✅ 请求成功: <span class="subst">$url</span>&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> response.data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> HttpException(<span class="string">&#x27;HTTP <span class="subst">$&#123;response.statusCode&#125;</span>: <span class="subst">$&#123;response.statusMessage&#125;</span>&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">on</span> DioException <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        lastException = _handleDioException(e);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果是最后一次尝试，直接抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (attempt == retryCount) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;❌ 请求最终失败: <span class="subst">$url</span>&#x27;</span>);</span><br><span class="line">          <span class="keyword">throw</span> lastException;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据错误类型决定是否重试</span></span><br><span class="line">        <span class="keyword">if</span> (!_shouldRetry(e)) &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;🚫 错误不可重试: <span class="subst">$&#123;e.type&#125;</span>&#x27;</span>);</span><br><span class="line">          <span class="keyword">throw</span> lastException;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待后重试</span></span><br><span class="line">        <span class="keyword">final</span> delay = retryDelay * attempt; <span class="comment">// 指数退避</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;⏰ <span class="subst">$&#123;delay.inSeconds&#125;</span>秒后重试...&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> Future.delayed(delay);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        lastException = Exception(<span class="string">&#x27;未知错误: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (attempt == retryCount) &#123;</span><br><span class="line">          <span class="keyword">throw</span> lastException;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">await</span> Future.delayed(retryDelay * attempt);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">throw</span> lastException ?? Exception(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理Dio异常</span></span><br><span class="line">  <span class="keyword">static</span> Exception _handleDioException(DioException e) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.connectionTimeout:</span><br><span class="line">        <span class="keyword">return</span> TimeoutException(<span class="string">&#x27;连接超时&#x27;</span>, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">10</span>));</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.sendTimeout:</span><br><span class="line">        <span class="keyword">return</span> TimeoutException(<span class="string">&#x27;发送超时&#x27;</span>, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">30</span>));</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.receiveTimeout:</span><br><span class="line">        <span class="keyword">return</span> TimeoutException(<span class="string">&#x27;接收超时&#x27;</span>, <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">30</span>));</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.badResponse:</span><br><span class="line">        <span class="keyword">return</span> HttpException(<span class="string">&#x27;服务器错误: <span class="subst">$&#123;e.response?.statusCode&#125;</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.cancel:</span><br><span class="line">        <span class="keyword">return</span> Exception(<span class="string">&#x27;请求被取消&#x27;</span>);</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.connectionError:</span><br><span class="line">        <span class="keyword">return</span> Exception(<span class="string">&#x27;网络连接错误&#x27;</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> Exception(<span class="string">&#x27;网络请求失败: <span class="subst">$&#123;e.message&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断是否应该重试</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> _shouldRetry(DioException e) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.connectionTimeout:</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.sendTimeout:</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.receiveTimeout:</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.connectionError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">case</span> DioExceptionType.badResponse:</span><br><span class="line">        <span class="comment">// 5xx错误可以重试，4xx错误不重试</span></span><br><span class="line">        <span class="keyword">final</span> statusCode = e.response?.statusCode ?? <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> statusCode &gt;= <span class="number">500</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成缓存键</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">String</span> _generateCacheKey(</span><br><span class="line">    <span class="built_in">String</span> url,</span><br><span class="line">    <span class="built_in">String</span> method,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;? params,</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;? data,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">final</span> buffer = <span class="built_in">StringBuffer</span>();</span><br><span class="line">    buffer.write(<span class="string">&#x27;<span class="subst">$method</span>:<span class="subst">$url</span>&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.isNotEmpty) &#123;</span><br><span class="line">      buffer.write(<span class="string">&#x27;?<span class="subst">$&#123;Uri(queryParameters: params.map((k, v) =&gt; MapEntry(k, v.toString()))).query&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (data != <span class="keyword">null</span> &amp;&amp; data.isNotEmpty) &#123;</span><br><span class="line">      buffer.write(<span class="string">&#x27;#<span class="subst">$&#123;data.toString()&#125;</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> buffer.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 从缓存获取数据</span></span><br><span class="line">  <span class="keyword">static</span> T? _getFromCache&lt;T&gt;(<span class="built_in">String</span> key) &#123;</span><br><span class="line">    <span class="keyword">final</span> item = _cache[key];</span><br><span class="line">    <span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; !item.isExpired) &#123;</span><br><span class="line">      <span class="keyword">return</span> item.data <span class="keyword">as</span> T;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除过期缓存</span></span><br><span class="line">    <span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; item.isExpired) &#123;</span><br><span class="line">      _cache.remove(key);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🗑️ 移除过期缓存: <span class="subst">$key</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 保存到缓存</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> _saveToCache(<span class="built_in">String</span> key, <span class="built_in">dynamic</span> data, <span class="built_in">int</span> duration) &#123;</span><br><span class="line">    <span class="comment">// 检查缓存大小限制</span></span><br><span class="line">    <span class="keyword">if</span> (_cache.length &gt;= _maxCacheSize) &#123;</span><br><span class="line">      _cleanOldCache();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _cache[key] = CacheItem(</span><br><span class="line">      data: data,</span><br><span class="line">      expireTime: <span class="built_in">DateTime</span>.now().add(<span class="built_in">Duration</span>(seconds: duration)),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;💾 保存到缓存: <span class="subst">$key</span> (<span class="subst">$&#123;duration&#125;</span>秒)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清理旧缓存</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> _cleanOldCache() &#123;</span><br><span class="line">    <span class="keyword">final</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="keyword">final</span> expiredKeys = _cache.entries</span><br><span class="line">        .where((entry) =&gt; entry.value.expireTime.isBefore(now))</span><br><span class="line">        .map((entry) =&gt; entry.key)</span><br><span class="line">        .toList();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> key <span class="keyword">in</span> expiredKeys) &#123;</span><br><span class="line">      _cache.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🧹 清理了 <span class="subst">$&#123;expiredKeys.length&#125;</span> 个过期缓存&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果还是太多，移除最旧的一半</span></span><br><span class="line">    <span class="keyword">if</span> (_cache.length &gt;= _maxCacheSize) &#123;</span><br><span class="line">      <span class="keyword">final</span> sortedEntries = _cache.entries.toList()</span><br><span class="line">        ..sort((a, b) =&gt; a.value.expireTime.compareTo(b.value.expireTime));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">final</span> toRemove = sortedEntries.take(_cache.length ~/ <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">final</span> entry <span class="keyword">in</span> toRemove) &#123;</span><br><span class="line">        _cache.remove(entry.key);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🗑️ 移除了 <span class="subst">$&#123;toRemove.length&#125;</span> 个旧缓存&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清除所有缓存</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> clearCache() &#123;</span><br><span class="line">    _cache.clear();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🧹 清除所有缓存&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取缓存统计信息</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; getCacheStats() &#123;</span><br><span class="line">    <span class="keyword">final</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="keyword">final</span> validCount = _cache.values.where((item) =&gt; !item.isExpired).length;</span><br><span class="line">    <span class="keyword">final</span> expiredCount = _cache.length - validCount;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="string">&#x27;total_cache_items&#x27;</span>: _cache.length,</span><br><span class="line">      <span class="string">&#x27;valid_cache_items&#x27;</span>: validCount,</span><br><span class="line">      <span class="string">&#x27;expired_cache_items&#x27;</span>: expiredCount,</span><br><span class="line">      <span class="string">&#x27;cache_hit_rate&#x27;</span>: <span class="string">&#x27;<span class="subst">$&#123;(validCount / (_cache.length + <span class="number">1</span>) * <span class="number">100</span>).toStringAsFixed(<span class="number">1</span>)&#125;</span>%&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 取消所有请求</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> cancelAllRequests() &#123;</span><br><span class="line">    _dio.close(force: <span class="keyword">true</span>);</span><br><span class="line">    _pendingRequests.clear();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🚫 取消所有网络请求&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存项数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CacheItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">dynamic</span> data;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">DateTime</span> expireTime;</span><br><span class="line">  </span><br><span class="line">  CacheItem(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.data,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.expireTime,</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> isExpired =&gt; <span class="built_in">DateTime</span>.now().isAfter(expireTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP异常类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpException</span> <span class="keyword">implements</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line">  </span><br><span class="line">  HttpException(<span class="keyword">this</span>.message);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&#x27;HttpException: <span class="subst">$message</span>&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// API异常类（保持向后兼容）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiException</span> <span class="keyword">implements</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line">  </span><br><span class="line">  ApiException(<span class="keyword">this</span>.message);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&#x27;ApiException: <span class="subst">$message</span>&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-构建优化"><a href="#4-构建优化" class="headerlink" title="4. 构建优化"></a>4. 构建优化</h3><h4 id="配置-build-gradle-优化编译速度"><a href="#配置-build-gradle-优化编译速度" class="headerlink" title="配置 build.gradle 优化编译速度"></a>配置 build.gradle 优化编译速度</h4><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// android/app/build.gradle</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">33</span></span><br><span class="line">    </span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 启用代码混淆</span></span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            <span class="comment">// 启用资源压缩</span></span><br><span class="line">            shrinkResources <span class="keyword">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 调试版本优化</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            debuggable <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用-Flutter-性能分析工具"><a href="#使用-Flutter-性能分析工具" class="headerlink" title="使用 Flutter 性能分析工具"></a>使用 Flutter 性能分析工具</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 🔍 完整的性能监控工具</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceMonitor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt;&gt; _buildTimes = &#123;&#125;;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">int</span>&gt; _buildCounts = &#123;&#125;;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">bool</span> _isProfilingEnabled = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">static</span> Timer? _reportTimer;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 启动性能分析</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> startProfiling(&#123;</span><br><span class="line">    <span class="built_in">bool</span> enableDebugPaint = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> enableRepaintRainbow = <span class="keyword">true</span>,</span><br><span class="line">    <span class="built_in">bool</span> enableLayerBorders = <span class="keyword">false</span>,</span><br><span class="line">    <span class="built_in">Duration</span> reportInterval = <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">30</span>),</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🔍 启动性能分析...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    _isProfilingEnabled = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启用调试工具</span></span><br><span class="line">    <span class="keyword">if</span> (enableDebugPaint) &#123;</span><br><span class="line">      debugPaintSizeEnabled = <span class="keyword">true</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 启用Widget边界显示&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (enableRepaintRainbow) &#123;</span><br><span class="line">      debugRepaintRainbowEnabled = <span class="keyword">true</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 启用重绘彩虹效果&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (enableLayerBorders) &#123;</span><br><span class="line">      debugPaintLayerBordersEnabled = <span class="keyword">true</span>;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 启用图层边界显示&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动定期报告</span></span><br><span class="line">    _reportTimer = Timer.periodic(reportInterval, (timer) &#123;</span><br><span class="line">      _generatePerformanceReport();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 性能分析已启动&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 停止性能分析</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> stopProfiling() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🛑 停止性能分析...&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    _isProfilingEnabled = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭调试工具</span></span><br><span class="line">    debugPaintSizeEnabled = <span class="keyword">false</span>;</span><br><span class="line">    debugRepaintRainbowEnabled = <span class="keyword">false</span>;</span><br><span class="line">    debugPaintLayerBordersEnabled = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 停止定期报告</span></span><br><span class="line">    _reportTimer?.cancel();</span><br><span class="line">    _reportTimer = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成最终报告</span></span><br><span class="line">    _generatePerformanceReport();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;✅ 性能分析已停止&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 测量Widget构建时间</span></span><br><span class="line">  <span class="keyword">static</span> T measureWidgetBuild&lt;T&gt;(</span><br><span class="line">    <span class="built_in">String</span> widgetName,</span><br><span class="line">    T <span class="built_in">Function</span>() buildFunction, &#123;</span><br><span class="line">    <span class="built_in">bool</span> logIndividualBuilds = <span class="keyword">false</span>,</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_isProfilingEnabled) &#123;</span><br><span class="line">      <span class="keyword">return</span> buildFunction();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> stopwatch = <span class="built_in">Stopwatch</span>()..start();</span><br><span class="line">    <span class="keyword">final</span> result = buildFunction();</span><br><span class="line">    stopwatch.stop();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> buildTime = stopwatch.elapsedMilliseconds;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录构建时间</span></span><br><span class="line">    _buildTimes.putIfAbsent(widgetName, () =&gt; []).add(buildTime);</span><br><span class="line">    _buildCounts[widgetName] = (_buildCounts[widgetName] ?? <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (logIndividualBuilds) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;🏗️ Widget &quot;<span class="subst">$widgetName</span>&quot; 构建时间: <span class="subst">$&#123;buildTime&#125;</span>ms&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果构建时间过长，发出警告</span></span><br><span class="line">    <span class="keyword">if</span> (buildTime &gt; <span class="number">16</span>) &#123; <span class="comment">// 超过一帧的时间</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;⚠️ 警告: Widget &quot;<span class="subst">$widgetName</span>&quot; 构建时间过长: <span class="subst">$&#123;buildTime&#125;</span>ms&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 测量异步操作性能</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;T&gt; measureAsyncOperation&lt;T&gt;(</span><br><span class="line">    <span class="built_in">String</span> operationName,</span><br><span class="line">    Future&lt;T&gt; <span class="built_in">Function</span>() operation,</span><br><span class="line">  ) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_isProfilingEnabled) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> operation();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> stopwatch = <span class="built_in">Stopwatch</span>()..start();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> result = <span class="keyword">await</span> operation();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;⚡ 异步操作 &quot;<span class="subst">$operationName</span>&quot; 完成时间: <span class="subst">$&#123;stopwatch.elapsedMilliseconds&#125;</span>ms&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;❌ 异步操作 &quot;<span class="subst">$operationName</span>&quot; 失败，耗时: <span class="subst">$&#123;stopwatch.elapsedMilliseconds&#125;</span>ms&#x27;</span>);</span><br><span class="line">      <span class="keyword">rethrow</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 监控帧率</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> startFrameRateMonitoring() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_isProfilingEnabled) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    WidgetsBinding.instance.addTimingsCallback((timings) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">final</span> timing <span class="keyword">in</span> timings) &#123;</span><br><span class="line">        <span class="keyword">final</span> frameDuration = timing.totalSpan.inMilliseconds;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (frameDuration &gt; <span class="number">16</span>) &#123; <span class="comment">// 超过60fps</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;🎯 帧率警告: 帧渲染时间 <span class="subst">$&#123;frameDuration&#125;</span>ms (目标: &lt;16ms)&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 详细的帧时间分析</span></span><br><span class="line">        <span class="keyword">if</span> (frameDuration &gt; <span class="number">32</span>) &#123; <span class="comment">// 严重的帧率问题</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;🚨 严重帧率问题:&#x27;</span>);</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;  - 总时间: <span class="subst">$&#123;frameDuration&#125;</span>ms&#x27;</span>);</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;  - 构建时间: <span class="subst">$&#123;timing.buildDuration.inMilliseconds&#125;</span>ms&#x27;</span>);</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;  - 光栅化时间: <span class="subst">$&#123;timing.rasterDuration.inMilliseconds&#125;</span>ms&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;📊 帧率监控已启动&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成性能报告</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> _generatePerformanceReport() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_buildTimes.isEmpty) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📊 性能报告: 暂无数据&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n📊 ===== 性能分析报告 =====&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;📅 报告时间: <span class="subst">$&#123;DateTime.now()&#125;</span>&#x27;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🏗️ Widget构建性能:&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> sortedWidgets = _buildTimes.entries.toList()</span><br><span class="line">      ..sort((a, b) =&gt; _getAverageTime(b.value).compareTo(_getAverageTime(a.value)));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> entry <span class="keyword">in</span> sortedWidgets.take(<span class="number">10</span>)) &#123; <span class="comment">// 显示前10个最慢的Widget</span></span><br><span class="line">      <span class="keyword">final</span> widgetName = entry.key;</span><br><span class="line">      <span class="keyword">final</span> times = entry.value;</span><br><span class="line">      <span class="keyword">final</span> count = _buildCounts[widgetName] ?? <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">final</span> avgTime = _getAverageTime(times);</span><br><span class="line">      <span class="keyword">final</span> maxTime = times.reduce((a, b) =&gt; a &gt; b ? a : b);</span><br><span class="line">      <span class="keyword">final</span> minTime = times.reduce((a, b) =&gt; a &lt; b ? a : b);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;  📦 <span class="subst">$widgetName</span>:&#x27;</span>);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;    - 构建次数: <span class="subst">$count</span>&#x27;</span>);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;    - 平均时间: <span class="subst">$&#123;avgTime.toStringAsFixed(<span class="number">1</span>)&#125;</span>ms&#x27;</span>);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;    - 最大时间: <span class="subst">$&#123;maxTime&#125;</span>ms&#x27;</span>);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;    - 最小时间: <span class="subst">$&#123;minTime&#125;</span>ms&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (avgTime &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    ⚠️ 建议优化此Widget&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n🎯 性能建议:&#x27;</span>);</span><br><span class="line">    _generatePerformanceSuggestions();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;===========================\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 计算平均时间</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">double</span> _getAverageTime(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; times) &#123;</span><br><span class="line">    <span class="keyword">if</span> (times.isEmpty) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">return</span> times.reduce((a, b) =&gt; a + b) / times.length;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成性能建议</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> _generatePerformanceSuggestions() &#123;</span><br><span class="line">    <span class="keyword">final</span> suggestions = &lt;<span class="built_in">String</span>&gt;[];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析慢速Widget</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> entry <span class="keyword">in</span> _buildTimes.entries) &#123;</span><br><span class="line">      <span class="keyword">final</span> avgTime = _getAverageTime(entry.value);</span><br><span class="line">      <span class="keyword">if</span> (avgTime &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        suggestions.add(<span class="string">&#x27;优化 &quot;<span class="subst">$&#123;entry.key&#125;</span>&quot; Widget的构建性能&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析频繁重建的Widget</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> entry <span class="keyword">in</span> _buildCounts.entries) &#123;</span><br><span class="line">      <span class="keyword">if</span> (entry.value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        suggestions.add(<span class="string">&#x27;减少 &quot;<span class="subst">$&#123;entry.key&#125;</span>&quot; Widget的重建频率&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (suggestions.isEmpty) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 当前性能表现良好，无需特别优化&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; suggestions.length; i++) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>. <span class="subst">$&#123;suggestions[i]&#125;</span>&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清除性能数据</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> clearData() &#123;</span><br><span class="line">    _buildTimes.clear();</span><br><span class="line">    _buildCounts.clear();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;🧹 性能数据已清除&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 main.dart 中使用性能监控</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 只在 Debug 模式下启用性能监控</span></span><br><span class="line">  <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">    <span class="comment">// 启动完整的性能分析</span></span><br><span class="line">    PerformanceMonitor.startProfiling(</span><br><span class="line">      enableDebugPaint: <span class="keyword">true</span>,</span><br><span class="line">      enableRepaintRainbow: <span class="keyword">false</span>, <span class="comment">// 根据需要开启</span></span><br><span class="line">      enableLayerBorders: <span class="keyword">false</span>,</span><br><span class="line">      reportInterval: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">30</span>),</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动帧率监控</span></span><br><span class="line">    PerformanceMonitor.startFrameRateMonitoring();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启用性能覆盖层</span></span><br><span class="line">    debugProfileBuildsEnabled = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能监控Widget装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> enableProfiling;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> PerformanceWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.child,</span><br><span class="line">    <span class="keyword">this</span>.enableProfiling = <span class="keyword">true</span>,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!enableProfiling) &#123;</span><br><span class="line">      <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> PerformanceMonitor.measureWidgetBuild(</span><br><span class="line">      name,</span><br><span class="line">      () =&gt; child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-测试策略"><a href="#5-测试策略" class="headerlink" title="5. 测试策略"></a>5. 测试策略</h3><h4 id="实现全面的测试覆盖"><a href="#实现全面的测试覆盖" class="headerlink" title="实现全面的测试覆盖"></a>实现全面的测试覆盖</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test/widget_test.dart</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_test/flutter_test.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:mockito/mockito.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:mockito/annotations.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🧪 生成Mock类</span></span><br><span class="line"><span class="meta">@GenerateMocks</span>([ApiService, DatabaseService])</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  group(<span class="string">&#x27;Widget Tests&#x27;</span>, () &#123;</span><br><span class="line">    <span class="keyword">late</span> MockApiService mockApiService;</span><br><span class="line">    <span class="keyword">late</span> MockDatabaseService mockDatabaseService;</span><br><span class="line">    </span><br><span class="line">    setUp(() &#123;</span><br><span class="line">      <span class="comment">// 初始化Mock对象</span></span><br><span class="line">      mockApiService = MockApiService();</span><br><span class="line">      mockDatabaseService = MockDatabaseService();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    testWidgets(<span class="string">&#x27;Counter increments smoke test&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="comment">// 构建应用并触发一帧</span></span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(<span class="keyword">const</span> MyApp());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 验证计数器从0开始</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsNothing);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 点击&#x27;+&#x27;图标并触发一帧</span></span><br><span class="line">      <span class="keyword">await</span> tester.tap(find.byIcon(Icons.add));</span><br><span class="line">      <span class="keyword">await</span> tester.pump();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 验证计数器已增加</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsNothing);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsOneWidget);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    testWidgets(<span class="string">&#x27;用户列表加载测试&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="comment">// 🎭 模拟API响应</span></span><br><span class="line">      when(mockApiService.getUsers()).thenAnswer((_) <span class="keyword">async</span> =&gt; [</span><br><span class="line">        User(id: <span class="number">1</span>, name: <span class="string">&#x27;张三&#x27;</span>, email: <span class="string">&#x27;zhangsan@example.com&#x27;</span>),</span><br><span class="line">        User(id: <span class="number">2</span>, name: <span class="string">&#x27;李四&#x27;</span>, email: <span class="string">&#x27;lisi@example.com&#x27;</span>),</span><br><span class="line">      ]);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 构建用户列表页面</span></span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(</span><br><span class="line">        MaterialApp(</span><br><span class="line">          home: UserListPage(apiService: mockApiService),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证加载状态</span></span><br><span class="line">      expect(find.byType(CircularProgressIndicator), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 等待异步操作完成</span></span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证用户数据显示</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;张三&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;李四&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.byType(CircularProgressIndicator), findsNothing);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证API调用</span></span><br><span class="line">      verify(mockApiService.getUsers()).called(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    testWidgets(<span class="string">&#x27;表单验证测试&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(</span><br><span class="line">        MaterialApp(</span><br><span class="line">          home: Scaffold(</span><br><span class="line">            body: LoginForm(),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 查找表单字段</span></span><br><span class="line">      <span class="keyword">final</span> emailField = find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;email_field&#x27;</span>));</span><br><span class="line">      <span class="keyword">final</span> passwordField = find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;password_field&#x27;</span>));</span><br><span class="line">      <span class="keyword">final</span> submitButton = find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;submit_button&#x27;</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试空表单提交</span></span><br><span class="line">      <span class="keyword">await</span> tester.tap(submitButton);</span><br><span class="line">      <span class="keyword">await</span> tester.pump();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证错误消息</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;请输入邮箱&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;请输入密码&#x27;</span>), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 输入无效邮箱</span></span><br><span class="line">      <span class="keyword">await</span> tester.enterText(emailField, <span class="string">&#x27;invalid-email&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> tester.tap(submitButton);</span><br><span class="line">      <span class="keyword">await</span> tester.pump();</span><br><span class="line">      </span><br><span class="line">      expect(find.text(<span class="string">&#x27;请输入有效的邮箱地址&#x27;</span>), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 输入有效数据</span></span><br><span class="line">      <span class="keyword">await</span> tester.enterText(emailField, <span class="string">&#x27;test@example.com&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> tester.enterText(passwordField, <span class="string">&#x27;password123&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> tester.tap(submitButton);</span><br><span class="line">      <span class="keyword">await</span> tester.pump();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证错误消息消失</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;请输入邮箱&#x27;</span>), findsNothing);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;请输入密码&#x27;</span>), findsNothing);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    testWidgets(<span class="string">&#x27;滚动性能测试&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="comment">// 创建大量数据</span></span><br><span class="line">      <span class="keyword">final</span> items = <span class="built_in">List</span>.generate(<span class="number">1000</span>, (index) =&gt; <span class="string">&#x27;Item <span class="subst">$index</span>&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(</span><br><span class="line">        MaterialApp(</span><br><span class="line">          home: Scaffold(</span><br><span class="line">            body: ListView.builder(</span><br><span class="line">              itemCount: items.length,</span><br><span class="line">              itemBuilder: (context, index) &#123;</span><br><span class="line">                <span class="keyword">return</span> ListTile(</span><br><span class="line">                  title: Text(items[index]),</span><br><span class="line">                  key: Key(<span class="string">&#x27;item_<span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证初始状态</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;Item 0&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;Item 999&#x27;</span>), findsNothing);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试滚动性能</span></span><br><span class="line">      <span class="keyword">final</span> stopwatch = <span class="built_in">Stopwatch</span>()..start();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 快速滚动到底部</span></span><br><span class="line">      <span class="keyword">await</span> tester.fling(</span><br><span class="line">        find.byType(ListView),</span><br><span class="line">        <span class="keyword">const</span> Offset(<span class="number">0</span>, <span class="number">-5000</span>),</span><br><span class="line">        <span class="number">1000</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证滚动完成</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;Item 999&#x27;</span>), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证滚动性能（应该在合理时间内完成）</span></span><br><span class="line">      expect(stopwatch.elapsedMilliseconds, lessThan(<span class="number">2000</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;📊 滚动性能测试: <span class="subst">$&#123;stopwatch.elapsedMilliseconds&#125;</span>ms&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    testWidgets(<span class="string">&#x27;网络错误处理测试&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="comment">// 🚨 模拟网络错误</span></span><br><span class="line">      when(mockApiService.getUsers())</span><br><span class="line">          .thenThrow(Exception(<span class="string">&#x27;网络连接失败&#x27;</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(</span><br><span class="line">        MaterialApp(</span><br><span class="line">          home: UserListPage(apiService: mockApiService),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 等待错误处理</span></span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证错误消息显示</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;网络连接失败&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.byIcon(Icons.refresh), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试重试功能</span></span><br><span class="line">      when(mockApiService.getUsers()).thenAnswer((_) <span class="keyword">async</span> =&gt; [</span><br><span class="line">        User(id: <span class="number">1</span>, name: <span class="string">&#x27;张三&#x27;</span>, email: <span class="string">&#x27;zhangsan@example.com&#x27;</span>),</span><br><span class="line">      ]);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">await</span> tester.tap(find.byIcon(Icons.refresh));</span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证重试后数据加载成功</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;张三&#x27;</span>), findsOneWidget);</span><br><span class="line">      expect(find.text(<span class="string">&#x27;网络连接失败&#x27;</span>), findsNothing);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  group(<span class="string">&#x27;单元测试&#x27;</span>, () &#123;</span><br><span class="line">    test(<span class="string">&#x27;用户模型序列化测试&#x27;</span>, () &#123;</span><br><span class="line">      <span class="comment">// 测试数据</span></span><br><span class="line">      <span class="keyword">final</span> userData = &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;zhangsan@example.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;created_at&#x27;</span>: <span class="string">&#x27;2023-01-01T00:00:00Z&#x27;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 从JSON创建用户对象</span></span><br><span class="line">      <span class="keyword">final</span> user = User.fromJson(userData);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 验证属性</span></span><br><span class="line">      expect(user.id, equals(<span class="number">1</span>));</span><br><span class="line">      expect(user.name, equals(<span class="string">&#x27;张三&#x27;</span>));</span><br><span class="line">      expect(user.email, equals(<span class="string">&#x27;zhangsan@example.com&#x27;</span>));</span><br><span class="line">      expect(user.createdAt, isA&lt;<span class="built_in">DateTime</span>&gt;());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试序列化</span></span><br><span class="line">      <span class="keyword">final</span> json = user.toJson();</span><br><span class="line">      expect(json[<span class="string">&#x27;id&#x27;</span>], equals(<span class="number">1</span>));</span><br><span class="line">      expect(json[<span class="string">&#x27;name&#x27;</span>], equals(<span class="string">&#x27;张三&#x27;</span>));</span><br><span class="line">      expect(json[<span class="string">&#x27;email&#x27;</span>], equals(<span class="string">&#x27;zhangsan@example.com&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    test(<span class="string">&#x27;验证工具类测试&#x27;</span>, () &#123;</span><br><span class="line">      <span class="comment">// 测试邮箱验证</span></span><br><span class="line">      expect(ValidationUtils.isValidEmail(<span class="string">&#x27;test@example.com&#x27;</span>), isTrue);</span><br><span class="line">      expect(ValidationUtils.isValidEmail(<span class="string">&#x27;invalid-email&#x27;</span>), isFalse);</span><br><span class="line">      expect(ValidationUtils.isValidEmail(<span class="string">&#x27;&#x27;</span>), isFalse);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试密码强度</span></span><br><span class="line">      expect(ValidationUtils.isStrongPassword(<span class="string">&#x27;password123&#x27;</span>), isFalse);</span><br><span class="line">      expect(ValidationUtils.isStrongPassword(<span class="string">&#x27;Password123!&#x27;</span>), isTrue);</span><br><span class="line">      expect(ValidationUtils.isStrongPassword(<span class="string">&#x27;123&#x27;</span>), isFalse);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试手机号验证</span></span><br><span class="line">      expect(ValidationUtils.isValidPhone(<span class="string">&#x27;13800138000&#x27;</span>), isTrue);</span><br><span class="line">      expect(ValidationUtils.isValidPhone(<span class="string">&#x27;1380013800&#x27;</span>), isFalse);</span><br><span class="line">      expect(ValidationUtils.isValidPhone(<span class="string">&#x27;abc&#x27;</span>), isFalse);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    test(<span class="string">&#x27;缓存管理测试&#x27;</span>, () <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> cacheManager = CacheManager();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试缓存存储</span></span><br><span class="line">      <span class="keyword">await</span> cacheManager.put(<span class="string">&#x27;test_key&#x27;</span>, <span class="string">&#x27;test_value&#x27;</span>);</span><br><span class="line">      <span class="keyword">final</span> value = <span class="keyword">await</span> cacheManager.<span class="keyword">get</span>(<span class="string">&#x27;test_key&#x27;</span>);</span><br><span class="line">      expect(value, equals(<span class="string">&#x27;test_value&#x27;</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试缓存过期</span></span><br><span class="line">      <span class="keyword">await</span> cacheManager.put(</span><br><span class="line">        <span class="string">&#x27;expire_key&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;expire_value&#x27;</span>,</span><br><span class="line">        duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">100</span>),</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 立即获取应该有值</span></span><br><span class="line">      <span class="keyword">final</span> immediateValue = <span class="keyword">await</span> cacheManager.<span class="keyword">get</span>(<span class="string">&#x27;expire_key&#x27;</span>);</span><br><span class="line">      expect(immediateValue, equals(<span class="string">&#x27;expire_value&#x27;</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 等待过期</span></span><br><span class="line">      <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">150</span>));</span><br><span class="line">      <span class="keyword">final</span> expiredValue = <span class="keyword">await</span> cacheManager.<span class="keyword">get</span>(<span class="string">&#x27;expire_key&#x27;</span>);</span><br><span class="line">      expect(expiredValue, isNull);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 测试缓存清除</span></span><br><span class="line">      <span class="keyword">await</span> cacheManager.put(<span class="string">&#x27;clear_key&#x27;</span>, <span class="string">&#x27;clear_value&#x27;</span>);</span><br><span class="line">      <span class="keyword">await</span> cacheManager.clear();</span><br><span class="line">      <span class="keyword">final</span> clearedValue = <span class="keyword">await</span> cacheManager.<span class="keyword">get</span>(<span class="string">&#x27;clear_key&#x27;</span>);</span><br><span class="line">      expect(clearedValue, isNull);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  group(<span class="string">&#x27;集成测试&#x27;</span>, () &#123;</span><br><span class="line">    testWidgets(<span class="string">&#x27;完整用户流程测试&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="comment">// 🎬 模拟完整的用户操作流程</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 1. 启动应用</span></span><br><span class="line">      <span class="keyword">await</span> tester.pumpWidget(MyApp());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 2. 导航到登录页面</span></span><br><span class="line">      <span class="keyword">await</span> tester.tap(find.text(<span class="string">&#x27;登录&#x27;</span>));</span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 3. 输入登录信息</span></span><br><span class="line">      <span class="keyword">await</span> tester.enterText(</span><br><span class="line">        find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;email_field&#x27;</span>)),</span><br><span class="line">        <span class="string">&#x27;test@example.com&#x27;</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> tester.enterText(</span><br><span class="line">        find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;password_field&#x27;</span>)),</span><br><span class="line">        <span class="string">&#x27;password123&#x27;</span>,</span><br><span class="line">      );</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 4. 提交登录</span></span><br><span class="line">      <span class="keyword">await</span> tester.tap(find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;login_button&#x27;</span>)));</span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 5. 验证导航到主页</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;欢迎回来&#x27;</span>), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 6. 测试主要功能</span></span><br><span class="line">      <span class="keyword">await</span> tester.tap(find.text(<span class="string">&#x27;用户列表&#x27;</span>));</span><br><span class="line">      <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 7. 验证数据加载</span></span><br><span class="line">      expect(find.byType(ListView), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 8. 测试搜索功能</span></span><br><span class="line">      <span class="keyword">await</span> tester.enterText(</span><br><span class="line">        find.byKey(<span class="keyword">const</span> Key(<span class="string">&#x27;search_field&#x27;</span>)),</span><br><span class="line">        <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> tester.pump(<span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 9. 验证搜索结果</span></span><br><span class="line">      expect(find.text(<span class="string">&#x27;张三&#x27;</span>), findsOneWidget);</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;✅ 完整用户流程测试通过&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 🛠️ 测试工具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建测试用的MaterialApp</span></span><br><span class="line">  <span class="keyword">static</span> Widget createTestApp(Widget child) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(body: child),</span><br><span class="line">      theme: ThemeData.light(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 等待动画完成</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; waitForAnimation(</span><br><span class="line">    WidgetTester tester, &#123;</span><br><span class="line">    <span class="built_in">Duration</span> timeout = <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">  &#125;) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> tester.pumpAndSettle(<span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">100</span>), timeout);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 模拟网络延迟</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; simulateNetworkDelay([</span><br><span class="line">    <span class="built_in">Duration</span> delay = <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>),</span><br><span class="line">  ]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(delay);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 验证Widget存在且可见</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> expectWidgetVisible(Finder finder) &#123;</span><br><span class="line">    expect(finder, findsOneWidget);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 验证Widget不存在</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> expectWidgetNotFound(Finder finder) &#123;</span><br><span class="line">    expect(finder, findsNothing);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 📊 性能测试工具</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceTestUtils</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 测量Widget构建时间</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">Duration</span>&gt; measureBuildTime(</span><br><span class="line">    WidgetTester tester,</span><br><span class="line">    Widget widget,</span><br><span class="line">  ) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> stopwatch = <span class="built_in">Stopwatch</span>()..start();</span><br><span class="line">    <span class="keyword">await</span> tester.pumpWidget(widget);</span><br><span class="line">    stopwatch.stop();</span><br><span class="line">    <span class="keyword">return</span> stopwatch.elapsed;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 测量滚动性能</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">Duration</span>&gt; measureScrollPerformance(</span><br><span class="line">    WidgetTester tester,</span><br><span class="line">    Finder scrollable,</span><br><span class="line">    Offset offset,</span><br><span class="line">  ) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> stopwatch = <span class="built_in">Stopwatch</span>()..start();</span><br><span class="line">    <span class="keyword">await</span> tester.fling(scrollable, offset, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">await</span> tester.pumpAndSettle();</span><br><span class="line">    stopwatch.stop();</span><br><span class="line">    <span class="keyword">return</span> stopwatch.elapsed;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 验证性能指标</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> assertPerformance(</span><br><span class="line">    <span class="built_in">Duration</span> actual,</span><br><span class="line">    <span class="built_in">Duration</span> expected, &#123;</span><br><span class="line">    <span class="built_in">String?</span> message,</span><br><span class="line">  &#125;) &#123;</span><br><span class="line">    expect(</span><br><span class="line">      actual.inMilliseconds,</span><br><span class="line">      lessThanOrEqualTo(expected.inMilliseconds),</span><br><span class="line">      reason: message ?? <span class="string">&#x27;性能不符合预期: <span class="subst">$&#123;actual.inMilliseconds&#125;</span>ms &gt; <span class="subst">$&#123;expected.inMilliseconds&#125;</span>ms&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过合理使用 Flutter 提供的调试工具，如 <code>debugPaintSizeEnabled</code> 和 <code>debugRepaintRainbowEnabled</code>，开发者可以更好地理解应用的布局和性能特征。结合本文提到的开发技巧和优化策略，可以显著提升 Flutter 应用的性能和用户体验。</p>
<p>记住，性能优化是一个持续的过程，需要在开发过程中不断监控和调整。定期使用调试工具分析应用性能，及时发现和解决潜在问题，是保持应用高性能的关键。</p>
<h3 id="快速参考"><a href="#快速参考" class="headerlink" title="快速参考"></a>快速参考</h3><h4 id="调试工具快速启用"><a href="#调试工具快速启用" class="headerlink" title="调试工具快速启用"></a>调试工具快速启用</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 main.dart 中快速启用所有调试工具</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">if</span> (kDebugMode) &#123;</span><br><span class="line">    debugPaintSizeEnabled = <span class="keyword">true</span>;        <span class="comment">// 显示布局边界</span></span><br><span class="line">    debugRepaintRainbowEnabled = <span class="keyword">true</span>;   <span class="comment">// 显示重绘彩虹</span></span><br><span class="line">    debugPaintLayerBordersEnabled = <span class="keyword">true</span>; <span class="comment">// 显示图层边界</span></span><br><span class="line">  &#125;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="性能优化检查清单"><a href="#性能优化检查清单" class="headerlink" title="性能优化检查清单"></a>性能优化检查清单</h4><ul>
<li><input disabled="" type="checkbox"> 使用 const 构造函数</li>
<li><input disabled="" type="checkbox"> 避免在 build 方法中创建 Widget</li>
<li><input disabled="" type="checkbox"> 合理使用 setState 范围</li>
<li><input disabled="" type="checkbox"> 使用 ListView.builder 处理大列表</li>
<li><input disabled="" type="checkbox"> 实现图片缓存和懒加载</li>
<li><input disabled="" type="checkbox"> 使用 RepaintBoundary 优化重绘</li>
<li><input disabled="" type="checkbox"> 正确释放资源和控制器</li>
<li><input disabled="" type="checkbox"> 实现网络请求缓存</li>
<li><input disabled="" type="checkbox"> 编写单元测试和 Widget 测试</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter中的并发与隔离（Isolates）</title>
    <url>/2025/05/16/Flutter%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E4%B8%8E%E9%9A%94%E7%A6%BB%EF%BC%88Isolates%EF%BC%89/</url>
    <content><![CDATA[<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ol>
<li><p>Isolates的本质  </p>
<ul>
<li>Dart中的代码运行在isolates（隔离区）中，类似于线程，但每个isolate拥有独立的内存，不共享状态，只能通过消息传递通信</li>
<li>默认情况下，Flutter应用的所有工作都在主isolate（UI线程）上执行。若主isolate被长时间计算阻塞，会导致UI卡顿（jank）</li>
</ul>
</li>
<li><p>事件循环与性能  </p>
<ul>
<li>主isolate的事件循环需处理用户输入、渲染帧（60Hz设备每秒60帧）等任务。若计算任务超过帧间隔时间（约16ms），需将任务移至辅助isolate以避免卡顿。</li>
</ul>
</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul>
<li><p>适用场景：  </p>
<ul>
<li>大型计算（如解析大JSON文件、音视频处理、数据库操作等）。 </li>
<li>需要异步支持且不阻塞UI的任务（如FFI调用）。</li>
</ul>
</li>
<li><p>不适用场景：  </p>
<ul>
<li>直接操作UI或访问<code>dart:ui</code>方法（仅主isolate可处理UI）。  </li>
<li>接收平台端主动推送的消息（如Firestore监听）。</li>
</ul>
</li>
</ul>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><ol>
<li><p>短生命周期isolate  </p>
<ul>
<li><p><code>Isolate.run</code>：简化版API，自动创建&#x2F;销毁isolate，适合单次计算。  </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> photos = <span class="keyword">await</span> Isolate.run(() =&gt; jsonDecode(data).map(Photo.fromJson).toList());</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>长生命周期isolate  </p>
<ul>
<li>通过<code>Isolate.spawn</code>、<code>ReceivePort</code>&#x2F;<code>SendPort</code>实现持续通信。  </li>
<li>类似Actor模型，需手动管理消息传递（如双向通信需分别建立端口）。</li>
</ul>
</li>
<li><p>平台插件支持（Flutter 3.7+）  </p>
<ul>
<li><p>使用<code>BackgroundIsolateBinaryMessenger</code>在isolate中调用平台插件（如<code>shared_preferences</code>）。  </p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">BackgroundIsolateBinaryMessenger.ensureInitialized(rootIsolateToken);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="限制与注意事项"><a href="#限制与注意事项" class="headerlink" title="限制与注意事项"></a>限制与注意事项</h2><ul>
<li>Web平台：不支持isolates，<code>compute()</code>方法在Web上回退到主线程。  </li>
<li>内存隔离：对象传递时默认深拷贝（不可变对象如<code>String</code>除外），避免内存共享。  </li>
<li>全局状态：isolate间的全局变量相互独立，修改无效。</li>
</ul>
<p>推荐资源</p>
<ul>
<li>性能优化：优先使用<code>Isolate.run</code>或<code>compute</code>（简化API）。  </li>
<li>复杂场景：考虑<code>isolate_agents</code>或<code>worker_manager</code>管理长生命周期isolate。  </li>
<li>深入理解：参考Dart官方文档的<a href="https://dart.dev/concurrency">Actor模型</a>和Flutter的<code>IsolateNameServer</code>。</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Flutter的isolates通过内存隔离和消息传递实现并发，适合CPU密集型任务。开发者需权衡isolate的创建开销与任务复杂度，优先使用高阶API（如<code>Isolate.run</code>），并在必要时结合端口通信或平台插件支持。Web端需特殊处理，且需注意UI相关操作始终限制在主isolate。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Flutter中表情包导致的UI渲染问题</title>
    <url>/2024/10/31/Flutter%E4%B8%AD%E8%A1%A8%E6%83%85%E5%8C%85%E5%AF%BC%E8%87%B4%E7%9A%84UI%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在后台发现一个UI渲染卡顿问题，之前忙其他的没太关注。</p>
<p>最近有时间解析了日志，发现了下方有用的日志信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">======== Exception caught by rendering library ===================================================== </span><br><span class="line">The following ArgumentError was thrown during performLayout(): Invalid argument(s): string is not well-formed UTF-16</span><br></pre></td></tr></table></figure>

<p>codeRevier对应类的代码后发现了类似下方的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final text = contentController?.text;</span><br><span class="line">final textLength = text?.length ?? 0;</span><br><span class="line">text = textLength &gt;= 12 ? text!.substring(0, 12) : text ?? &#x27;&#x27;,</span><br></pre></td></tr></table></figure>
<p>其主要作用是当文字超出某个长度后，截取固定长度的字符串。但我们都知道表情的length是2，截取的时候就会概率出现上方的问题。</p>
<p>所以在截取字符串的时候，我们需要用到<code>characters</code>属性来确保截取的字符串是有效的 UTF-16 编码。</p>
<p>具体代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String truncateText(String? text, int maxLength) &#123;</span><br><span class="line">  if (text == null) return &#x27;&#x27;;</span><br><span class="line">  final characters = text.characters;</span><br><span class="line">  return characters.length &gt; maxLength ? characters.take(maxLength).toString() : text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">text = truncateText(widget.contentController?.text, 12),</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>App开发</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter中隐藏键盘操作</title>
    <url>/2023/04/03/Flutter%E4%B8%AD%E9%9A%90%E8%97%8F%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>方式一</p>
</blockquote>
<p>在iOS原生开发中我们可能会使用<code>textField.resignFirstResponder() </code>或者<code>endEditing</code>来隐藏键盘。</p>
<p>而在Flutter中我们可以使用获取<code>Focus</code>，然后调用<code>unfocus</code>的方式取消键盘。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FocusScopeNode currentFocus = FocusScope.of(context);</span><br><span class="line">if(!currentFocus.hasPrimaryFocus) &#123;</span><br><span class="line">    currentFocus.unfocus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二</p>
</blockquote>
<p>当然在获取控制器困难的时候，在iOS原生开发中我们可以使用下面的方法取消键盘。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而Flutter中也可以使用同样的方法，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FocusScope.of(context).requestFocus(FocusNode());</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter介绍与配置</title>
    <url>/2022/04/15/Flutter%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>关于<a href="https://flutter.cn/docs">Flutter</a>的介绍和具体配置，建议查看官网或者是<a href="https://book.flutterchina.club/preface.html#%E7%AC%AC%E4%BA%8C%E7%89%88%E5%8F%98%E5%8C%96">Flutter实战·第二版</a>中的相关文档。</p>
<p>这里主要是整理自己Mac电脑上的相关配置，便于后期的查阅。</p>
<blockquote>
<p>1.下载以下安装包来获取最新的 stable Flutter SDK：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://flutter.cn/docs/get-started/install/macos</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.配置环境变量</p>
</blockquote>
<p>打开终端输入<code>open $HOME</code>,找到<code>.bash_profile</code>文件并打开。</p>
<p>然后将下方配置加入进去，其中<code>/Users/zhouwei/Documents/flutter/bin</code>为第一步下载的Flutter安装包的bin目录的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/Users/zhouwei/Documents/flutter/bin:$PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>没<a href="https://order.yizhihongxing.org/aff.php?aff=4651">VPN</a>可以配置Flutter官方为中国开发者搭建的临时镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加完后，在终端运行<code>source $HOME/.bash_profile</code>刷新当前终端窗口。</p>
<blockquote>
<p>3.运行<code>flutter doctor</code></p>
</blockquote>
<p>在终端运行<code>flutter doctor</code>看配置是否完成,出现下方提示则代表配置已完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhouwei@FYMacBook-Air ~ % flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, 2.7.6, on macOS 12.6 21G115 darwin-x64, locale</span><br><span class="line">    zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK version 33.0.2)</span><br><span class="line">[✓] Xcode - develop for iOS and macOS (Xcode 13.2)</span><br><span class="line">[✓] Chrome - develop for the web</span><br><span class="line">[✓] Android Studio (version 2022.1)</span><br><span class="line">[✓] VS Code (version 1.76.0)</span><br><span class="line">[✓] Connected device (2 available)</span><br><span class="line">[✓] HTTP Host Availability</span><br><span class="line"></span><br><span class="line">• No issues found!</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter全面屏适配</title>
    <url>/2022/05/23/Flutter%E5%85%A8%E9%9D%A2%E5%B1%8F%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>无论是安卓设备还是iOS设备，适配的要点主要是屏幕上方的安全区域和屏幕底部的安全区域。</p>
<p>对于已经使用<code>Scaffold</code>的<code>appBar</code>和<code>bottomNavigationBar</code>的页面不需要额外适配。<code>Scaffold</code>框架已经帮我们完成了这些适配工作。</p>
<h2 id="1-引入SafeArea"><a href="#1-引入SafeArea" class="headerlink" title="1.引入SafeArea"></a>1.引入<a href="https://api.flutter-io.cn/flutter/widgets/SafeArea-class.html">SafeArea</a></h2><p><code>SafeArea</code>是Flutter中适配全面屏的组件，采用<code>SafeArea</code>包裹页面可以解决全面屏手机的安全区域问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SafeArea(</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h2 id="2-借助MediaQuery"><a href="#2-借助MediaQuery" class="headerlink" title="2.借助MediaQuery"></a>2.借助<a href="https://api.flutter-io.cn/flutter/widgets/MediaQuery-class.html">MediaQuery</a></h2><p>可以借助<code>MediaQuery.of(context).padding</code>方法获取屏幕的安全区域即四个方向的<code>padding</code>，然后就可以更加灵活地进行布局。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// 获取当前的 padding 信息</span><br><span class="line">final EdgeInsets edgeInsets = MediaQuery.of(context).padding;</span><br></pre></td></tr></table></figure>


<h2 id="3-关于安卓"><a href="#3-关于安卓" class="headerlink" title="3.关于安卓"></a>3.关于安卓</h2><p>需要在<code>AndroidManifest.xml</code>文件中添加下方配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 添加 Android 可以适配的最大宽高比为 2.5 : 1 , 适配全面屏添加 --&gt;</span><br><span class="line"> &lt;meta-data</span><br><span class="line">     android:name=&quot;android.max_aspect&quot;</span><br><span class="line">     android:value=&quot;2.5&quot;/&gt;</span><br><span class="line">&lt;meta-data android:name=&quot;android.min_aspect&quot;</span><br><span class="line">    android:value=&quot;1.0&quot; /&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter如何适配鸿蒙Next系统并打HAP安装包</title>
    <url>/2023/11/16/Flutter%E5%A6%82%E4%BD%95%E9%80%82%E9%85%8D%E9%B8%BF%E8%92%99Next%E7%B3%BB%E7%BB%9F%E5%B9%B6%E6%89%93HAP%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>因最近有媒体报道后期鸿蒙Next系统不支持安卓应用的安装，虽然不清楚真假，但作为开发我们也需要为此做准备。</p>
<p>着手调研使用Flutter打适配鸿蒙Next的HAP包的技术方案后，通过分析和对比最后也确认了<a href="https://gitee.com/openharmony-sig">开源鸿蒙</a>定制<a href="https://gitee.com/openharmony-sig/flutter_flutter">Flutter</a>的方案，这种方案对于Flutter项目来说是一种开放成本最低的方式。</p>
<h2 id="安装适配鸿蒙系统的Flutter"><a href="#安装适配鸿蒙系统的Flutter" class="headerlink" title="安装适配鸿蒙系统的Flutter"></a>安装适配鸿蒙系统的Flutter</h2><p>关于Flutter的配置可以参考<a href="https://gitee.com/openharmony-sig/flutter_flutter">开源鸿蒙适配的Flutter</a>中的文档一步步进行配置。</p>
<p>配置成功后如下方所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhouwei@FYMacBook-Air ~ % flutter doctor -v</span><br><span class="line">[!] Flutter (Channel master, 3.7.12, on macOS 12.6.9 21G726 darwin-x64, locale zh-Hans-CN)</span><br><span class="line">    • Flutter version 3.7.12 on channel master at /Users/zhouwei/Desktop/hm_flutter</span><br><span class="line">    ! Upstream repository https://gitee.com/openharmony-sig/flutter_flutter.git is not a standard</span><br><span class="line">      remote.</span><br><span class="line">      Set environment variable <span class="string">&quot;FLUTTER_GIT_URL&quot;</span> to</span><br><span class="line">      https://gitee.com/openharmony-sig/flutter_flutter.git to dismiss this error.</span><br><span class="line">    • Framework revision 198162b99b (18 hours ago), 2023-11-23 12:38:27 +0000</span><br><span class="line">    • Engine revision 1a65d409c7</span><br><span class="line">    • Dart version 2.19.6</span><br><span class="line">    • DevTools version 2.20.1</span><br><span class="line">    • Pub download mirror https://pub.flutter-io.cn</span><br><span class="line">    • Flutter download mirror https://storage.flutter-io.cn</span><br><span class="line">    • If those were intentional, you can disregard the above warnings; however it is recommended</span><br><span class="line">      to use <span class="string">&quot;git&quot;</span> directly to perform update checks and upgrades.</span><br><span class="line"></span><br><span class="line">[✓] OpenHarmony toolchain - develop <span class="keyword">for</span> OpenHarmony devices</span><br><span class="line">    • OpenHarmony Sdk location: /Users/zhouwei/Documents/sdk, available api versions has [10]</span><br><span class="line">    • hdc version 1.3.0</span><br><span class="line">    • ohpm version 1.2.0</span><br><span class="line">    • signTool location:/Users/zhouwei/Documents/developtools_hapsigner/autosign</span><br><span class="line"></span><br><span class="line">[✓] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 33.0.2)</span><br><span class="line">    • Android SDK at /Users/zhouwei/Library/Android/sdk</span><br><span class="line">    • Platform android-33, build-tools 33.0.2</span><br><span class="line">    • ANDROID_HOME = /Users/zhouwei/Library/Android/sdk</span><br><span class="line">    • Java binary at: /Applications/Android Studio.app/Contents/jbr/Contents/Home/bin/java</span><br><span class="line">    • Java version OpenJDK Runtime Environment (build 11.0.15+0-b2043.56-8887301)</span><br><span class="line">    • All Android licenses accepted.</span><br><span class="line"></span><br><span class="line">[✓] Xcode - develop <span class="keyword">for</span> iOS and macOS (Xcode 14.2)</span><br><span class="line">    • Xcode at /Applications/Xcode.app/Contents/Developer</span><br><span class="line">    • Build 14C18</span><br><span class="line">    • CocoaPods version 1.11.3</span><br><span class="line"></span><br><span class="line">[✓] Chrome - develop <span class="keyword">for</span> the web</span><br><span class="line">    • Chrome at /Applications/Google Chrome.app/Contents/MacOS/Google Chrome</span><br><span class="line"></span><br><span class="line">[✓] Android Studio (version 2022.1)</span><br><span class="line">    • Android Studio at /Applications/Android Studio.app/Contents</span><br><span class="line">    • Flutter plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/9212-flutter</span><br><span class="line">    • Dart plugin can be installed from:</span><br><span class="line">      🔨 https://plugins.jetbrains.com/plugin/6351-dart</span><br><span class="line">    • Java version OpenJDK Runtime Environment (build 11.0.15+0-b2043.56-8887301)</span><br><span class="line"></span><br><span class="line">[✓] VS Code (version 1.82.0)</span><br><span class="line">    • VS Code at /Applications/Visual Studio Code.app/Contents</span><br><span class="line">    • Flutter extension version 3.70.0</span><br><span class="line"></span><br><span class="line">[✓] Connected device (2 available)</span><br><span class="line">    • macOS (desktop) • macos  • darwin-x64     • macOS 12.6.9 21G726 darwin-x64</span><br><span class="line">    • Chrome (web)    • chrome • web-javascript • Google Chrome 119.0.6045.159</span><br><span class="line"></span><br><span class="line">[✓] HTTP Host Availability</span><br><span class="line">    • All required HTTP hosts are available</span><br><span class="line"></span><br><span class="line">! Doctor found issues <span class="keyword">in</span> 1 category.</span><br></pre></td></tr></table></figure>

<h2 id="编译适配鸿蒙系统的Flutter-engine"><a href="#编译适配鸿蒙系统的Flutter-engine" class="headerlink" title="编译适配鸿蒙系统的Flutter engine"></a>编译适配鸿蒙系统的Flutter engine</h2><p>根据<a href="https://gitee.com/openharmony-sig/flutter_flutter">适配鸿蒙系统的Flutter版本</a>中的文档配置完后，打HAP包则需要指定<code>--local-engine</code>。</p>
<p>如果你发现在执行完<code>flutter doctor -v</code>命令后，在<code>flutter/bin/cache/artifacts/engine</code>目录下没有发现鸿蒙的<code>engine</code>的时候，需要我们手动编译<a href="https://gitee.com/openharmony-sig/flutter_engine">可构建支持在OpenHarmony设备上运行的flutter engine程序</a>。</p>
<p>同样我们可以查考<a href="https://gitee.com/openharmony-sig/flutter_engine">可构建支持在OpenHarmony设备上运行的flutter engine程序</a>中的文档进行编译。</p>
<p>需要注意的是我们在编译前需要下载<a href="https://storage.googleapis.com/chrome-infra/depot_tools.zip">depot_tools</a></p>
<p>我们可以使用下方命令进行下载（终端需要配置代理）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br></pre></td></tr></table></figure>

<p>所有一切都成功后便可编译HAP包安装到模拟器或手机(Next系统)手机。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/Flutter%E9%80%82%E9%85%8D%E9%B8%BF%E8%92%99Next/%E9%80%82%E9%85%8D%E9%B8%BF%E8%92%99%E7%9A%84Flutter%E9%A1%B9%E7%9B%AE.png" alt="适配鸿蒙Next的Flutter项目"></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://gitee.com/openharmony-sig/flutter_flutter">适配鸿蒙系统的Flutter版本</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_engine">可构建支持在OpenHarmony设备上运行的flutter engine程序</a></li>
<li><a href="https://tech.meituan.com/2021/01/22/flutter-in-harmonyos.html">让 Flutter 在鸿蒙系统上跑起来</a></li>
<li><a href="https://developer.huawei.com/consumer/cn/events/hdc2020/">HarmonyOS Developer</a></li>
<li><a href="https://developer.harmonyos.com/cn/documentation">HarmonyOS Documentation</a></li>
<li><a href="https://docs.flutter.dev/resources/architectural-overview">Flutter architectural overview</a></li>
<li><a href="https://github.com/flutter/flutter/wiki/Custom-Flutter-Engine-Embedders">定制Flutter引擎嵌入器</a></li>
<li><a href="https://developer.harmonyos.com/cn/docs/documentation/doc-guides-V3/device_template-0000001053702407-V3">DevEco Studio使用指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/657055957">Harmony 开始支持 Flutter ，聊聊 Harmony 和 Flutter 之间的因果</a></li>
<li><a href="https://juejin.cn/post/7281948788483489804">Flutter Love 鸿蒙</a></li>
<li><a href="https://github.com/flutter/flutter/wiki/Setting-up-the-Engine-development-environment">设置Engine开发环境</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter界面布局描述文档生成提示词</title>
    <url>/2025/08/11/Flutter%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80%E6%8F%8F%E8%BF%B0%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E6%8F%90%E7%A4%BA%E8%AF%8D/</url>
    <content><![CDATA[<p>根据前端生成页面的提示词整理了Flutter端界面布局描述的提示词。</p>
<p>将下方所有内容和UI设计稿提供给AI让其生成描述文档。</p>
<p>然后再将描述文档和UI设计稿提供给Ai让其使用flutter画布局，简单页面跟UI设计稿基本没太大区别。</p>
<p>复杂页面跟UI设计稿有出入，但整理架构不会变改改就能用。</p>
<blockquote>
<p>下方为提示词，可全部复制</p>
</blockquote>
<h1 id="Flutter界面布局描述文档生成提示词"><a href="#Flutter界面布局描述文档生成提示词" class="headerlink" title="Flutter界面布局描述文档生成提示词"></a>Flutter界面布局描述文档生成提示词</h1><p>请基于提供的页面截图，生成一个极其详细的Flutter界面布局描述文档，用于指导AI准确生成Flutter Widget代码。描述需要包含以下具体内容：</p>
<h2 id="1-整体页面架构"><a href="#1-整体页面架构" class="headerlink" title="1. 整体页面架构"></a>1. 整体页面架构</h2><h3 id="Scaffold结构"><a href="#Scaffold结构" class="headerlink" title="Scaffold结构"></a>Scaffold结构</h3><ul>
<li>AppBar配置（标题、背景色、elevation、leading&#x2F;actions按钮）</li>
<li>Body布局模式（Column、Row、Stack、ListView等主要容器Widget）</li>
<li>BottomNavigationBar或FloatingActionButton配置</li>
<li>Drawer或EndDrawer侧边栏设置</li>
</ul>
<h3 id="页面层次结构"><a href="#页面层次结构" class="headerlink" title="页面层次结构"></a>页面层次结构</h3><ul>
<li>主要区域划分和Widget嵌套层次</li>
<li>每个区域的相对位置、尺寸比例和间距（使用EdgeInsets、SizedBox等）</li>
<li>整体布局模式（垂直Column、水平Row、Stack层叠、Grid网格、ListView列表）</li>
</ul>
<h2 id="2-Widget层级和嵌套关系"><a href="#2-Widget层级和嵌套关系" class="headerlink" title="2. Widget层级和嵌套关系"></a>2. Widget层级和嵌套关系</h2><h3 id="容器Widget结构"><a href="#容器Widget结构" class="headerlink" title="容器Widget结构"></a>容器Widget结构</h3><ul>
<li>从Scaffold到具体UI元素的完整Widget树</li>
<li>Container、Padding、Margin的具体数值</li>
<li>Expanded、Flexible的flex比例设置</li>
<li>SafeArea、SingleChildScrollView等包装Widget</li>
</ul>
<h3 id="布局Widget配置"><a href="#布局Widget配置" class="headerlink" title="布局Widget配置"></a>布局Widget配置</h3><ul>
<li>Column&#x2F;Row的mainAxisAlignment和crossAxisAlignment</li>
<li>Stack的alignment和positioning</li>
<li>GridView的crossAxisCount和spacing</li>
<li>ListView的scrollDirection和itemBuilder</li>
</ul>
<h2 id="3-具体UI元素规格"><a href="#3-具体UI元素规格" class="headerlink" title="3. 具体UI元素规格"></a>3. 具体UI元素规格</h2><h3 id="文本组件（Text-Widget）"><a href="#文本组件（Text-Widget）" class="headerlink" title="文本组件（Text Widget）"></a>文本组件（Text Widget）</h3><ul>
<li>文字内容和TextStyle配置</li>
<li>fontSize、fontWeight、color的具体数值</li>
<li>textAlign、overflow、maxLines等属性</li>
<li>自定义字体family（如果使用）</li>
</ul>
<h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><ul>
<li>ElevatedButton、TextButton、OutlinedButton、IconButton的选择</li>
<li>ButtonStyle配置（backgroundColor、foregroundColor、elevation）</li>
<li>按钮尺寸（minimumSize、padding）</li>
<li>onPressed回调函数说明</li>
</ul>
<h3 id="输入组件"><a href="#输入组件" class="headerlink" title="输入组件"></a>输入组件</h3><ul>
<li>TextField&#x2F;TextFormField配置</li>
<li>InputDecoration（hintText、labelText、border、prefixIcon、suffixIcon）</li>
<li>TextEditingController和验证逻辑</li>
<li>keyboardType和textInputAction</li>
</ul>
<h3 id="图片和图标"><a href="#图片和图标" class="headerlink" title="图片和图标"></a>图片和图标</h3><ul>
<li>Image.asset、Image.network的路径和配置</li>
<li>Icon的IconData、size、color</li>
<li>fit、alignment等图片显示属性</li>
</ul>
<h3 id="卡片和容器"><a href="#卡片和容器" class="headerlink" title="卡片和容器"></a>卡片和容器</h3><ul>
<li>Card的elevation、margin、shape</li>
<li>Container的decoration（BoxDecoration配置）</li>
<li>背景色（Colors.xxx或Color(0xFFxxxxxx)）</li>
<li>边框样式（Border.all、BorderRadius.circular）</li>
<li>阴影效果（boxShadow配置）</li>
</ul>
<h3 id="列表和网格"><a href="#列表和网格" class="headerlink" title="列表和网格"></a>列表和网格</h3><ul>
<li>ListView.builder的itemCount和itemBuilder</li>
<li>GridView.count的crossAxisCount和children</li>
<li>ListTile的leading、title、subtitle、trailing</li>
<li>分隔线Divider的配置</li>
</ul>
<h2 id="4-主题和样式"><a href="#4-主题和样式" class="headerlink" title="4. 主题和样式"></a>4. 主题和样式</h2><h3 id="颜色方案"><a href="#颜色方案" class="headerlink" title="颜色方案"></a>颜色方案</h3><ul>
<li>主色调（primarySwatch、primaryColor）</li>
<li>强调色（accentColor、secondaryColor）</li>
<li>背景色（backgroundColor、scaffoldBackgroundColor）</li>
<li>具体颜色值（使用Colors.xxx或十六进制值）</li>
</ul>
<h3 id="尺寸规范"><a href="#尺寸规范" class="headerlink" title="尺寸规范"></a>尺寸规范</h3><ul>
<li>标准间距值（8.0、16.0、24.0、32.0等）</li>
<li>字体大小层级（12.0、14.0、16.0、18.0、24.0等）</li>
<li>组件高度（AppBar: 56.0、ListTile: 72.0等）</li>
<li>圆角半径（4.0、8.0、12.0、16.0等）</li>
</ul>
<h2 id="5-交互和状态"><a href="#5-交互和状态" class="headerlink" title="5. 交互和状态"></a>5. 交互和状态</h2><h3 id="手势处理"><a href="#手势处理" class="headerlink" title="手势处理"></a>手势处理</h3><ul>
<li>GestureDetector的onTap、onLongPress等</li>
<li>InkWell的点击效果配置</li>
<li>滑动手势（onPanUpdate、onSwipe等）</li>
</ul>
<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><ul>
<li>StatefulWidget的状态变量</li>
<li>setState调用时机</li>
<li>需要响应状态变化的Widget</li>
</ul>
<h2 id="6-响应式设计"><a href="#6-响应式设计" class="headerlink" title="6. 响应式设计"></a>6. 响应式设计</h2><h3 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h3><ul>
<li>MediaQuery.of(context).size的使用</li>
<li>不同屏幕尺寸下的布局调整</li>
<li>Orientation的横竖屏适配</li>
</ul>
<h3 id="约束和弹性布局"><a href="#约束和弹性布局" class="headerlink" title="约束和弹性布局"></a>约束和弹性布局</h3><ul>
<li>Expanded和Flexible的使用场景</li>
<li>AspectRatio的比例设置</li>
<li>LayoutBuilder的约束响应</li>
</ul>
<h2 id="描述要求"><a href="#描述要求" class="headerlink" title="描述要求"></a>描述要求</h2><p>描述要足够详细和准确，使得Flutter开发者仅凭文字描述就能完全还原界面设计，无需再次查看原图。请按照以下顺序组织内容：</p>
<ol>
<li><strong>从整体到局部</strong>：先描述Scaffold整体结构，再深入到具体Widget</li>
<li><strong>从外层到内层</strong>：按照Widget嵌套层次，从父容器到子组件</li>
<li><strong>从布局到样式</strong>：先确定组件位置和尺寸，再描述视觉样式</li>
<li><strong>从静态到动态</strong>：先描述静态UI，再说明交互行为</li>
</ol>
<h2 id="代码组织建议"><a href="#代码组织建议" class="headerlink" title="代码组织建议"></a>代码组织建议</h2><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul>
<li>主页面Widget类名和文件名</li>
<li>自定义Widget的拆分建议</li>
<li>常量和样式的单独文件管理</li>
</ul>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li>const构造函数的使用</li>
<li>Widget复用的建议</li>
<li>避免不必要的rebuild</li>
</ul>
<h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><ul>
<li>组件拆分的粒度建议</li>
<li>样式统一管理</li>
<li>硬编码值的常量化</li>
</ul>
<p>通过以上详细描述，开发者可以准确理解设计意图，并使用Flutter框架高效实现界面效果。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>GPUImage相应类库所实现的功能</title>
    <url>/2017/12/28/GPUImage%E7%9B%B8%E5%BA%94%E7%B1%BB%E5%BA%93%E6%89%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>关于<a href="https://github.com/BradLarson/GPUImage">GPUImage</a>:</p>
<p>GPUImage是一个基于GPU的图像、视频处理的iOS框架，支持很多种图像滤镜。当然，它目前还缺乏一些图像处理的高级功能，例如面部识别。</p>
<p>对于大规模并行操作（如处理图像或实时视频），GPU具有一些比CPU更显著的性能优势。在iPhone 4上，一个简单的图像滤镜在GPU上的执行速度可能比基于CPU的滤镜快100倍。</p>
<p>下方是<a href="https://github.com/BradLarson/GPUImage">GPUImage</a>的相应类库所实现的功能：</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/GPUImage%E7%9B%B8%E5%BA%94%E7%B1%BB%E5%BA%93%E6%89%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8A%9F%E8%83%BD/GPUImage.jpg" alt="GPUImage-01.jpg"></p>
<hr>
<p><a href="https://github.com/xnxy/iOS-Project-Examples/tree/master/LearningGPUImage">部分滤镜实现(会不定期更新)</a></p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://github.com/BradLarson/GPUImage">GPUImage</a></li>
<li><a href="https://www.cnblogs.com/XYQ-208910/p/5859683.html">iOS：GPUImage强大的图像处理框架</a></li>
<li><a href="http://www.superqq.com/blog/2015/08/24/avfoundation-gpuimage-find/">AVFoundation和 GPUImage初探</a></li>
<li><a href="http://www.cnblogs.com/salam/p/4981276.html">GPUImage简单滤镜使用（二）</a></li>
<li><a href="https://yq.aliyun.com/articles/55708">使用GPUImage实现视频滤镜</a></li>
<li><a href="http://www.cnblogs.com/salam/p/5125836.html">iOS二十种超酷时尚艺术滤镜汇总【附源码】</a></li>
</ul>
]]></content>
      <categories>
        <category>源码学习</category>
        <category>GPUImage</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>GPUImage</tag>
      </tags>
  </entry>
  <entry>
    <title>IPA签名检查-iOS15</title>
    <url>/2021/06/16/IPA%E7%AD%BE%E5%90%8D%E6%A3%80%E6%9F%A5-iOS15/</url>
    <content><![CDATA[<p>具体内容可以查看官方文档：<a href="https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format">Using the Latest Code Signature Format</a></p>
<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>从 iOS 14.2 beta 2 开始，系统会检查新的、更安全的签名格式。启动使用旧格式签名的应用程序的用户会收到警告，提示必须使用新格式重新签名该应用程序。在未来的版本中，新格式将成为强制性的，并且系统不会启动具有旧签名格式的应用程序。</p>
<p>所以对于开发来说，我们要检测自己打包的IPA的签名是否为新格式签名。</p>
<h2 id="打包机版本"><a href="#打包机版本" class="headerlink" title="打包机版本"></a>打包机版本</h2><p> 如果打包机的系统为macOS 10.14 或更高版本上打包的程序，理论上是没什么问题，不过为了保险起见，最好还是检测下打包的IPA包。</p>
<h2 id="检测IPA包是否需要重签名"><a href="#检测IPA包是否需要重签名" class="headerlink" title="检测IPA包是否需要重签名"></a>检测IPA包是否需要重签名</h2><p>在终端中执行下放命令，查找像CodeDirectory v&#x3D;20500这样的字符串。对于任何v小于20400的值，您需要重新签署您的应用程序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codesign -dv /path/to/MyApp.app</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format#Overview">Using the Latest Code Signature Format</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Instruments工具集</title>
    <url>/2018/01/02/Instruments%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
    <content><![CDATA[<h3 id="Blank"><a href="#Blank" class="headerlink" title="Blank"></a>Blank</h3><p>A blank trace document that can be customized with instruments from the Library.</p>
<h3 id="Activity-Monitor"><a href="#Activity-Monitor" class="headerlink" title="Activity Monitor"></a>Activity Monitor</h3><p>Monitors CPU, memory, disk,and network usage statistics for processes and the system.</p>
<h3 id="Allocations"><a href="#Allocations" class="headerlink" title="Allocations"></a>Allocations</h3><p>Tracks a process’ anonymous virtual memory and heap, providing class names and optionally retain&#x2F;release histories for objects.</p>
<h3 id="Cocoa-Layout"><a href="#Cocoa-Layout" class="headerlink" title="Cocoa Layout"></a>Cocoa Layout</h3><p>Observes changes to NSLayoutConstraint objects to help determine when and where a layout constraint went awry.</p>
<h3 id="Core-Animation"><a href="#Core-Animation" class="headerlink" title="Core Animation"></a>Core Animation</h3><p>This template measures application graphics performance as well as CPU usage of a process via time profiling.</p>
<h3 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h3><p>This template traces Core Data filesystem activity, including fetches,cache misses, and saves.</p>
<h3 id="Counters"><a href="#Counters" class="headerlink" title="Counters"></a>Counters</h3><p>Collects performance monitor counter(PMC) events using time or event based sampling methods.</p>
<h3 id="Energy-Log"><a href="#Energy-Log" class="headerlink" title="Energy Log"></a>Energy Log</h3><p>This template provides diagnostics regarding energy usage as well as basic on&#x2F;off state of major device components.</p>
<h3 id="File-Activity"><a href="#File-Activity" class="headerlink" title="File Activity"></a>File Activity</h3><p>This template monitors file and directory activity, including file open&#x2F;close calls, file permission modifications,directory creation, file moves,etc.</p>
<h3 id="Leaks"><a href="#Leaks" class="headerlink" title="Leaks"></a>Leaks</h3><p>Measures general memory usage,checks for leaked memory,and provides statistics on object allocations by class as well as memory address histories for all active allocations and leaked blocks.</p>
<h3 id="Metal-System-Trace"><a href="#Metal-System-Trace" class="headerlink" title="Metal System Trace"></a>Metal System Trace</h3><p>Metal System Trace profiles the performance of iOS,tvOS and macOS  Metal applications by providing tracing information from the application,driver,and GPU layers.</p>
<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>Analyze how your applications are using TCP&#x2F;IP connections using the Connections instrument.</p>
<h3 id="SceneKit"><a href="#SceneKit" class="headerlink" title="SceneKit"></a>SceneKit</h3><p>Profiles an application’s use of SceneKit.Determines the type of work going into each frame, such as animations, physics,scene culling,and rendering.</p>
<h3 id="System-Trace"><a href="#System-Trace" class="headerlink" title="System Trace"></a>System Trace</h3><p>A comprehensive view of what’s happening in the operationg system. See how threads are being scheduled across CPUs and understand how system calls and virtual memory faults anr affectiong your application’s Performance.</p>
<h3 id="System-Usage"><a href="#System-Usage" class="headerlink" title="System Usage"></a>System Usage</h3><p>This template records I&#x2F;O system activity related to files, sockets,and shared memory for a single process launched via instruments, Inputs, outputs,duration,backtrace,calltree,etc.is provided for each call.</p>
<h3 id="Time-Profiler"><a href="#Time-Profiler" class="headerlink" title="Time Profiler"></a>Time Profiler</h3><p>Performs low-overhead time -based sampling of processes runing on the system’s CPUs.</p>
<h3 id="Zombies"><a href="#Zombies" class="headerlink" title="Zombies"></a>Zombies</h3><p>Measures general memory usage while focusing on the delection of over - released “zombie” objects. Also statistics on object allocations by class as well as memory address histories for all active allocations.</p>
]]></content>
      <categories>
        <category>iOS</category>
        <category>iOS性能调优</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM编译流程等相关知识整理</title>
    <url>/2020/10/07/LLVM%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E7%AD%89%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>整理这篇博客主要是了解iOS编译的过程，了解其相关知识，丰富自己的知识体系。</p>
<p>在写这篇博客之前查看了<a href="https://ke.qq.com/mobilev2/courseDetail.html?_bid=167&_wv=3&course_id=322016&from=share#from=iosapp">李明杰在腾讯课堂的关于LLVM的付费课程</a>,<a href="http://www.hzcourse.com/web/teachRes/detail/4635/231">《LLVM编译器实战教程》</a>相关书籍，还有网络上一些博客，在此向他们致敬！</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/LLVM%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/LLVM.png" alt="LLVM"></p>
<h2 id="什么是LLVM"><a href="#什么是LLVM" class="headerlink" title="什么是LLVM"></a>什么是LLVM</h2><p><code>LLVM</code>项目是模块化、可重用的<code>编译器</code>以及<code>工具链</code>技术的集合。</p>
<p><code>LLVM</code>跟传统的静态编译器一样使用了经典三段式的结构设计，如下图所示，分别为前端、优化器和后端。</p>
<blockquote>
<p>传统编译器架构</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/LLVM%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/LLVM%E6%9E%B6%E6%9E%84.jpg" alt="传统编译器架构"></p>
<ul>
<li><code>Frontend（编译器前端）</code>：进行词法分析、语法分析、语义分析、生成中间代码<code>（IR）</code>。</li>
<li><code>Optimizer（优化器）</code>：中间代码优化。</li>
<li><code>Backend（后端）</code>:生成机器码</li>
</ul>
<p><code>LLVM</code>编译器如这篇文章的头图所示。这样做的优点如下：</p>
<ul>
<li>如果需要支持一种新的编程语言，只需要实现一种新的编译器前端即可。</li>
<li>如果需要支持一种新的硬件设备，只需要实现一个新的后端即可。</li>
<li>优化阶段是一个通用的阶段，它针对的是统一的<code>LLVM IR</code>,不论是支持新的编程语言，还是支持新的硬件设备，都不需要对优化阶段进行修改。</li>
</ul>
<h2 id="什么是Clang"><a href="#什么是Clang" class="headerlink" title="什么是Clang"></a>什么是Clang</h2><p><code>Clang</code>是<code>LLVM项目</code>的一个<code>子项目</code>，是基于<code>LLVM</code>架构的<code>C/C++/Objective-C</code>编译器<code>前端</code>。</p>
<h2 id="Clang常用指令"><a href="#Clang常用指令" class="headerlink" title="Clang常用指令"></a><code>Clang</code>常用指令</h2><p><code>Clang</code>工具可以再<code>Xcode</code>中查看，具体路径为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang</span><br></pre></td></tr></table></figure>
<p>可以再终端输入<code>Clang -help</code>查看所有指令。</p>
<p>常用的指令如下所示：</p>
<ul>
<li>生成可执行文件:<code>clang main.o -o main</code></li>
<li>查看编译过程：<code>clang -ccc-print-phases main.m</code></li>
<li>查看预处理结果：<code>clang -E main.m</code></li>
<li>语法分析,生成Token:<code>clang -fmodules -E -Xclang -dump-tokens main.m</code></li>
<li>生成语法树(AST):<code>clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</code></li>
<li>LLVM中间表示层(LLVM IR)：<code>clang -S -fobjc-arc -emit-llvm main.m -o main.ll</code></li>
<li>生成汇编：<code>clang -S -fobjc-arc main.m -o main.s</code></li>
<li>生成目标文件：<code>clang -fmodules -c main.m -o main.o</code></li>
</ul>
<h2 id="swiftc常用指令"><a href="#swiftc常用指令" class="headerlink" title="swiftc常用指令"></a><code>swiftc</code>常用指令</h2><p><code>swiftc</code>工具可以在<code>Xcode</code>中查看,具体路径为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc</span><br></pre></td></tr></table></figure>
<p>可以在终端输入<code>swiftc -help </code>查看相关指令。</p>
<p>常用的指令如下所示：</p>
<ul>
<li>生成可执行文件:<code>swiftc -o main.out main.swift</code></li>
<li>生成抽象语法树（AST）:<code>swiftc main.swift -dump-ast</code></li>
<li>生成中间语言(SIL)：<code>swiftc main.swift -emit-sil</code></li>
<li>LLVM中间表示层(LLVM IR)：<code>swiftc main.swift -emit -ir</code></li>
<li>生成汇编:<code>swiftc main.swift -emit-assembly</code></li>
</ul>
<h2 id="App编译过程"><a href="#App编译过程" class="headerlink" title="App编译过程"></a>App编译过程</h2><ol>
<li>编译信息写入辅助文件，创建文件架构 .app 文件</li>
<li>处理文件打包信息</li>
<li>执行 CocoaPod 编译前脚本，checkPods Manifest.lock</li>
<li>编译.m文件，使用 CompileC 和 clang 命令</li>
<li>链接需要的 Framework</li>
<li>编译 xib</li>
<li>拷贝 xib ，资源文件</li>
<li>编译 ImageAssets</li>
<li>处理 info.plist</li>
<li>执行 CocoaPod 脚本</li>
<li>拷贝标准库</li>
<li>创建 .app 文件和签名</li>
</ol>
<h2 id="Swift语言编译过程"><a href="#Swift语言编译过程" class="headerlink" title="Swift语言编译过程"></a>Swift语言编译过程</h2><p>Swift编译前端使用的是<code>swiftc</code>,其中<code>Swift</code>前端会多出<code>SIL optimizer</code>，它会将<code>*.swift</code>生成的中间代码<code>*.sil</code>设置成<code>High-Level IR</code>。</p>
<p>因为<code>swift</code>在编译时就完成了方法绑定直接通过地址调用，属于强类型语言。方法调用也不像OC那样进行消息转发，这样编译就可以获得更多的信息用在后端的优化上。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/LLVM%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/Swift%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.jpg" alt="Swift编译过程"></p>
<h2 id="关于LinkMap"><a href="#关于LinkMap" class="headerlink" title="关于LinkMap"></a>关于<code>LinkMap</code></h2><p><code>Link Map File</code>其实就是链接的映射文件，它是在Xcode生成可执行文件的同时生成的链接信息文件，用于描述可执行文件的构造部分，包含了代码段和数据段的分布情况。</p>
<blockquote>
<p>Object files</p>
</blockquote>
<p>这个部分的内容都是 .m 文件编译后的 .o 和需要 link 的 .a 文件。前面是文件编号，后面是文件路径。</p>
<blockquote>
<p>Sections</p>
</blockquote>
<p>这里描述的是每个 Section在可执行文件中的位置和大小。每个 Section 的 Segment 的类型分为<code>__TEXT</code>代码段和<code> __DATA</code> 数据段两种。</p>
<blockquote>
<p>Symbols</p>
</blockquote>
<p><code>Symbols</code>是对<code>Sections</code>进行了再划分。这里会描述所有的<code>methods</code>，<code>ivar</code>和字符串，及它们对应的地址，大小，文件编号信息。</p>
<h2 id="关于符号表dSYM"><a href="#关于符号表dSYM" class="headerlink" title="关于符号表dSYM"></a>关于符号表<code>dSYM</code></h2><p>符号表是内存地址与函数名、文件名、行号的映射表。符号表的元素如下所示：</p>
<p><code>&lt;起始地址&gt;&lt;结束地址&gt;&lt;函数&gt;[&lt;文件名：行号&gt;]</code></p>
<p>一般打包完成后会保存符号表文件，后期可以通过<code>堆栈</code>进行解析和还原，来定位用户APP发生<code>Crash</code>的代码位置。</p>
<blockquote>
<p>可以参考<a href="https://bugly.qq.com/docs/user-guide/symbol-configuration-ios/?v=20180119105842">Bugly相关文档</a></p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://llvm.org/">LLVM官网</a></li>
<li><a href="http://clang.llvm.org/">Clang官网</a></li>
<li><a href="http://www.hzcourse.com/web/teachRes/detail/4635/231">《LLVM编译器实战教程》</a></li>
<li><a href="https://llvm.comptechs.cn/">LLVM中文网</a></li>
<li><a href="https://developer.aliyun.com/article/727296">带你读《LLVM编译器实战教程》之一：构建和安装LLVM</a></li>
<li><a href="https://developer.aliyun.com/article/727298">带你读《LLVM编译器实战教程》之二：外部项目</a></li>
<li><a href="https://developer.aliyun.com/article/727299">带你读《LLVM编译器实战教程》之三：工具和设计</a></li>
<li><a href="https://releases.llvm.org/">llvm</a></li>
<li><a href="https://blog.csdn.net/snsn1984/category_9263298.html">深入研究Clang</a></li>
<li><a href="https://www.oschina.net/p/llvm?hmsr=aladdin1e1">LLVM编译器架构</a></li>
<li><a href="https://www.jianshu.com/p/9fc7776cce9b">深入剖析iOS编译Clang&#x2F;LLVM</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac15及以上系统如何创建CSR</title>
    <url>/2024/11/28/Mac15%E5%8F%8A%E4%BB%A5%E4%B8%8A%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BACSR/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近为了适配Xcode16和iOS18，将公司的一台备用机升级到了<code>macOS Sequoia``(版本15.1.1)</code>,发现在<code>其他</code>和<code>应用程序</code>目录下没发现钥匙串的程序。</p>
<p>于是查找了开发者中心的文档找出对应的方法，并记录下来，便于以后查阅。</p>
<h2 id="使用命令行创建"><a href="#使用命令行创建" class="headerlink" title="使用命令行创建"></a>使用命令行创建</h2><p>可以根据<a href="https://developer-rno.apple.com/cn/help/account/create-certificates/create-a-certificate-signing-request">创建证书签名请求</a>中的文档使用命令行创建证书。请将所有个人信息替换为自己的信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out ALDencryption.key 3072</span><br><span class="line">openssl req -new -key ALDencryption.key -out csr3072ALDEncrypt.certSigningRequest -subj &quot;/emailAddress=example@example.com, CN=Example Name, C=IE&quot;</span><br><span class="line">openssl genrsa -out ALDsigning.key 3072</span><br><span class="line">openssl req -new -key ALDsigning.key -out csr3072ALDSigning.certSigningRequest -subj &quot;/emailAddress=example@example.com, CN=Example Name, C=IE&quot;</span><br></pre></td></tr></table></figure>

<h2 id="查找苹果未删除的证书助理"><a href="#查找苹果未删除的证书助理" class="headerlink" title="查找苹果未删除的证书助理"></a>查找苹果未删除的<code>证书助理</code></h2><p>虽然在<code>其他</code>和<code>应用程序</code>中找不到了钥匙串，但<code>证书助理</code>目前还在系统的<code>CoreServices</code>中，可以使用终端打开对应的目录查找。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open /System/Library/CoreServices/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>具体目录</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/System/Library/CoreServices/Certificate\ Assistant.app </span><br></pre></td></tr></table></figure>


<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer-rno.apple.com/cn/help/account/create-certificates/create-a-certificate-signing-request">创建证书签名请求</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS Sequoia15.3系统的钥匙串位置</title>
    <url>/2025/02/06/MacOS%20Sequoia15.3%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%92%A5%E5%8C%99%E4%B8%B2%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>系统升级到<code>MacOS Sequoia15.3</code>后发现<code>钥匙串</code>工具没在启动台显示，于是找了下发现挪到了系统的<code>CoreServices</code>中，特此记录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/System/Library/CoreServices</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>OPPO新规，24年11月20日创建的应用发送消息必携带新消息分类字段</title>
    <url>/2024/11/26/OPPO%E6%96%B0%E8%A7%84%EF%BC%8C24%E5%B9%B411%E6%9C%8820%E6%97%A5%E5%88%9B%E5%BB%BA%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E5%BF%85%E6%90%BA%E5%B8%A6%E6%96%B0%E6%B6%88%E6%81%AF%E5%88%86%E7%B1%BB%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p>近日收到友盟的消息提醒，根据OPPO最新的公告，<code>11月20日后新接入的应用必须携带新消息分类字段，否则无法成功下发离线消息</code>。</p>
<p>公告地址：<a href="https://open.oppomobile.com/new/developmentDoc/info?id=13189">https://open.oppomobile.com/new/developmentDoc/info?id=13189</a></p>
<blockquote>
<p>1.OPPO后台开通新通道权限</p>
</blockquote>
<p>进入到消息发送平台后点击配置管理→通道配置，点击页面中新通道权限开关。</p>
<p><img src="https://openfs.oppomobile.com/open/oop/202411/07/cd46b2bea181013f1f7671f7c1dc78a5.png" alt="权限开启"></p>
<blockquote>
<p>2.友盟后台配置</p>
</blockquote>
<p>2024年11月20日后创建的应用需要在友盟后台添加OPPO通道类别名和OPPO通知栏提醒等级。</p>
<p>具体可以参考<a href="https://developer.umeng.com/docs/67966/detail/98589">厂商通道集成文档</a></p>
<p><img src="https://img.alicdn.com/imgextra/i1/O1CN01xZDygd1EcQLiyTtmw_!!6000000000372-2-tps-1358-840.png" alt="友盟后台配置"></p>
<blockquote>
<p>3.API发送消息请求时添加字段</p>
</blockquote>
<p>API发送请每条都带新消息分类，仅涉及到在当前的API里新增2个字段（category（必填）、notify_level（选填））。</p>
<p><img src="https://img.alicdn.com/imgextra/i3/O1CN018fx7Qj1sXSgqFldP3_!!6000000005776-2-tps-1362-704.png" alt="消息分类"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.umeng.com/docs/67966/detail/98589">厂商通道集成文档</a></li>
<li><a href="https://developer.umeng.com/docs/67966/detail/68343">友盟推送-API文档</a></li>
<li><a href="https://open.oppomobile.com/new/developmentDoc/info?id=13189">OPUSH消息分类细则</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>Podfile语法参考(翻译)</title>
    <url>/2019/08/29/Podfile%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83(%E7%BF%BB%E8%AF%91)/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#Podfile">Podfile</a></li>
<li><a href="#%E6%A0%B9%E9%80%89%E9%A1%B9">根选项</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB">依赖关系</a></li>
<li><a href="#%E7%9B%AE%E6%A0%87%E9%85%8D%E7%BD%AE">目标配置</a></li>
<li><a href="#%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4">工作空间</a></li>
<li><a href="#%E6%BA%90">源</a></li>
<li><a href="#%E9%92%A9%E5%AD%90">钩子</a></li>
</ul>
<h3 id="Podfile"><a href="#Podfile" class="headerlink" title="Podfile"></a>Podfile</h3><p>Podfile是描述一个或多个Xcode项目的目标的依赖关系的规范。</p>
<p>Podfile可以非常简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;MyApp&#x27;</span><br><span class="line">pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;</span><br></pre></td></tr></table></figure>

<p>一个更复杂的Podfile的示例可以是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line">target &#x27;MyApp&#x27; do</span><br><span class="line">  pod &#x27;ObjectiveSugar&#x27;, &#x27;~&gt; 0.5&#x27;</span><br><span class="line"></span><br><span class="line">  target &#x27;MyAppTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    pod &#x27;OCMock&#x27;, &#x27;~&gt; 2.0.1&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">post_install do |installer|</span><br><span class="line">  installer.pods_project.targets.each do |target|</span><br><span class="line">    puts &quot;#&#123;target.name&#125;&quot;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="根选项"><a href="#根选项" class="headerlink" title="根选项"></a>根选项</h3><p>适用于整个Podfile的配置。</p>
<ul>
<li>install! 声明安装过程中要使用的安装方法和选项。</li>
</ul>
<h4 id="install"><a href="#install" class="headerlink" title="install!"></a>install!</h4><p>指定CocoaPods安装此Podfile时要使用的安装方法和选项。</p>
<p>第一个参数代表要使用的安装方法。下一个参数代表安装选项。</p>
<p>目前，唯一可接受的安装方法是<code>cocoapods</code>，因此您将始终使用该值作为第一个参数；但是将来的版本中可能会提供更多安装方法。</p>
<p>例如：</p>
<blockquote>
<p>指定自定义CocoaPods安装选项</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">install! &#x27;cocoapods&#x27;,</span><br><span class="line">         :deterministic_uuids =&gt; false,</span><br><span class="line">         :integrate_targets =&gt; false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>支持的Keys：</p>
</blockquote>
<p><code>:clean</code></p>
<p>在安装过程中是否清洁pod源</p>
<p>清除将删除podspec指定的pod中未使用的任何文件以及项目支持的平台。</p>
<p>此选项默认为true。</p>
<hr>
<p><code>:deduplicate_targets</code></p>
<p>是否对Pod进行重复数据删除</p>
<p>删除重复数据为pod添加后缀，以防止多个不同要求的<code>Target</code>中包含pod的情况。例如，名为<code>MyPod</code>子模块为<code>SubA</code>的容器包含在两个<code>target</code>中，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;MyTargetA&#x27; do</span><br><span class="line">  pod &#x27;MyPod/SubA&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &#x27;MyTargetB&#x27; do</span><br><span class="line">  pod &#x27;MyPod&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>将产生两个Pod：MyPod和MyPod-SubA</p>
<p>此选项默认为true。</p>
<hr>
<p><code>:deterministic_uuids</code></p>
<p>创建Pods项目时是否生成确定性UUID</p>
<p>此选项默认为true。</p>
<hr>
<p><code>:integrate_targets</code></p>
<p>是否将已安装的pod集成到用户项目中</p>
<p>如果设置为false，Pod将被下载并安装到Pods&#x2F;目录中，但不会集成到您的项目中。</p>
<p>此选项默认为true。</p>
<hr>
<p><code>:lock_pod_sources</code></p>
<p>是否锁定Pod的源文件。尝试修改文件内容时，Xcode会提示解锁文件</p>
<p>在安装过程中锁定pod的源文件会降低性能。这样会严重影响pod install项目的耗时，可以尝试将其设置为false</p>
<p>此选项默认为true。</p>
<hr>
<p><code>:warn_for_multiple_pod_sources</code></p>
<p>当多个库包含名称和版本相同的Pod时，是否发出警告</p>
<p>此选项默认为true。</p>
<hr>
<p><code>:share_schemes_for_development_pods</code></p>
<p>是否共享开发pods的Xcode方案(Schemes)。</p>
<p>开发pods的方案（Schemes）是自动创建的，但默认情况下不共享。</p>
<p>此选项默认为false。</p>
<hr>
<p><code>:disable_input_output_paths</code></p>
<p>是否禁用CocoaPods脚本阶段的输入和输出路径（复制框架和复制资源）</p>
<p>此选项默认为false。</p>
<hr>
<p><code>:preserve_pod_file_structure</code></p>
<p>是否保留所有Pod的文件结构，包括外部来源的Pod。</p>
<p>默认情况下，仅为开发Pod保留Pod源的文件结构。设置 <code>:preserve_pod_file_structure</code>为true将保留文件结构。</p>
<p>此选项默认为false。</p>
<hr>
<p><code>:generate_multiple_pod_projects</code></p>
<p>是否为每个pod目标生成一个项目。而不是创建一个豆荚。xcodeproj，此选项将为嵌套在下方的pod目标生成一个项目Pods.xcodeproj。</p>
<p>此选项默认为false。</p>
<hr>
<p><code>:incremental_installation</code></p>
<p>是否仅启用自上次安装以来已更改的项目及其关联工程。</p>
<p>此选项默认为false。</p>
<hr>
<p><code>:skip_pods_project_generation</code></p>
<p>是否跳过生成Pods.xcodeproj，仅执行依赖关系的解析和下载。</p>
<p>此选项默认为false。</p>
<hr>
<h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>Podfile指定每个工程目标的依赖关系。</p>
<ul>
<li><code>pod</code>是声明特定依赖项的方法。</li>
<li><code>podspec</code>提供了一个用于创建podspec的简单API。</li>
<li><code>target</code>是如何将依赖关系范围限定到Xcode项目中的特定工程目标中。</li>
</ul>
<h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><p>指定项目的依赖项。</p>
<p>依赖项需求由Pod的名称和版本需求列表(可选)定义。</p>
<p>当你开始一个项目的时候，你很可能会想使用一个Pod的最新版本。如果是这种情况，只需要省略版本号要求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;</span><br></pre></td></tr></table></figure>

<p>在老项目中，您可能需要指定仓库的特定版本，在这种情况下，您可以指定该仓库的版本号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;Objection&#x27;, &#x27;0.9&#x27;</span><br></pre></td></tr></table></figure>

<p>除了没有版本号或指定特定版本外，你还可以使用运算符：</p>
<ul>
<li><code>= 0.1</code>版本0.1。</li>
<li><code>&gt; 0.1</code>任何高于0.1的版本。</li>
<li><code>&gt;= 0.1</code>版本0.1和更高版本。</li>
<li><code>&lt; 0.1</code>任何低于0.1的版本。</li>
<li><code>&lt;= 0.1</code>版本0.1和更低版本。</li>
<li><code>~&gt; 0.1.2</code>版本0.1.2和不超过0.2的版本（不包括0.2）。该运算符基于您在版本要求中指定的最后一个组件而工作。该示例等于与<code>&gt;= 0.1.2</code>组合，<code>&lt;0.2.0</code>并且将始终匹配符合您要求的最新已知版本。</li>
<li><code>~&gt; 0.1.3-beta.0Beta</code>代表0.1.3的发行版本，除0.2以外的发行版本最高为0.2。用破折号（-）分隔的组件将不考虑版本要求。</li>
</ul>
<p>可以指定特定的版本号，以便于进行更精细的控制。</p>
<p>有关版本控制策略的更多信息，请参见：</p>
<ul>
<li>语义版本控制</li>
<li>RubyGems版本控制政策</li>
</ul>
<blockquote>
<p>构建配置</p>
</blockquote>
<p>默认情况下，依赖关系安装在目标的所有构建配置中。出于调试目的或其他原因，只能在构建配置列表中启用它们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;PonyDebugger&#x27;, :configurations =&gt; [&#x27;Debug&#x27;, &#x27;Beta&#x27;]</span><br></pre></td></tr></table></figure>

<p>或者，您可以指定将其包含在单个构建配置中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;PonyDebugger&#x27;, :configuration =&gt; &#x27;Debug&#x27;</span><br></pre></td></tr></table></figure>

<p>请注意，所有配置中都包含了传递依赖项，如果不需要的时候，你必须手动为它们指定相应构建配置。</p>
<blockquote>
<p>模块化头（Modular Headers）</p>
</blockquote>
<p>如果要在每个Pod中使用模块化头，则可以使用以下语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;, :modular_headers =&gt; true</span><br></pre></td></tr></table></figure>

<p>此外，使用<code>use_modular_headers!</code>属性时，可以使用以下方法从模块化标头中排除特定Pod：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;, :modular_headers =&gt; false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>资源</p>
</blockquote>
<p>默认情况下，在全局级别指定的源将按照指定依赖项匹配的顺序进行搜索。这种行为可以改变为一个特定的依赖，通过指定的依赖源:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;PonyDebugger&#x27;, :source =&gt; &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br></pre></td></tr></table></figure>

<p>在这种情况下，将只搜索指定的源，以查找依赖项和任何被忽略的全局源。</p>
<blockquote>
<p>子模块</p>
</blockquote>
<p>通过其名称安装Pod时，它将安装podspec中定义的所有默认子模块。</p>
<p>您可以使用以下方法安装特定的子模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;QueryKit/Attribute&#x27;</span><br></pre></td></tr></table></figure>

<p>您可以指定要安装的子模块的集合，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;QueryKit&#x27;, :subspecs =&gt; [&#x27;Attribute&#x27;, &#x27;QuerySet&#x27;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试模块</p>
</blockquote>
<p>可以通过<code>:testspecs</code>选项选择包含测试规范。默认情况下，不包括Pod的任何测试规格。</p>
<p>您可以使用以下命令指定要安装的测试规范名称的列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :testspecs =&gt; [&#x27;UnitTests&#x27;, &#x27;SomeOtherTests&#x27;]</span><br></pre></td></tr></table></figure>

<p>提供的值<code>:testspecs</code>对应<code>test_spec</code>于<code>Podspec</code>中提供给 DSL属性的名称。</p>
<p>依赖关系也可以从外部来源获得。</p>
<blockquote>
<p>使用本地路径中的文件。</p>
</blockquote>
<p>如果您想与其他项目一起开发Pod，可以使用该path选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :path =&gt; &#x27;~/Documents/AFNetworking&#x27;</span><br></pre></td></tr></table></figure>


<p>使用此选项，CocoaPods将指定的文件夹作为为Pod的根目录，并在Pods项目中直接从那里链接文件。这意味着您所做的编辑将保留在CocoaPods安装中。</p>
<p>引用的文件夹可以是您最喜欢的SCM的签出，甚至可以是当前存储库的git子模块。</p>
<p>注意Pod文件的podspec应该在文件夹中。</p>
<blockquote>
<p>从库存储库根目录中的podspec中。</p>
</blockquote>
<p>有时您可能想使用Pod的最新版本。或特定版本。如果是这种情况，可以在pod声明中指定。</p>
<p>要使用<code>master</code>存储库的分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;</span><br></pre></td></tr></table></figure>

<p>要使用存储库的另一个分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;, :branch =&gt; &#x27;dev&#x27;</span><br></pre></td></tr></table></figure>

<p>要使用存储库的标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;, :tag =&gt; &#x27;0.7.0&#x27;</span><br></pre></td></tr></table></figure>

<p>或指定一个提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;AFNetworking&#x27;, :git =&gt; &#x27;https://github.com/gowalla/AFNetworking.git&#x27;, :commit =&gt; &#x27;082f8319af&#x27;</span><br></pre></td></tr></table></figure>

<p>但是，需要注意的是，这意味着该版本必须满足其他Pod对Pod的任何其他依赖。</p>
<p>podspec文件应该位于存储库的根目录中，如果这个库的存储库中还没有podspec文件，那么您必须使用下面小节中列出的方法之一。</p>
<blockquote>
<p>来自spec存储库之外的podspec，用于没有podspec的库。</p>
</blockquote>
<p>podspec可以从存储库之外的另一个源获得。例如，通过HTTP获得podspec:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;JSONKit&#x27;, :podspec =&gt; &#x27;https://example.com/JSONKit.podspec&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="podspec"><a href="#podspec" class="headerlink" title="podspec"></a>podspec</h4><p>只使用给定podspec文件中定义的Pod的依赖项。如果没有传递参数，则使用Podfile根目录中的第一个podspec。它的目的是供给库使用。注意:这并不包括来自podspec的源代码，只包括CocoaPods基础结构。</p>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>选项<code>Hash &#123;Symbol=&gt;String&#125;</code></p>
<p>加载{Specification}的路径。如果未提供，则使用Podfile目录中的第一个podspec。</p>
</blockquote>
<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">podspec</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">podspec :name =&gt; &#x27;QuickDialog&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">podspec :path =&gt; &#x27;/Documents/PrettyKit/PrettyKit.podspec&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p>定义CocoaPods 目标在给定块中定义的作用域依赖项。目标应与Xcode目标相对应。默认情况下，目标包含块外部定义的依赖项，除非指示不要继承他们！。</p>
<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>名称<code>Symbol, String</code></p>
<p>target名称。</p>
</blockquote>
<h5 id="例子：-1"><a href="#例子：-1" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>定义target</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;ZipApp&#x27; do</span><br><span class="line">  pod &#x27;SSZipArchive&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义从其父级访问SSZipArchive Pod的测试target</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;ZipApp&#x27; do</span><br><span class="line">  pod &#x27;SSZipArchive&#x27;</span><br><span class="line"></span><br><span class="line">  target &#x27;ZipAppTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    pod &#x27;Nimble&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义目标通过其父目标将Pod应用于多个target</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;ShowsApp&#x27; do</span><br><span class="line">  pod &#x27;ShowsKit&#x27;</span><br><span class="line"></span><br><span class="line">  # Has its own copy of ShowsKit + ShowTVAuth</span><br><span class="line">  target &#x27;ShowsTV&#x27; do</span><br><span class="line">    pod &#x27;ShowTVAuth&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  # Has its own copy of Specta + Expecta</span><br><span class="line">  # and has access to ShowsKit via the app</span><br><span class="line">  # that the test target is bundled into</span><br><span class="line"></span><br><span class="line">  target &#x27;ShowsTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    pod &#x27;Specta&#x27;</span><br><span class="line">    pod &#x27;Expecta&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="scpipt-phase"><a href="#scpipt-phase" class="headerlink" title="scpipt_phase"></a>scpipt_phase</h4><p>添加脚本阶段以与此目标集成。脚本阶段可用于执行任意脚本，该脚本可以在执行期间使用所有Xcode环境变量。一个目标可能包括多个脚本阶段，它们将按照声明的顺序添加。如果先前已添加脚本阶段，则将其有效地从目标中删除。</p>
<h5 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>选项<code>Hash</code></p>
<p>此脚本阶段的选项。</p>
</blockquote>
<h5 id="例子：-2"><a href="#例子：-2" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script_phase :name =&gt; &#x27;HelloWorldScript&#x27;, :script =&gt; &#x27;echo &quot;Hello World&quot;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script_phase :name =&gt; &#x27;HelloWorldScript&#x27;, :script =&gt; &#x27;puts &quot;Hello World&quot;&#x27;, :shell_path =&gt; &#x27;/usr/bin/ruby&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="abstract-target"><a href="#abstract-target" class="headerlink" title="abstract_target"></a>abstract_target</h4><p>定义一个新的抽象目标，可用于方便目标依赖关系的继承。</p>
<h5 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>名称<code>Symbol, String</code></p>
<p>目标名称。</p>
</blockquote>
<h5 id="例子：-3"><a href="#例子：-3" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>定义抽象目标</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abstract_target &#x27;Networking&#x27; do</span><br><span class="line">  pod &#x27;AlamoFire&#x27;</span><br><span class="line"></span><br><span class="line">  target &#x27;Networking App 1&#x27;</span><br><span class="line">  target &#x27;Networking App 2&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>定义将abstract_target包装Pod到多个目标</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Note: There are no targets called &quot;Shows&quot; in any of this workspace&#x27;s Xcode projects</span><br><span class="line">abstract_target &#x27;Shows&#x27; do</span><br><span class="line">  pod &#x27;ShowsKit&#x27;</span><br><span class="line"></span><br><span class="line">  # The target ShowsiOS has its own copy of ShowsKit (inherited) + ShowWebAuth (added here)</span><br><span class="line">  target &#x27;ShowsiOS&#x27; do</span><br><span class="line">    pod &#x27;ShowWebAuth&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  # The target ShowsTV has its own copy of ShowsKit (inherited) + ShowTVAuth (added here)</span><br><span class="line">  target &#x27;ShowsTV&#x27; do</span><br><span class="line">    pod &#x27;ShowTVAuth&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  # Our tests target has its own copy of</span><br><span class="line">  # our testing frameworks, and has access</span><br><span class="line">  # to ShowsKit as well because it is</span><br><span class="line">  # a child of the abstract target &#x27;Shows&#x27;</span><br><span class="line"></span><br><span class="line">  target &#x27;ShowsTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">    pod &#x27;Specta&#x27;</span><br><span class="line">    pod &#x27;Expecta&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract!"></a>abstract!</h4><p>表示当前目标是抽象的，因此不会直接链接到Xcode target。</p>
<h4 id="inherit"><a href="#inherit" class="headerlink" title="inherit!"></a>inherit!</h4><p>设置当前target的继承模式。</p>
<h5 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>继承<code>Symbol</code></p>
<p>要设置的继承模式。</p>
<p>可用模式： + <code>:complete</code>目标从父级继承所有行为。+ <code>:none</code>目标不会从父级继承任何行为。+ <code>:search_paths</code>目标仅继承父级的搜索路径。</p>
</blockquote>
<h5 id="例子：-4"><a href="#例子：-4" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>仅继承搜索路径</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;App&#x27; do</span><br><span class="line">  target &#x27;AppTests&#x27; do</span><br><span class="line">    inherit! :search_paths</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="目标配置"><a href="#目标配置" class="headerlink" title="目标配置"></a>目标配置</h3><p>这些设置用于控制CocoaPods生成的项目。</p>
<p>首先，你只需说明你在哪个平台上工作。<code>xcodeproj</code>允许您特别声明要与哪个项目链接。</p>
<h4 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h4><p>指定应为其构建静态库的平台。</p>
<p>如果未指定CocoaPods，则提供默认部署目标。当前默认值适用4.3于iOS，10.6OS X，9.0tvOS和2.0watchOS。</p>
<p>如果部署目标需要它（iOS &lt; 4.3），armv6 则将体系结构添加到中ARCHS。</p>
<h5 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>名称<code>Symbol</code></p>
<p>平台名称可以是<code>:osx</code>for OS X, <code>:ios</code>for iOS, <code>:tvos</code>for tvOS, or<code>:watchos</code>for watchOS.</p>
</blockquote>
<blockquote>
<p>目标<code>String, Version</code></p>
<p>可选部署。如果未提供，则将根据平台名称分配默认值。</p>
</blockquote>
<h5 id="例子：-5"><a href="#例子：-5" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>指定平台</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">platform :ios, &#x27;4.0&#x27;</span><br><span class="line">platform :ios</span><br></pre></td></tr></table></figure>

<h4 id="project"><a href="#project" class="headerlink" title="project"></a>project</h4><p>指定包含Pods库链接target的Xcode项目。</p>
<hr>
<p>如果没有一个目标定义指定一个显式项目，并且与Podfile在同一目录中只有一个项目，则将使用该项目。</p>
<p>还可以指定是在发布版本还是在调试预设之后对自定义构建配置的构建设置进行建模。为此，您需要指定一个哈希，其中每个构建配置的名称都与<code>:release</code>或<code>:debug</code>关联。</p>
<h5 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>路径<code>String</code></p>
<p>要链接的项目的路径</p>
</blockquote>
<blockquote>
<p>build_configurations <code>Hash&#123;String =&gt; symbol&#125;</code></p>
<p>一个哈希表，其中键是Xcode项目中构建配置的名称，而值是指定配置应该基于<code>:debug</code>还是<code>:release</code>配置的符号。如果没有为项目中的配置指定显式映射，则默认为<code>:release</code>。</p>
</blockquote>
<h5 id="例子：-6"><a href="#例子：-6" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>指定用户项目</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This Target can be found in a Xcode project called `FastGPS`</span><br><span class="line">target &#x27;MyGPSApp&#x27; do</span><br><span class="line">  project &#x27;FastGPS&#x27;</span><br><span class="line">  ...</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># Same Podfile, multiple Xcodeprojects</span><br><span class="line">target &#x27;MyNotesApp&#x27; do</span><br><span class="line">  project &#x27;FastNotes&#x27;</span><br><span class="line">  ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用自定义构建配置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project &#x27;TestProject&#x27;, &#x27;Mac App Store&#x27; =&gt; :release, &#x27;Test&#x27; =&gt; :debug</span><br></pre></td></tr></table></figure>

<h4 id="xcodeproj"><a href="#xcodeproj" class="headerlink" title="xcodeproj"></a>xcodeproj</h4><p><code>xcodeproj</code>在<code>1.0</code>中已弃用，并已重命名为<code>project</code>。对于1.0之前的版本，请使用xcodeproj。</p>
<h4 id="link-with"><a href="#link-with" class="headerlink" title="link_with"></a>link_with</h4><p><code>link_with</code>在<code>1.0</code>中不推荐使用，<code>abstract_target</code>而是改为使用目标继承。</p>
<h4 id="inhibit-all-warnings"><a href="#inhibit-all-warnings" class="headerlink" title="inhibit_all_warnings!"></a>inhibit_all_warnings!</h4><p>禁止来自CocoaPods库的所有警告。</p>
<p>此属性由子目标定义继承。</p>
<p>如果要禁止每个Pod发出警告，则可以使用以下语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;, :inhibit_warnings =&gt; true</span><br></pre></td></tr></table></figure>

<p>此外，使用<code>inhibit_all_warnings!</code>属性时，可以使用以下方法将特定Pod排除在禁止之外：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;, :inhibit_warnings =&gt; false</span><br></pre></td></tr></table></figure>

<h4 id="use-modular-headers"><a href="#use-modular-headers" class="headerlink" title="use_modular_headers!"></a>use_modular_headers!</h4><p>对所有CocoaPods静态库使用模块化头。</p>
<p>此属性由子目标定义继承。</p>
<p>如果要在每个Pod中使用模块化头，则可以使用以下语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;, :modular_headers =&gt; true</span><br></pre></td></tr></table></figure>

<p>此外，使用<code>use_modular_headers!</code>属性时，可以使用以下方法从模块化标头中排除特定Pod：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;SSZipArchive&#x27;, :modular_headers =&gt; false</span><br></pre></td></tr></table></figure>

<h4 id="use-frameworks"><a href="#use-frameworks" class="headerlink" title="use_frameworks!"></a>use_frameworks!</h4><p>对Pods使用框架而不是静态库。使用框架时，您也可以指定:linkage 要使用的样式，:static或者:dynamic。</p>
<p>此属性由子目标定义继承。</p>
<h5 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>选项<code>Boolean, Hash</code></p>
<p>用于配置打包和链接样式的选项。</p>
</blockquote>
<h5 id="例子：-7"><a href="#例子：-7" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;MyApp&#x27; do</span><br><span class="line">  use_frameworks!</span><br><span class="line">  pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;MyApp&#x27; do</span><br><span class="line">  use_frameworks! :linkage =&gt; :dynamic</span><br><span class="line">  pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &#x27;ZipApp&#x27; do</span><br><span class="line">  use_frameworks! :linkage =&gt; :static</span><br><span class="line">  pod &#x27;SSZipArchive&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="supports-swift-versions"><a href="#supports-swift-versions" class="headerlink" title="supports_swift_versions"></a>supports_swift_versions</h4><p>指定此目标定义支持的Swift版本。</p>
<p>注意，这些需求是从父级继承的，如果指定了这些需求，并且在根级没有指定这些需求，那么所有版本都被认为是受支持的。</p>
<h5 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>要求<code>String, Version, Array, Array</code></p>
<p>此目标支持的需求集。</p>
</blockquote>
<h5 id="例子：-8"><a href="#例子：-8" class="headerlink" title="例子："></a>例子：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target &#x27;MyApp&#x27; do</span><br><span class="line">  supports_swift_versions &#x27;&gt;= 3.0&#x27;, &#x27;&lt; 4.0&#x27;</span><br><span class="line">  pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">supports_swift_versions &#x27;&gt;= 3.0&#x27;, &#x27;&lt; 4.0&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;MyApp&#x27; do</span><br><span class="line">  pod &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &#x27;ZipApp&#x27; do</span><br><span class="line">  pod &#x27;SSZipArchive&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="工作空间"><a href="#工作空间" class="headerlink" title="工作空间"></a>工作空间</h3><p>该模块列出了用于配置工作区域(Workspace)和设置全局设置的选项。</p>
<h4 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h4><p>指定应包含所有项目的Xcode工作空间(Workspace)。</p>
<p>如果未指定详细的Xcode工作空间（Workspace），并且只有一个项目与Podfile位于同级目录中，那么该项目的名称将用作工作空间的名称。</p>
<h5 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>路径<code>字符串</code></p>
<p>工作区的路径。</p>
</blockquote>
<h5 id="例子：-9"><a href="#例子：-9" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>指定工作空间</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workspace &#x27;MyWorkspace&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="generate-bridge-support"><a href="#generate-bridge-support" class="headerlink" title="generate_bridge_support!"></a>generate_bridge_support!</h4><p>指定一个BridgeSupport元数据文档应该从所有安装的Pods的头文件生成。</p>
<p>这适用于脚本语言，例如<code>MacRuby</code>， <code>Nu</code>和 <code>JSCocoa</code>，用它来桥接类型、功能等。</p>
<h4 id="set-arc-compatibility-flag"><a href="#set-arc-compatibility-flag" class="headerlink" title="set_arc_compatibility_flag!"></a>set_arc_compatibility_flag!</h4><p>指定-fobjc-arc标志应添加到中<code>OTHER_LD_FLAGS</code>。</p>
<p>这被用作非ARC项目编译器错误的解决方法（请参见#142）。这最初是自动完成的，但是从Xcode 4.3.2开始libtool似乎不再支持-fobjc arc标志。因此，现在必须使用此方法显式启用它。</p>
<p>在CocoaPods 1.0中可能不再支持这种方法。</p>
<h3 id="源"><a href="#源" class="headerlink" title="源"></a>源</h3><p>Podfile从指定的仓库来源（存储库）列表中检索仓库。</p>
<p>仓库来源是全局的，不会根据每个target去存储它。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>指定仓库的位置</p>
<p>使用此方法可以指定仓库的来源。来源的顺序是有影响的。CocoaPods将使用包括Pod在内的第一个来源的最高版本（不管其他仓库源是否有更高版本）。</p>
<p>官方的CocoaPods来源是隐式的。一旦指定了其他来源，则需要将其包括在内。</p>
<h5 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>源 <code>String</code></p>
<p>仓库存储的URL。</p>
</blockquote>
<h5 id="例子：-10"><a href="#例子：-10" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>指定首先使用Artsy存储库，然后再使用CocoaPods主存储库</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &#x27;https://github.com/artsy/Specs.git&#x27;</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><p>Podfile提供了在安装过程中提供的hook。</p>
<p>hook是<code>全局</code>的，不按目标定义存储。</p>
<h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件</p>
<p>指定安装期间应使用的插件。</p>
<p>使用此方法指定在安装期间应使用的插件，以及在调用插件时应传递给插件的选项。</p>
<h5 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h5><blockquote>
<p>名称<code>String</code></p>
<p>插件的名称。</p>
</blockquote>
<blockquote>
<p>选项<code>Hash</code></p>
<p>调用其挂钩时应传递给插件的可选选项。</p>
</blockquote>
<h5 id="例子：-11"><a href="#例子：-11" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>指定使用<code>slather</code>和<code>cocoapods-keys</code>插件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin &#x27;cocoapods-keys&#x27;, :keyring =&gt; &#x27;Eidolon&#x27;</span><br><span class="line">plugin &#x27;slather&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="pre-install"><a href="#pre-install" class="headerlink" title="pre_install"></a>pre_install</h4><p>预安装</p>
<p>此hook可让您在Pod下载之后,在安装之前对Pod进行任何更改。</p>
<p>它接收<code>Pod::Installer</code>作为唯一参数。</p>
<h5 id="例子：-12"><a href="#例子：-12" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>在Podfile中定义预安装挂钩(pre_install)。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pre_install do |installer|</span><br><span class="line">  # Do something fancy!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="post-install"><a href="#post-install" class="headerlink" title="post_install"></a>post_install</h4><p>通过此hook，您可以在将生成的Xcode项目写入磁盘之前，对其进行最后的更改，或者执行其他可能要执行的任务。</p>
<p>它接收<code>Pod::Installer</code>作为唯一参数。</p>
<h5 id="例子：-13"><a href="#例子：-13" class="headerlink" title="例子："></a>例子：</h5><blockquote>
<p>自定义所有targets的构建设置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_install do |installer|</span><br><span class="line">  installer.pods_project.targets.each do |target|</span><br><span class="line">    target.build_configurations.each do |config|</span><br><span class="line">      config.build_settings[&#x27;GCC_ENABLE_OBJC_GC&#x27;] = &#x27;supported&#x27;</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://guides.cocoapods.org/syntax/podfile.html">Podfile Syntax Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode多语言开发环境配置与使用完整指南</title>
    <url>/2025/09/11/VSCode%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="VSCode多语言开发环境配置与使用完整指南"><a href="#VSCode多语言开发环境配置与使用完整指南" class="headerlink" title="VSCode多语言开发环境配置与使用完整指南"></a>VSCode多语言开发环境配置与使用完整指南</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a></li>
<li><a href="#vscode%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE">VSCode基础配置</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">配置多语言开发环境</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a><ul>
<li><a href="#c_cpp_propertiesjson%E8%AF%A6%E8%A7%A3">c_cpp_properties.json详解</a></li>
<li><a href="#settingsjson%E9%85%8D%E7%BD%AE">settings.json配置</a></li>
<li><a href="#launchjson%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE">launch.json调试配置</a></li>
<li><a href="#tasksjson%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE">tasks.json任务配置</a></li>
</ul>
</li>
<li><a href="#%E5%90%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">各配置文件使用方法</a></li>
<li><a href="#%E8%B0%83%E8%AF%95%E5%92%8C%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE">调试和测试配置</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">常见问题和解决方案</a></li>
</ol>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在VSCode或其类似的Ai IDE中开发多语言项目(如Flutter插件)时，需要配置相应的环境，并正确配置各语言的编译器路径、头文件搜索路径、系统宏定义、框架路径等参数。</p>
<p>不然会导致编译器警告，然后触发TRAE之类Ai IDE循环修复问题，然后将代码改的乱七八糟，最后导致其摆烂的情况。</p>
<p>通过添加<code>c_cpp_properties.json</code>、<code>.vscode/settings.json</code>文件后，就可以使用VSCode进行多语言开发。比如直接开发iOS原生插件、Android原生插件，或者开发Flutter插件。</p>
<p>于是使用Ai整理了该篇文档，便于以后查阅。</p>
<p>本指南将详细介绍如何配置和使用Visual Studio Code多语言开发环境。我们将涵盖从基础环境搭建到高级配置的所有步骤，重点介绍VSCode的核心配置文件设置，包括<code>c_cpp_properties.json</code>、<code>.vscode/settings.json</code>、<code>.vscode/launch.json</code>和<code>.vscode/tasks.json</code>，支持Objective-C、Swift、Java、Kotlin、Dart等多种语言。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="必需软件"><a href="#必需软件" class="headerlink" title="必需软件"></a>必需软件</h3><ol>
<li><strong>Visual Studio Code</strong> - 代码编辑器</li>
<li><strong>Node.js</strong> (可选) - JavaScript运行环境</li>
<li><strong>Git</strong> - 版本控制系统</li>
<li><strong>Xcode</strong> (macOS) - Apple开发工具（用于Objective-C&#x2F;Swift）</li>
<li><strong>JDK</strong> - Java开发工具包</li>
<li><strong>Dart SDK</strong> - Dart开发工具包</li>
</ol>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装VSCode (从官网下载)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Node.js (从官网下载或使用包管理器)</span></span><br><span class="line"><span class="comment"># macOS: brew install node</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Git</span></span><br><span class="line"><span class="comment"># macOS: brew install git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Xcode (macOS)</span></span><br><span class="line"><span class="comment"># 从App Store安装Xcode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="comment"># macOS: 从Oracle官网下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Dart SDK</span></span><br><span class="line"><span class="comment"># macOS: 从dart.dev官网下载</span></span><br></pre></td></tr></table></figure>

<h2 id="VSCode基础配置"><a href="#VSCode基础配置" class="headerlink" title="VSCode基础配置"></a>VSCode基础配置</h2><h3 id="安装必要扩展"><a href="#安装必要扩展" class="headerlink" title="安装必要扩展"></a>安装必要扩展</h3><p>在VSCode中安装以下扩展以支持多语言开发：</p>
<ul>
<li>C&#x2F;C++</li>
<li>Objective-C++</li>
<li>Swift Development</li>
<li>Java Extension Pack</li>
<li>Kotlin</li>
<li>Dart</li>
<li>GitLens</li>
<li>Code Runner</li>
<li>Bracket Pair Colorizer</li>
<li>Auto Rename Tag</li>
<li>Path Intellisense</li>
</ul>
<h3 id="VSCode工作区配置"><a href="#VSCode工作区配置" class="headerlink" title="VSCode工作区配置"></a>VSCode工作区配置</h3><p>创建一个工作区来管理您的项目：</p>
<ol>
<li>打开VSCode</li>
<li>选择”File” &gt; “Add Folder to Workspace”</li>
<li>添加您的项目文件夹</li>
</ol>
<h2 id="配置多语言开发环境"><a href="#配置多语言开发环境" class="headerlink" title="配置多语言开发环境"></a>配置多语言开发环境</h2><h3 id="安装各语言扩展"><a href="#安装各语言扩展" class="headerlink" title="安装各语言扩展"></a>安装各语言扩展</h3><ol>
<li>在VSCode中打开扩展面板(Ctrl+Shift+X)</li>
<li>搜索并安装以下扩展：<ul>
<li>C&#x2F;C++ (Microsoft)</li>
<li>Objective-C++ (由相关开发者提供)</li>
<li>Swift Development (由相关开发者提供)</li>
<li>Java Extension Pack (Microsoft)</li>
<li>Kotlin (由相关开发者提供)</li>
<li>Dart (Dart Code)</li>
</ul>
</li>
</ol>
<h3 id="配置编译器路径"><a href="#配置编译器路径" class="headerlink" title="配置编译器路径"></a>配置编译器路径</h3><p>确保VSCode能正确识别系统编译器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># macOS (Xcode工具链)</span></span><br><span class="line"><span class="built_in">which</span> clang</span><br><span class="line"><span class="built_in">which</span> swift</span><br><span class="line"></span><br><span class="line"><span class="comment"># Java</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure>

<h2 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h2><h3 id="c-cpp-properties-json详解"><a href="#c-cpp-properties-json详解" class="headerlink" title="c_cpp_properties.json详解"></a>c_cpp_properties.json详解</h3><h4 id="文件作用"><a href="#文件作用" class="headerlink" title="文件作用"></a>文件作用</h4><p><code>c_cpp_properties.json</code>文件用于配置C&#x2F;C++扩展的IntelliSense引擎，提供代码智能提示、自动补全和语法检查功能，包括：</p>
<ul>
<li>头文件搜索路径</li>
<li>编译器路径</li>
<li>C&#x2F;C++标准版本</li>
<li>系统宏定义</li>
<li>Objective-C框架路径</li>
</ul>
<h4 id="生成c-cpp-properties-json"><a href="#生成c-cpp-properties-json" class="headerlink" title="生成c_cpp_properties.json"></a>生成c_cpp_properties.json</h4><p>在项目根目录创建<code>.vscode</code>文件夹，然后创建<code>c_cpp_properties.json</code>文件：</p>
<h5 id="macOS配置示例（支持Objective-C-x2F-Swift）："><a href="#macOS配置示例（支持Objective-C-x2F-Swift）：" class="headerlink" title="macOS配置示例（支持Objective-C&#x2F;Swift）："></a>macOS配置示例（支持Objective-C&#x2F;Swift）：</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mac&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/usr/local/include/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;__OBJC__&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;__IPHONE_OS_VERSION_MIN_REQUIRED=140000&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;macFrameworkPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;macos-clang-x64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><ol>
<li><strong>name</strong>: 配置名称，通常为操作系统名称</li>
<li><strong>includePath</strong>: 头文件搜索路径数组<ul>
<li><code>$&#123;workspaceFolder&#125;/**</code>: 工作区所有文件夹</li>
<li>系统或第三方库的头文件路径</li>
<li>iOS&#x2F;Mac SDK路径（macOS）</li>
</ul>
</li>
<li><strong>defines</strong>: 预处理器宏定义<ul>
<li><code>__OBJC__</code>: 标识Objective-C环境</li>
<li><code>__IPHONE_OS_VERSION_MIN_REQUIRED</code>: 最低iOS版本要求</li>
</ul>
</li>
<li><strong>macFrameworkPath</strong>: macOS&#x2F;iOS框架路径（仅macOS）</li>
<li><strong>compilerPath</strong>: 编译器路径</li>
<li><strong>cStandard&#x2F;cppStandard</strong>: C&#x2F;C++标准版本</li>
<li><strong>intelliSenseMode</strong>: IntelliSense模式</li>
</ol>
<h3 id="settings-json配置"><a href="#settings-json配置" class="headerlink" title="settings.json配置"></a>settings.json配置</h3><h4 id="文件作用-1"><a href="#文件作用-1" class="headerlink" title="文件作用"></a>文件作用</h4><p><code>.vscode/settings.json</code>用于配置工作区特定的VSCode设置，覆盖全局设置，为特定项目提供定制化配置，包括：</p>
<ul>
<li>文件关联</li>
<li>代码格式化</li>
<li>编译任务</li>
<li>调试配置</li>
<li>各语言特定设置</li>
</ul>
<h4 id="创建settings-json"><a href="#创建settings-json" class="headerlink" title="创建settings.json"></a>创建settings.json</h4><p>在项目根目录的<code>.vscode</code>文件夹中创建<code>settings.json</code>文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.h&quot;</span><span class="punctuation">:</span> <span class="string">&quot;objective-c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.m&quot;</span><span class="punctuation">:</span> <span class="string">&quot;objective-c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.mm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;objective-cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.hpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.swift&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swift&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.java&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.kt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kotlin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.kts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kotlin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;*.dart&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dart&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.errorSquiggles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enabled&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.intelliSenseEngine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/**&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.excludeGitIgnore&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[objective-c]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xaver.clang-format&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[swift]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apple-swift-format.swift-format&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[java]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;redhat.java&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[kotlin]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fwcd.kotlin&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[dart]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dart-Code.dart-code&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="主要配置项"><a href="#主要配置项" class="headerlink" title="主要配置项"></a>主要配置项</h4><ol>
<li><p><strong>files.associations</strong>: 文件关联设置</p>
<ul>
<li>将<code>.h</code>&#x2F;<code>.m</code>文件关联到Objective-C语言</li>
<li>将<code>.mm</code>文件关联到Objective-C++语言</li>
<li>将<code>.c</code>文件关联到C语言</li>
<li>将<code>.cpp</code>&#x2F;<code>.hpp</code>文件关联到C++语言</li>
<li>将<code>.swift</code>文件关联到Swift语言</li>
<li>将<code>.java</code>文件关联到Java语言</li>
<li>将<code>.kt</code>&#x2F;<code>.kts</code>文件关联到Kotlin语言</li>
<li>将<code>.dart</code>文件关联到Dart语言</li>
</ul>
</li>
<li><p><strong>C_Cpp.errorSquiggles</strong>: 启用C&#x2F;C++错误波浪线提示</p>
</li>
<li><p><strong>C_Cpp.intelliSenseEngine</strong>: C&#x2F;C++ IntelliSense引擎设置</p>
</li>
<li><p><strong>C_Cpp.default.compilerPath</strong>: C&#x2F;C++默认编译器路径</p>
</li>
<li><p><strong>C_Cpp.default.includePath</strong>: C&#x2F;C++默认包含路径</p>
</li>
<li><p><strong>editor.formatOnSave</strong>: 保存时自动格式化</p>
</li>
<li><p><strong>explorer.excludeGitIgnore</strong>: 在资源管理器中排除.gitignore中的文件</p>
</li>
<li><p><strong>[language]</strong>: 特定语言的设置，包括格式化工具</p>
</li>
</ol>
<h3 id="launch-json调试配置"><a href="#launch-json调试配置" class="headerlink" title="launch.json调试配置"></a>launch.json调试配置</h3><h4 id="文件作用-2"><a href="#文件作用-2" class="headerlink" title="文件作用"></a>文件作用</h4><p><code>.vscode/launch.json</code>用于配置调试器设置，定义如何启动和调试应用程序。</p>
<h4 id="创建launch-json"><a href="#创建launch-json" class="headerlink" title="创建launch.json"></a>创建launch.json</h4><p>在项目根目录的<code>.vscode</code>文件夹中创建<code>launch.json</code>文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug C/C++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug Objective-C&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Applications/Xcode.app/Contents/Developer/usr/bin/lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enable pretty-printing for lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug Swift&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swift-lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swift-build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mainClass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Main&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;projectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-java-project&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug Kotlin&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kotlin&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mainClass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MainKt&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;projectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-kotlin-project&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug Dart&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dart&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bin/main.dart&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="主要配置项-1"><a href="#主要配置项-1" class="headerlink" title="主要配置项"></a>主要配置项</h4><ol>
<li><strong>name</strong>: 调试配置名称</li>
<li><strong>type</strong>: 调试器类型</li>
<li><strong>request</strong>: 请求类型（launch或attach）</li>
<li><strong>program</strong>: 要调试的程序路径</li>
<li><strong>args</strong>: 程序启动参数</li>
<li><strong>cwd</strong>: 当前工作目录</li>
<li><strong>environment</strong>: 环境变量</li>
<li><strong>preLaunchTask</strong>: 启动前执行的任务</li>
</ol>
<h3 id="tasks-json任务配置"><a href="#tasks-json任务配置" class="headerlink" title="tasks.json任务配置"></a>tasks.json任务配置</h3><h4 id="文件作用-3"><a href="#文件作用-3" class="headerlink" title="文件作用"></a>文件作用</h4><p><code>.vscode/tasks.json</code>用于定义自动化任务，如编译、构建、测试等操作。</p>
<h4 id="创建tasks-json"><a href="#创建tasks-json" class="headerlink" title="创建tasks.json"></a>创建tasks.json</h4><p>在项目根目录的<code>.vscode</code>文件夹中创建<code>tasks.json</code>文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build-c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;build/main&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;src/*.c&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build-cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;build/main&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;src/*.cpp&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build-objc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;clang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-framework&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Foundation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;build/main&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;src/*.m&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$clang&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swift-build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;swift&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;build&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$swiftc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java-build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javac&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-d&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;src/*.java&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$java&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kotlin-build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kotlinc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-d&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;src/*.kt&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$kotlin&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dart-build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dart&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;bin/main.dart&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;build/main&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$dart&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="主要配置项-2"><a href="#主要配置项-2" class="headerlink" title="主要配置项"></a>主要配置项</h4><ol>
<li><strong>label</strong>: 任务标签名称</li>
<li><strong>type</strong>: 任务类型（shell或process）</li>
<li><strong>command</strong>: 要执行的命令</li>
<li><strong>args</strong>: 命令参数</li>
<li><strong>group</strong>: 任务组（build、test等）</li>
<li><strong>presentation</strong>: 任务执行时的显示设置</li>
<li><strong>problemMatcher</strong>: 错误信息匹配器</li>
</ol>
<h2 id="各配置文件使用方法"><a href="#各配置文件使用方法" class="headerlink" title="各配置文件使用方法"></a>各配置文件使用方法</h2><h3 id="配置文件初始化流程"><a href="#配置文件初始化流程" class="headerlink" title="配置文件初始化流程"></a>配置文件初始化流程</h3><ol>
<li>在项目根目录创建<code>.vscode</code>文件夹</li>
<li>根据项目需求创建相应的配置文件</li>
<li>配置基本设置以满足开发需求</li>
</ol>
<h3 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h3><ol>
<li><strong>用户设置</strong>: 全局设置，适用于所有项目</li>
<li><strong>工作区设置</strong>: 项目特定设置，位于<code>.vscode/settings.json</code></li>
<li><strong>文件夹设置</strong>: 多根工作区中特定文件夹的设置</li>
</ol>
<h3 id="c-cpp-properties-json使用方法"><a href="#c-cpp-properties-json使用方法" class="headerlink" title="c_cpp_properties.json使用方法"></a>c_cpp_properties.json使用方法</h3><ul>
<li>文件会自动为C&#x2F;C++&#x2F;Objective-C文件提供智能提示</li>
<li>修改includePath以添加项目特定的头文件路径</li>
<li>根据需要调整defines宏定义</li>
</ul>
<h3 id="settings-json使用方法"><a href="#settings-json使用方法" class="headerlink" title="settings.json使用方法"></a>settings.json使用方法</h3><ul>
<li>安装相应的语言扩展</li>
<li>安装配置的格式化工具(如clang-format)</li>
<li>设置会自动应用于工作区中的文件</li>
</ul>
<h3 id="launch-json使用方法"><a href="#launch-json使用方法" class="headerlink" title="launch.json使用方法"></a>launch.json使用方法</h3><ul>
<li>通过VSCode的调试面板选择相应的调试配置</li>
<li>点击”开始调试”按钮或按F5启动调试</li>
<li>可根据项目需求修改程序路径和参数</li>
</ul>
<h3 id="tasks-json使用方法"><a href="#tasks-json使用方法" class="headerlink" title="tasks.json使用方法"></a>tasks.json使用方法</h3><ul>
<li>通过Terminal &gt; Run Task菜单访问任务</li>
<li>选择要执行的任务(如build-c、build-cpp等)</li>
<li>任务会自动在集成终端中执行</li>
</ul>
<h2 id="调试和测试配置"><a href="#调试和测试配置" class="headerlink" title="调试和测试配置"></a>调试和测试配置</h2><h3 id="配置调试环境"><a href="#配置调试环境" class="headerlink" title="配置调试环境"></a>配置调试环境</h3><p>确保已安装相应语言的扩展和调试器，然后通过VSCode的调试面板选择相应的调试配置。</p>
<h3 id="创建测试任务"><a href="#创建测试任务" class="headerlink" title="创建测试任务"></a>创建测试任务</h3><p>定义自动化测试任务，便于快速运行单元测试和集成测试。</p>
<h2 id="常见问题和解决方案"><a href="#常见问题和解决方案" class="headerlink" title="常见问题和解决方案"></a>常见问题和解决方案</h2><h3 id="1-IntelliSense无法识别头文件"><a href="#1-IntelliSense无法识别头文件" class="headerlink" title="1. IntelliSense无法识别头文件"></a>1. IntelliSense无法识别头文件</h3><p>解决方案：确保在<code>c_cpp_properties.json</code>中正确配置了<code>includePath</code>。</p>
<h3 id="2-编译器路径错误"><a href="#2-编译器路径错误" class="headerlink" title="2. 编译器路径错误"></a>2. 编译器路径错误</h3><p>解决方案：检查编译器安装路径，并更新<code>compilerPath</code>配置。</p>
<h3 id="3-文件关联不正确"><a href="#3-文件关联不正确" class="headerlink" title="3. 文件关联不正确"></a>3. 文件关联不正确</h3><p>解决方案：在<code>settings.json</code>中正确配置<code>files.associations</code>。</p>
<h3 id="4-调试配置问题"><a href="#4-调试配置问题" class="headerlink" title="4. 调试配置问题"></a>4. 调试配置问题</h3><p>解决方案：确保<code>launch.json</code>中的路径和程序名称正确。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>Podspec语法参考(翻译)</title>
    <url>/2019/08/29/Podspec%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83(%E7%BF%BB%E8%AF%91)/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E8%A7%84%E8%8C%83">规范</a></li>
<li><a href="#%E6%A0%B9%E8%A7%84%E8%8C%83">根规范</a></li>
<li><a href="#%E5%B9%B3%E5%8F%B0">平台</a></li>
<li><a href="#%E6%9E%84%E5%BB%BA%E8%AE%BE%E7%BD%AE">构建设置</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F">文件格式</a></li>
<li><a href="#%E5%AD%90%E6%A8%A1%E5%9D%97">子模块</a></li>
<li><a href="#%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%94%AF%E6%8C%81">多平台支持</a></li>
</ul>
<h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>规范描述了Pod库的版本。它包括从何处获取源、使用哪些文件、应用的构建设置以及其他常规元数据（例如：名称、版本和说明）等详细信息。</p>
<p>可以通过<code>pod spec create</code>命令生成存根规范文件<code>(podspec文件)</code>。</p>
<p>DSL规范提供了极大的灵活性和动态性。此外，DSL采用了<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE">按约定编程</a>。因此他可以非常的简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |spec|</span><br><span class="line">  spec.name         = &#x27;Reachability&#x27;</span><br><span class="line">  spec.version      = &#x27;3.1.0&#x27;</span><br><span class="line">  spec.license      = &#123; :type =&gt; &#x27;BSD&#x27; &#125;</span><br><span class="line">  spec.homepage     = &#x27;https://github.com/tonymillion/Reachability&#x27;</span><br><span class="line">  spec.authors      = &#123; &#x27;Tony Million&#x27; =&gt; &#x27;tonymillion@gmail.com&#x27; &#125;</span><br><span class="line">  spec.summary      = &#x27;ARC and GCD Compatible Reachability Class for iOS and OS X.&#x27;</span><br><span class="line">  spec.source       = &#123; :git =&gt; &#x27;https://github.com/tonymillion/Reachability.git&#x27;, :tag =&gt; &#x27;v3.1.0&#x27; &#125;</span><br><span class="line">  spec.source_files = &#x27;Reachability.&#123;h,m&#125;&#x27;</span><br><span class="line">  spec.framework    = &#x27;SystemConfiguration&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>或者更详细一些：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |spec|</span><br><span class="line">  spec.name          = &#x27;Reachability&#x27;</span><br><span class="line">  spec.version       = &#x27;3.1.0&#x27;</span><br><span class="line">  spec.license       = &#123; :type =&gt; &#x27;BSD&#x27; &#125;</span><br><span class="line">  spec.homepage      = &#x27;https://github.com/tonymillion/Reachability&#x27;</span><br><span class="line">  spec.authors       = &#123; &#x27;Tony Million&#x27; =&gt; &#x27;tonymillion@gmail.com&#x27; &#125;</span><br><span class="line">  spec.summary       = &#x27;ARC and GCD Compatible Reachability Class for iOS and OS X.&#x27;</span><br><span class="line">  spec.source        = &#123; :git =&gt; &#x27;https://github.com/tonymillion/Reachability.git&#x27;, :tag =&gt; &#x27;v3.1.0&#x27; &#125;</span><br><span class="line">  spec.module_name   = &#x27;Rich&#x27;</span><br><span class="line">  spec.swift_version = &#x27;4.0&#x27;</span><br><span class="line"></span><br><span class="line">  spec.ios.deployment_target  = &#x27;9.0&#x27;</span><br><span class="line">  spec.osx.deployment_target  = &#x27;10.10&#x27;</span><br><span class="line"></span><br><span class="line">  spec.source_files       = &#x27;Reachability/common/*.swift&#x27;</span><br><span class="line">  spec.ios.source_files   = &#x27;Reachability/ios/*.swift&#x27;, &#x27;Reachability/extensions/*.swift&#x27;</span><br><span class="line">  spec.osx.source_files   = &#x27;Reachability/osx/*.swift&#x27;</span><br><span class="line"></span><br><span class="line">  spec.framework      = &#x27;SystemConfiguration&#x27;</span><br><span class="line">  spec.ios.framework  = &#x27;UIKit&#x27;</span><br><span class="line">  spec.osx.framework  = &#x27;AppKit&#x27;</span><br><span class="line"></span><br><span class="line">  spec.dependency &#x27;SomeOtherPod&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE">约定优于配置</a>（convention over configuration）,也称为按约定编程，是一种软件设计范式，旨在减少软件开发人脸需要做决定的数量，获得简单的好处，而又不失灵活性。</p>
</blockquote>
<h3 id="根规范"><a href="#根规范" class="headerlink" title="根规范"></a>根规范</h3><p>“根”规范存储有关库的特定版本的信息。</p>
<p>此组中的属性只能写入“根”规范，而不能写入“子规范”。</p>
<hr>
<p>此组中列出的属性是podspec所需的唯一属性。</p>
<p>提供其他组的属性来改进podspec，并遵循一种约定优于配置的方法。根规范可以通过“子规范”直接描述这些属性。</p>
<h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>pod的名字。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.name = &#x27;AFNetworking&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>pod的版本。CocoaPods遵循语义版本控制。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.version = &#x27;0.0.1&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="swift-versions"><a href="#swift-versions" class="headerlink" title="swift_versions"></a>swift_versions</h4><p>规范支持的Swift版本。“4”的版本将被CocoaPods视为“4.0”，而不是“4.1”或“4.2”。</p>
<p>请注意，Swift编译器主要接受高级版本，有时也支持低级版本。虽然CocoaPods允许指定低级版本或修补程序版本，但Swift编译器可能不会完全遵循它。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.swift_versions = [&#x27;3.0&#x27;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.swift_versions = [&#x27;3.0&#x27;, &#x27;4.0&#x27;, &#x27;4.2&#x27;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.swift_version = &#x27;3.0&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.swift_version = &#x27;3.0&#x27;, &#x27;4.0&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="cocoapods-version"><a href="#cocoapods-version" class="headerlink" title="cocoapods_version"></a>cocoapods_version</h4><p>规范支持的CocoaPods版本。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.cocoapods_version = &#x27;&gt;= 0.36&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="authors"><a href="#authors" class="headerlink" title="authors"></a>authors</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>库维护人员的姓名和电子邮件地址，而不是Podspec维护人员的姓名和电子邮件地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.author = &#x27;Darth Vader&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.authors = &#x27;Darth Vader&#x27;, &#x27;Wookiee&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.authors = &#123; &#x27;Darth Vader&#x27; =&gt; &#x27;darthvader@darkside.com&#x27;,</span><br><span class="line">                 &#x27;Wookiee&#x27;     =&gt; &#x27;wookiee@aggrrttaaggrrt.com&#x27; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="social-media-url"><a href="#social-media-url" class="headerlink" title="social_media_url"></a>social_media_url</h4><p>pod的社交媒体联系人的URL，CocoaPods web 服务可以使用这个。</p>
<p>例如，如果URL是相对于Twitter的，@CocoaPodsFeed通知将包括Twitter句柄(缩短描述)。这并不一定是一个Twitter URL，但是只有那些包含在Twitter @CocoaPodsFeed通知中。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.social_media_url = &#x27;https://twitter.com/cocoapods&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.social_media_url = &#x27;https://groups.google.com/forum/#!forum/cocoapods&#x27;</span><br></pre></td></tr></table></figure>



<h4 id="license"><a href="#license" class="headerlink" title="license"></a>license</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>pod的许可证。</p>
<hr>
<p>除非源包含名为LICENSE.*或LICENSE.*的文件，否则必须指定许可文件的路径或许可类型常用的通知的整数文本。如果指定了许可证文件，则它必须没有文件扩展名，或者是txt、md或markdown之一。</p>
<p>CocoaPods使用此信息生成确认文件（markdown和plit）,这些文件可用于最终应用程序的确认部分。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.license = &#x27;MIT&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.license = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;MIT-LICENSE.txt&#x27; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.license = &#123; :type =&gt; &#x27;MIT&#x27;, :text =&gt; &lt;&lt;-LICENSE</span><br><span class="line">                   Copyright 2012</span><br><span class="line">                   Permission is granted to...</span><br><span class="line">                 LICENSE</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>

<p>支持keys:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:type</span><br><span class="line"></span><br><span class="line">:file</span><br><span class="line"></span><br><span class="line">:text</span><br></pre></td></tr></table></figure>


<h4 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>pod主页的URL。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.homepage = &#x27;http://www.example.com&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>可以从中检索库的位置。</p>
<p>例如：</p>
<blockquote>
<p>指定带有标签（tag）的git源。这就是大多数OSS podspec的工作原理。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source = &#123; :git =&gt; &#x27;https://github.com/AFNetworking/AFNetworking.git&#x27;,</span><br><span class="line">                :tag =&gt; spec.version.to_s &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用前缀为“V”和子模块的标签(tag)。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source = &#123; :git =&gt; &#x27;https://github.com/typhoon-framework/Typhoon.git&#x27;,</span><br><span class="line">                :tag =&gt; &quot;v#&#123;spec.version&#125;&quot;, :submodules =&gt; true &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用带标签(tag)的Subversion.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source = &#123; :svn =&gt; &#x27;http://svn.code.sf.net/p/polyclipping/code&#x27;, :tag =&gt; &#x27;4.8.8&#x27; &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用与规范的语义版本字符串具有相同版本的Mercurial。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source = &#123; :hg =&gt; &#x27;https://bitbucket.org/dcutting/hyperbek&#x27;, :revision =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用HTTP下载压缩文件的代码。它支持zip、tgz、bz2、txz和tar。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source = &#123; :http =&gt; &#x27;http://dev.wechatapp.com/download/sdk/WeChat_SDK_iOS_en.zip&#x27; &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用HTTP下载文件，使用哈希验证下载。它支持sha1和sha256。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source = &#123; :http =&gt; &#x27;http://dev.wechatapp.com/download/sdk/WeChat_SDK_iOS_en.zip&#x27;,</span><br><span class="line">                :sha1 =&gt; &#x27;7e21857fe11a511f472cfd7cfa2d979bd7ab7d96&#x27; &#125;</span><br></pre></td></tr></table></figure>

<p>支持Keys:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:git =&gt; :tag, :branch, :commit, :submodules</span><br><span class="line"></span><br><span class="line">:svn =&gt; :folder, :tag, :revision</span><br><span class="line"></span><br><span class="line">:hg =&gt; :revision</span><br><span class="line"></span><br><span class="line">:http =&gt; :flatten, :type, :sha256, :sha1, :headers</span><br></pre></td></tr></table></figure>

<h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><p>&#x3D;&#x3D;必须设置!&#x3D;&#x3D;</p>
<p>对pod的简短描述（最多140个字符）。</p>
<hr>
<p>摘要应该简短，但内容丰富。它代表pod的标签，无需指定它是一个库（虽然它是）。</p>
<p>该摘要首字母应大写并包含正确的标点符号。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.summary = &#x27;Computes the meaning of life.&#x27;</span><br></pre></td></tr></table></figure>


<h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><p>对Pod的描述比摘要更详细。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.description = &lt;&lt;-DESC</span><br><span class="line">                     Computes the meaning of life.</span><br><span class="line">                     Features:</span><br><span class="line">                     1. Is self aware</span><br><span class="line">                     ...</span><br><span class="line">                     42. Likes candies.</span><br><span class="line">                   DESC</span><br></pre></td></tr></table></figure>
<h4 id="screenshots"><a href="#screenshots" class="headerlink" title="screenshots"></a>screenshots</h4><p>显示pod图片的url列表。面向用户界面的库。CocoaPods建议使用<code>gif</code>格式。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.screenshot  = &#x27;http://dl.dropbox.com/u/378729/MBProgressHUD/1.png&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.screenshots = [ &#x27;http://dl.dropbox.com/u/378729/MBProgressHUD/1.png&#x27;,</span><br><span class="line">                     &#x27;http://dl.dropbox.com/u/378729/MBProgressHUD/2.png&#x27; ]</span><br></pre></td></tr></table></figure>

<h4 id="documentation-url"><a href="#documentation-url" class="headerlink" title="documentation_url"></a>documentation_url</h4><p>CocaoPods web properties 将提供pod文档的可选URL。将其留空将默认为库的cocoadocs生成的URL。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.documentation_url = &#x27;http://www.example.com/docs.html&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="prepare-command"><a href="#prepare-command" class="headerlink" title="prepare_command"></a>prepare_command</h4><p>下载Pod后将执行bash脚本。此命令可用于创建、删除和修改下载的任何文件，并将在收集规范的其他文件属性的任何路径之前运行。</p>
<p>此命令在清理Pod和创建Pod项目之前运行。工作目录是Pod的根目录。</p>
<p>如果pod安装了<code>:path</code>选项，则不会执行此命令。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.prepare_command = &#x27;ruby build_files.rb&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.prepare_command = &lt;&lt;-CMD</span><br><span class="line">                        sed -i &#x27;s/MyNameSpacedHeader/Header/g&#x27; ./**/*.h</span><br><span class="line">                        sed -i &#x27;s/MyNameOtherSpacedHeader/OtherHeader/g&#x27; ./**/*.h</span><br><span class="line">                   CMD</span><br></pre></td></tr></table></figure>



<h4 id="static-framework"><a href="#static-framework" class="headerlink" title="static_framework"></a>static_framework</h4><p>代表，如果使用<code>use_frameworks!</code>指定时，pod应包含静态库框架。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.static_framework = true</span><br></pre></td></tr></table></figure>

<h4 id="deprecated"><a href="#deprecated" class="headerlink" title="deprecated"></a>deprecated</h4><p>是否已弃用该库。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.deprecated = true</span><br></pre></td></tr></table></figure>


<h4 id="deprecated-in-favor-of"><a href="#deprecated-in-favor-of" class="headerlink" title="deprecated_in_favor_of"></a>deprecated_in_favor_of</h4><p>不赞成使用的Pod的名称。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.deprecated_in_favor_of = &#x27;NewMoreAwesomePod&#x27;</span><br></pre></td></tr></table></figure>


<h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><p>规范应指明支持库的平台和相应的部署目标。</p>
<p>如果未在子空间中定义，则此组的属性将继承父对象的值。</p>
<h4 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h4><p>pod支持的平台。不设置表示所有平台都支持。当支持多个平台时，您应该使用下面的部署目标。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.platform = :osx, &#x27;10.8&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.platform = :ios</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.platform = :osx</span><br></pre></td></tr></table></figure>

<h4 id="deployment-target"><a href="#deployment-target" class="headerlink" title="deployment_target"></a>deployment_target</h4><p>平台支持最小版本。</p>
<p>与platform属性相反，deployment_target属性允许指定支持此pod的多个平台-为每个平台指定不同的部署目标。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.deployment_target = &#x27;6.0&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.osx.deployment_target = &#x27;10.8&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="构建设置"><a href="#构建设置" class="headerlink" title="构建设置"></a>构建设置</h3><p>在这个组中列出了与构建环境的配置相关的属性，这些属性应该用于构建库。</p>
<p>如果没有在subspec中定义，这个组的属性将继承父元素的值。</p>
<h4 id="dependency"><a href="#dependency" class="headerlink" title="dependency"></a>dependency</h4><p>对其pod或“sub-specification’”的依赖</p>
<p>依赖项可以指定版本。推荐使用版本指示器<code>~&gt;</code>，因为它提供了对版本的良好控制，而没有太多限制。例如，<code>~&gt;1.0.1</code>相当于<code>&gt;=1.0.1</code>且<code>&lt;1.1</code>。类似地，<code>~&gt;1.0</code>将匹配<code>1.0</code>、<code>1.0.1</code>和<code>1.1</code>，但不会升级到2.0。</p>
<p>具有过度限制依赖关系的pod限制了它们与其他pod的兼容性。</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.dependency &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.dependency &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;, :configurations =&gt; [&#x27;Debug&#x27;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.dependency &#x27;AFNetworking&#x27;, &#x27;~&gt; 1.0&#x27;, :configurations =&gt; :debug</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.dependency &#x27;RestKit/CoreData&#x27;, &#x27;~&gt; 0.20.0&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.dependency &#x27;MBProgressHUD&#x27;, &#x27;~&gt; 0.5&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="info-plist"><a href="#info-plist" class="headerlink" title="info_plist"></a>info_plist</h4><p>添加生成的<code>info.plist</code></p>
<p>这些值将与CocoaPods生成的默认值合并，覆盖所有重复项。</p>
<p>对于库规范，这些值将合并到生成的信息列表对于使用框架集成的库。它对静态库没有影响。</p>
<p>不支持子服务器（应用程序和测试规范除外）。</p>
<p>对于应用程序规范，这些值将合并到应用程序主机的<code>信息列表(Info.plist)</code>.</p>
<p>对于测试规范，这些值将合并到测试包的<code>信息列表（Info.plist）</code>.</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.info_plist = &#123;</span><br><span class="line">  &#x27;CFBundleIdentifier&#x27; =&gt; &#x27;com.myorg.MyLib&#x27;,</span><br><span class="line">  &#x27;MY_VAR&#x27; =&gt; &#x27;SOME_VALUE&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="requires-arc"><a href="#requires-arc" class="headerlink" title="requires_arc"></a>requires_arc</h4><p>多平台</p>
<p><code>requires_arc</code>允许您指定哪个源_文件使用arc。这可以是支持ARC的文件，如果是true，表示所有源文件都使用ARC。</p>
<p>不使用ARC的文件将具有<code>-fno-objc-arc</code>编译器标志。</p>
<p>此属性的默认值为true。</p>
<p>默认为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.requires_arc = true</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.requires_arc = false</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.requires_arc = &#x27;Classes/Arc&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.requires_arc = [&#x27;Classes/*ARC.m&#x27;, &#x27;Classes/ARC.mm&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="frameworks"><a href="#frameworks" class="headerlink" title="frameworks"></a>frameworks</h4><p>多平台</p>
<p>用户目标需要链接的系统框架列表。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.framework = &#x27;CFNetwork&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.frameworks = &#x27;QuartzCore&#x27;, &#x27;CoreData&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="weak-frameworks"><a href="#weak-frameworks" class="headerlink" title="weak_frameworks"></a>weak_frameworks</h4><p>多平台</p>
<p>用户目标需要弱链接的框架列表。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.weak_framework = &#x27;Twitter&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.weak_frameworks = &#x27;Twitter&#x27;, &#x27;SafariServices&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="libraries"><a href="#libraries" class="headerlink" title="libraries"></a>libraries</h4><p>多平台</p>
<p>用户的目标（应用程序）需要链接的系统库列表。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.library = &#x27;xml2&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.libraries = &#x27;xml2&#x27;, &#x27;z&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="compiler-flags"><a href="#compiler-flags" class="headerlink" title="compiler_flags"></a>compiler_flags</h4><p>多平台</p>
<p>应传递给编译器的标志列表。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.compiler_flags = &#x27;-DOS_OBJECT_USE_OBJC=0&#x27;, &#x27;-Wno-format&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="pod-target-xcconfig"><a href="#pod-target-xcconfig" class="headerlink" title="pod_target_xcconfig"></a>pod_target_xcconfig</h4><p>多平台</p>
<p>要添加到最终私有pod目标xcconfig文件的任何标志。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.pod_target_xcconfig = &#123; &#x27;OTHER_LDFLAGS&#x27; =&gt; &#x27;-lObjC&#x27; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="user-target-xcconfig"><a href="#user-target-xcconfig" class="headerlink" title="user_target_xcconfig"></a>user_target_xcconfig</h4><p>多平台</p>
<p>指定要添加到最终聚合目标xcconfig文件的标志，该文件将传播到非重写并将生成设置继承到集成用户目标。</p>
<hr>
<p>不建议使用此属性，因为pod不应污染用户项目的生成设置，这可能会导致冲突。</p>
<p>将合并采用多个值的生成设置的多个定义。如果自定义生成设置和生成设置的定义冲突且只接受一个值，则会警告用户。</p>
<p>如果在用户目标中导入pod时需要使用clang编译器标志或预编译器宏定义，则通常会将它们放在此处。注意，这不仅会影响pod的公共接口的编译器视图，还会影响pod旁边的所有其他集成pod。您应该总是更喜欢<code>pod_target_xcconfig</code>，它可以包含相同的设置，但只在编译pod目标时影响工具链。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.user_target_xcconfig = &#123; &#x27;MY_SUBSPEC&#x27; =&gt; &#x27;YES&#x27; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="prefix-header-contents"><a href="#prefix-header-contents" class="headerlink" title="prefix_header_contents"></a>prefix_header_contents</h4><p>多平台</p>
<p>要注入到pod项目前缀头中的任何内容。</p>
<p>不建议使用此属性，因为Pods不应该污染其他库或用户项目的前缀头。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.prefix_header_contents = &#x27;#import &lt;UIKit/UIKit.h&gt;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.prefix_header_contents = &#x27;#import &lt;UIKit/UIKit.h&gt;&#x27;, &#x27;#import &lt;Foundation/Foundation.h&gt;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="prefix-header-file"><a href="#prefix-header-file" class="headerlink" title="prefix_header_file"></a>prefix_header_file</h4><p>多平台</p>
<p>要注入pod项目前缀头的前缀头文件的路径。false表示不应生成默认CocoaPods前缀头。true是默认值，指示应生成默认CocoaPods前缀头。</p>
<p>不建议使用文件路径选项，因为Pods不应污染其他库或用户项目的前缀头。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.prefix_header_file = &#x27;iphone/include/prefix.pch&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.prefix_header_file = false</span><br></pre></td></tr></table></figure>

<h4 id="module-name"><a href="#module-name" class="headerlink" title="module_name"></a>module_name</h4><p>将为此规范而不是默认规范生成的framework&#x2F;clang模块使用的名称（如果设置了header_dir，则为规范名称）。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.module_name = &#x27;Three20&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="header-dir"><a href="#header-dir" class="headerlink" title="header_dir"></a>header_dir</h4><p>多平台</p>
<p>存储头文件以使其不中断的目录包括。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.header_dir = &#x27;Three20Core&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="header-mappings-dir"><a href="#header-mappings-dir" class="headerlink" title="header_mappings_dir"></a>header_mappings_dir</h4><p>多平台</p>
<p>用于保存头文件的文件夹结构的目录。如果没有提供头文件是扁平的。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.header_mappings_dir = &#x27;src/include&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="script-phases"><a href="#script-phases" class="headerlink" title="script_phases"></a>script_phases</h4><p>多平台</p>
<p>此属性允许定义脚本阶段，作为Pod编译的一部分执行。与prepare命令不同，脚本阶段作为xcodebuild的一部分执行，它们还可以利用编译期间设置的所有环境变量。</p>
<p>pod可以提供多个脚本阶段来执行，它们将按照声明的顺序添加，并在考虑了它们的执行位置设置之后添加。</p>
<p>注意：为了提供对所有脚本阶段内容的可见性和感知，如果pod包含任何脚本阶段，则在安装pod时会向用户发出警告。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.script_phase = &#123; :name =&gt; &#x27;Hello World&#x27;, :script =&gt; &#x27;echo &quot;Hello World&quot;&#x27; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.script_phase = &#123; :name =&gt; &#x27;Hello World&#x27;, :script =&gt; &#x27;echo &quot;Hello World&quot;&#x27;, :execution_position =&gt; :before_compile &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.script_phase = &#123; :name =&gt; &#x27;Hello World&#x27;, :script =&gt; &#x27;puts &quot;Hello World&quot;&#x27;, :shell_path =&gt; &#x27;/usr/bin/ruby&#x27; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.script_phase = &#123; :name =&gt; &#x27;Hello World&#x27;, :script =&gt; &#x27;echo &quot;Hello World&quot;&#x27;,</span><br><span class="line">  :input_files =&gt; [&#x27;/path/to/input_file.txt&#x27;], :output_files =&gt; [&#x27;/path/to/output_file.txt&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.script_phase = &#123; :name =&gt; &#x27;Hello World&#x27;, :script =&gt; &#x27;echo &quot;Hello World&quot;&#x27;,</span><br><span class="line">  :input_file_lists =&gt; [&#x27;/path/to/input_files.xcfilelist&#x27;], :output_file_lists =&gt; [&#x27;/path/to/output_files.xcfilelist&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.script_phases = [</span><br><span class="line">    &#123; :name =&gt; &#x27;Hello World&#x27;, :script =&gt; &#x27;echo &quot;Hello World&quot;&#x27; &#125;,</span><br><span class="line">    &#123; :name =&gt; &#x27;Hello Ruby World&#x27;, :script =&gt; &#x27;puts &quot;Hello World&quot;&#x27;, :shell_path =&gt; &#x27;/usr/bin/ruby&#x27; &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h3><p>Podspecs应该位于存储库的根目录，文件的路径也应该相对于存储库的根目录指定。文件模式不支持遍历父目录(..)。文件模式可能包含以下通配符模式:</p>
<p>类型: *</p>
<p>匹配任何文件。可以被glob中的其他值限制。</p>
<ul>
<li><code>*</code>将匹配所有文件</li>
<li><code>c*</code>将匹配所有以<code>c</code>开头的文件</li>
<li><code>*c</code>是否会匹配所有以<code>c</code>结尾的文件</li>
<li><code>*c*</code>将匹配其中包含<code>c</code>的所有文件(包括开头或结尾)</li>
</ul>
<p>相当于正则表达式中的<code>/.*/x</code>。</p>
<p>注意，这与类Unix隐藏文件（dotfiles）不匹配。为了在匹配结果中包含这些内容，必须使用{*，.}之类的内容。</p>
<hr>
<p>类型：**</p>
<p>递归匹配目录。</p>
<hr>
<p>类型：？</p>
<p>匹配任何一个字符。相当于正则表达式中的<code>/.&#123;1&#125;/</code>。</p>
<hr>
<p>类型：[set]</p>
<p>匹配集合中的任意字符。</p>
<p>其行为与正则表达式中的字符集完全相同，包括集取反（[^a-z]）。</p>
<hr>
<p>类型：{p,q}</p>
<p>匹配文字<code>p</code>或文字<code>q</code>。</p>
<p>匹配的文字长度可能超过一个字符。可以指定两个以上的文字。</p>
<p>相当于regexp中的模式替换。</p>
<hr>
<p>类型：\</p>
<p>转义字符。</p>
<hr>
<p>例如：</p>
<p>在JSONKit的源根目录中对这些进行评估。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;JSONKit.?&quot;    #=&gt; [&quot;JSONKit.h&quot;, &quot;JSONKit.m&quot;]</span><br><span class="line">&quot;*.[a-z][a-z]&quot; #=&gt; [&quot;CHANGELOG.md&quot;, &quot;README.md&quot;]</span><br><span class="line">&quot;*.[^m]*&quot;      #=&gt; [&quot;JSONKit.h&quot;]</span><br><span class="line">&quot;*.&#123;h,m&#125;&quot;      #=&gt; [&quot;JSONKit.h&quot;, &quot;JSONKit.m&quot;]</span><br><span class="line">&quot;*&quot;            #=&gt; [&quot;CHANGELOG.md&quot;, &quot;JSONKit.h&quot;, &quot;JSONKit.m&quot;, &quot;README.md&quot;]</span><br></pre></td></tr></table></figure>

<h4 id="source-files"><a href="#source-files" class="headerlink" title="source_files"></a>source_files</h4><p>多平台</p>
<p>pod 的源文件。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source_files = &#x27;Classes/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.source_files = &#x27;Classes/**/*.&#123;h,m&#125;&#x27;, &#x27;More_Classes/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="public-header-files"><a href="#public-header-files" class="headerlink" title="public_header_files"></a>public_header_files</h4><p>多平台</p>
<p>应用于标记公共头文件列表。</p>
<hr>
<p>这些模式与源文件相匹配，以包含将公开给用户项目并从中生成文档的头。构建库时，这些头文件将显示在构建目录中。如果未指定公共头，则源文件中的所有头都视为公共。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.public_header_files = &#x27;Headers/Public/*.h&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="private-header-files"><a href="#private-header-files" class="headerlink" title="private_header_files"></a>private_header_files</h4><p>多平台</p>
<p>应用于标记私有头文件列表。</p>
<p>这些模式与公共头匹配（如果未指定公共头，则与所有头匹配），以排除那些不应向用户项目公开且不应用于生成文档的头。构建库时，这些头文件将显示在构建目录中。</p>
<p>未列为public或private的头文件将被视为private，但另外根本不会出现在生成目录中。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.private_header_files = &#x27;Headers/Private/*.h&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="vendored-frameworks"><a href="#vendored-frameworks" class="headerlink" title="vendored_frameworks"></a>vendored_frameworks</h4><p>多平台</p>
<p>pod附带的动态库的路径。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.vendored_frameworks = &#x27;Frameworks/MyFramework.framework&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.vendored_frameworks = &#x27;MyFramework.framework&#x27;, &#x27;TheirFramework.framework&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="vendored-libraries"><a href="#vendored-libraries" class="headerlink" title="vendored_libraries"></a>vendored_libraries</h4><p>多平台</p>
<p>pod附带静态库的路径。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.vendored_library = &#x27;Libraries/libProj4.a&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.vendored_libraries = &#x27;libProj4.a&#x27;, &#x27;libJavaScriptCore.a&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="resource-bundles"><a href="#resource-bundles" class="headerlink" title="resource_bundles"></a>resource_bundles</h4><p>多平台</p>
<p>这个属性允许定义应该为Pod构建的资源包的名称和文件。它们被指定为散列，其中的键表示捆绑包的名称以及它们应该包含的文件模式的值。</p>
<p>为了将Pod构建为静态库，我们强烈建议库开发人员采用资源包，因为使用resources属性可能会出现名称冲突。</p>
<p>捆绑包的名称应至少包括Pod的名称，以尽量减少名称冲突的可能性。</p>
<p>要为每个平台提供不同的资源，必须使用具有名称空间的捆绑包。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.resource_bundle = &#123; &#x27;MapBox&#x27; =&gt; &#x27;MapView/Map/Resources/*.png&#x27; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.resource_bundles = &#123;</span><br><span class="line">    &#x27;MapBox&#x27; =&gt; [&#x27;MapView/Map/Resources/*.png&#x27;],</span><br><span class="line">    &#x27;MapBoxOtherResources&#x27; =&gt; [&#x27;MapView/Map/OtherResources/*.png&#x27;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><p>多平台</p>
<p>应复制到目标捆绑包中的资源列表。</p>
<p>为了将Pod构建为静态库，我们强烈建议库开发人员采用资源包，因为使用resources属性可能会出现名称冲突。此外，使用此属性指定的资源将直接复制到客户端目标，因此Xcode不会优化它们。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.resource = &#x27;Resources/HockeySDK.bundle&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.resources = [&#x27;Images/*.png&#x27;, &#x27;Sounds/*&#x27;]</span><br></pre></td></tr></table></figure>

<h4 id="exclude-files"><a href="#exclude-files" class="headerlink" title="exclude_files"></a>exclude_files</h4><p>多平台</p>
<p>应从其他文件模式中排除的文件模式的列表。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.exclude_files = &#x27;Classes/osx&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.exclude_files = &#x27;Classes/**/unused.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="preserve-paths"><a href="#preserve-paths" class="headerlink" title="preserve_paths"></a>preserve_paths</h4><p>多平台</p>
<p>下载后不应删除的任何文件。</p>
<p>默认情况下，CocoaPods会删除所有与其他任何文件模式都不匹配的文件。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.preserve_path = &#x27;IMPORTANT.txt&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.preserve_paths = &#x27;Frameworks/*.framework&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="module-map"><a href="#module-map" class="headerlink" title="module_map"></a>module_map</h4><p>多平台</p>
<p>此pod集成为框架时应使用的模块映射文件。</p>
<p>默认情况下，CocoaPods基于规范中的公共头创建模块映射文件。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.module_map = &#x27;source/module.modulemap&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><p>库可以指定对另一个库、另一个库的子库或其自身的子库的依赖关系。</p>
<h4 id="subspec"><a href="#subspec" class="headerlink" title="subspec"></a>subspec</h4><p>表示库模块的规范。</p>
<p>子空间参与双重层次。</p>
<p>一方面，规范自动继承所有它的子“子规范”（除非指定了默认子规范）作为依赖项。</p>
<p>另一方面，“子规范”继承父级属性的值，以便可以在祖先中指定属性的公共值。</p>
<p>虽然在实践中听起来很复杂，但这意味着子空间通常会做您所期望的事情：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;ShareKit&#x27;, &#x27;2.0&#x27;</span><br></pre></td></tr></table></figure>

<p>将ShareKit与<code>ShareKit/Evernote</code>、<code>ShareKit/Facebook</code>等所有共享者一起安装，因为它们被定义为子空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;ShareKit/Twitter&#x27;,  &#x27;2.0&#x27;</span><br><span class="line">pod &#x27;ShareKit/Pinboard&#x27;, &#x27;2.0&#x27;</span><br></pre></td></tr></table></figure>

<p>仅使用<code>ShareKit/Twitter</code>、<code>ShareKit/Pinboard</code>的源文件安装ShareKit。注意，在这种情况下，要编译的“子规范”需要源文件、依赖项和根规范定义的其他属性。CocoaPods足够聪明，可以处理由重复属性引起的任何问题。</p>
<p>例如：</p>
<blockquote>
<p>带有不同源文件的子规范。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subspec &#x27;Twitter&#x27; do |sp|</span><br><span class="line">  sp.source_files = &#x27;Classes/Twitter&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subspec &#x27;Pinboard&#x27; do |sp|</span><br><span class="line">  sp.source_files = &#x27;Classes/Pinboard&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>子空间引用对其他子空间的依赖关系。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name = &#x27;RestKit&#x27;</span><br><span class="line"></span><br><span class="line">  s.subspec &#x27;Core&#x27; do |cs|</span><br><span class="line">    cs.dependency &#x27;RestKit/ObjectMapping&#x27;</span><br><span class="line">    cs.dependency &#x27;RestKit/Network&#x27;</span><br><span class="line">    cs.dependency &#x27;RestKit/CoreData&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  s.subspec &#x27;ObjectMapping&#x27; do |os|</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<blockquote>
<p>嵌套subspecs。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name = &#x27;Root&#x27;</span><br><span class="line"></span><br><span class="line">  s.subspec &#x27;Level_1&#x27; do |sp|</span><br><span class="line">    sp.subspec &#x27;Level_2&#x27; do |ssp|</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="requires-app-host"><a href="#requires-app-host" class="headerlink" title="requires_app_host"></a>requires_app_host</h4><p>多平台</p>
<p>测试规范是否要求应用程序主机运行测试。这仅适用于测试规范。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test_spec.requires_app_host = true</span><br></pre></td></tr></table></figure>

<h4 id="app-host-name"><a href="#app-host-name" class="headerlink" title="app_host_name"></a>app_host_name</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">必要时用作应用程序宿主的应用程序规范。</span><br></pre></td></tr></table></figure>

<h4 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h4><p>多平台</p>
<p>指定要用于此规范的scheme配置。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.scheme = &#123; :launch_arguments =&gt; [&#x27;Arg1&#x27;] &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.scheme = &#123; :launch_arguments =&gt; [&#x27;Arg1&#x27;, &#x27;Arg2&#x27;], :environment_variables =&gt; &#123; &#x27;Key1&#x27; =&gt; &#x27;Val1&#x27;&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>支持的Keys：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:launch_arguments</span><br><span class="line"></span><br><span class="line">:environment_variables</span><br><span class="line"></span><br><span class="line">:code_coverage</span><br></pre></td></tr></table></figure>

<h4 id="test-spec"><a href="#test-spec" class="headerlink" title="test_spec"></a>test_spec</h4><p>表示库的测试规范。在这里，您可以放置podspec的所有测试以及测试依赖项。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |spec|</span><br><span class="line">  spec.name = &#x27;NSAttributedString+CCLFormat&#x27;</span><br><span class="line"></span><br><span class="line">  spec.test_spec do |test_spec|</span><br><span class="line">    test_spec.source_files = &#x27;NSAttributedString+CCLFormatTests.m&#x27;</span><br><span class="line">    test_spec.dependency &#x27;Expecta&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="app-spec"><a href="#app-spec" class="headerlink" title="app_spec"></a>app_spec</h4><p>表示库的应用程序规范。在这里，你可以放置你的podspec的所有应用源文件以及应用依赖项。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |spec|</span><br><span class="line">  spec.name = &#x27;NSAttributedString+CCLFormat&#x27;</span><br><span class="line"></span><br><span class="line">  spec.app_spec do |app_spec|</span><br><span class="line">    app_spec.source_files = &#x27;NSAttributedString+CCLFormat.m&#x27;</span><br><span class="line">    app_spec.dependency &#x27;AFNetworking&#x27;</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h4 id="default-subspecs"><a href="#default-subspecs" class="headerlink" title="default_subspecs"></a>default_subspecs</h4><p>应该用作首选依赖项的子空间名称数组。如果未指定，则规范要求其所有子空间作为依赖项。</p>
<p>您可以使用值<code>:none</code>来指定编译此pod不需要任何子空间，并且所有子空间都是可选的。</p>
<hr>
<p>默认情况下，Pod应该提供完整的库。用户可以微调其依赖关系，并排除不需要的子空间，一旦他们的需求是已知的。因此，很少需要此属性。如果存在提供替代不兼容实现的“子规范”，则使用它来选择默认值，或者排除很少需要的模块（尤其是当它们触发对其他库的依赖时）。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.default_subspec = &#x27;Core&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.default_subspecs = &#x27;Core&#x27;, &#x27;UI&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.default_subspecs = :none</span><br></pre></td></tr></table></figure>

<h3 id="多平台支持"><a href="#多平台支持" class="headerlink" title="多平台支持"></a>多平台支持</h3><p>规范可以存储仅特定于一个平台的值。</p>
<p>例如，可能需要存储仅特定于iOS项目的资源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.resources = &#x27;Resources/**/*.png&#x27;</span><br><span class="line">spec.ios.resources = &#x27;Resources_ios/**/*.png&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>提供指定iOS属性的支持。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.ios.source_files = &#x27;Classes/ios/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="osx"><a href="#osx" class="headerlink" title="osx"></a>osx</h4><p>提供对指定OSX属性的支持。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.osx.source_files = &#x27;Classes/osx/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h4><p>提供对指定OSX属性的支持。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.osx.source_files = &#x27;Classes/osx/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="tvos"><a href="#tvos" class="headerlink" title="tvos"></a>tvos</h4><p>提供指定tvOS属性的支持。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.tvos.source_files = &#x27;Classes/tvos/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="watchos"><a href="#watchos" class="headerlink" title="watchos"></a>watchos</h4><p>提供指定watchOS属性的支持。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spec.watchos.source_files = &#x27;Classes/watchos/**/*.&#123;h,m&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html">Podspec Syntax Reference v1.9.0</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE">约定优于配置</a></li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode12项目适配</title>
    <url>/2020/09/24/Xcode12%E9%A1%B9%E7%9B%AE%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近更新Xcode12，发现编译有的项目的时候会出现些问题，然后一个个解决所有项目完美编译通过。</p>
<p>最近看有的群里在讨论Xcode12编译项目的一些问题，觉得可以整理一篇自己遇到问题的文章，便于遇到同样问题的朋友查阅。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><blockquote>
<p>项目无法在模拟器中运行</p>
</blockquote>
<p>将项目运行到模拟器的时候报<code>No architectures to compile for (ONLY_ACTIVE_ARCH=YES, active arch=x86_64, VALID_ARCHS=arm64 armv7)</code>错误。</p>
<p>修复：</p>
<p>TARGETS-&gt;Build Settings-&gt;搜索<code>VALID_ARCHS</code>, 然后添加模拟器的指令集。如果有多个TARGETS时，需要分别添加。</p>
<p>如图所示：<br><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/Xcode12%E9%A1%B9%E7%9B%AE%E9%80%82%E9%85%8D/%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%82%E9%85%8D.jpg" alt="项目运行模拟器适配"></p>
<blockquote>
<p>Library not found for -lstdc++.6.0.9</p>
</blockquote>
<p>果然自己保存在github中的<code>lstdc++</code>库是对的，忘记从哪个版本Xcode去除了<code>lstdc++</code>库，每次更新Xcode的时候都需要重新添加一下。</p>
<p>修复：</p>
<ul>
<li>从<a href="https://github.com/xnxy/libsted-.git">github</a>中下载<code>lstdc++</code>，将其复制到下面的路径下即可。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/</span><br><span class="line"></span><br><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib/</span><br></pre></td></tr></table></figure>


<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>Swift代码中报<code>Constructing an object of class type &#39;Self&#39; with a metatype value must use a &#39;required&#39; initializer。错误</code></p>
<p>修复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">required init() &#123;</span><br><span class="line">   super.init(</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode14运行Flutter3.22.0的折中方式</title>
    <url>/2024/05/20/Xcode14%E8%BF%90%E8%A1%8CFlutter3.22.0%E7%9A%84%E6%8A%98%E4%B8%AD%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>目前项目升级到<code>3.22.0</code>,项目也早早添加了隐私清单,这也就意味着项目运行&#x2F;编译需要在<code>Xcode15</code>上进行。</p>
<p>但有的时候仍需要在家中排查问题，虽然家中有个<code>pro</code>和<code>air</code>,但有的时候老婆也需要用<code>pro</code>搞些设计。而且<code>air</code>目前已经无法升级到最新的系统，相应地到<code>Xcode</code>也无法升级到<code>Xcode15</code>。</p>
<p>所以也需要修改项目，让其在Xcode14上运行，便于后期忘记，在此记录。</p>
<h2 id="移除隐私清单文件"><a href="#移除隐私清单文件" class="headerlink" title="移除隐私清单文件"></a>移除隐私清单文件</h2><p>首先需要在移除壳工程中的<code>PrivacyInfo.xcprivacy</code>。</p>
<p>不需要直接删除，需要在<code>TARGETS</code>-&gt;<code>Build Phases</code>-&gt;<code>Copy Bundle Resources</code>中将其移除。</p>
<h2 id="关闭Impeller渲染引擎"><a href="#关闭Impeller渲染引擎" class="headerlink" title="关闭Impeller渲染引擎"></a>关闭<code>Impeller</code>渲染引擎</h2><p>如果不关闭在运行的时候会报以下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[FATAL:flutter/shell/platform/darwin/ios/ios_context.mm(29)] Check failed: backend != IOSRenderingBackend::kImpeller. Software rendering is incompatible with Impeller. Software rendering may have been automatically selected when running on a simulator in an environment that does not support Metal. Enabling GPU pass through in your environment may fix this. If that is not possible, then disable Impeller.</span><br></pre></td></tr></table></figure>

<p>原因是因为在<code>Flutter3.22.0</code>渲染引擎默认被自动选择为<code>Impeller</code>，而<code>Xcode14</code>渲染与<code>Impeller</code>渲染引擎不兼容。</p>
<p>为了解决这个问题，为了解决这个问题我们可以在运行<code>Flutter</code>项目中添加<code>--no-enable-impeller</code>参数来禁用Impeller。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter run --no-enable-impeller</span><br></pre></td></tr></table></figure>

<p>这样做将强制<code>Flutter</code>使用旧的Skia渲染引擎，而不是<code>Impeller</code>。</p>
<p>当前我们也可以在壳工程的<code>info.plist</code>文件中添加以下键值来告诉<code>Flutter</code>在构建时禁用<code>Impeller</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;FLTEnableImpeller&lt;/key&gt;</span><br><span class="line">&lt;false/&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>最后：这些代码修改不要提交到git上！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 崩溃日志解析命令整理</title>
    <url>/2025/08/11/iOS%20%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>在友盟后台看到一处崩溃信息，发现友盟后台未对其进行解析，手动使用命令解析后，让Ai整理了崩溃日志命令整理的文档在下方，便于后期查阅。</p>
<h2 id="1-准备工作-验证文件匹配性"><a href="#1-准备工作-验证文件匹配性" class="headerlink" title="1. 准备工作 - 验证文件匹配性"></a>1. 准备工作 - 验证文件匹配性</h2><h3 id="检查-UUID-匹配"><a href="#检查-UUID-匹配" class="headerlink" title="检查 UUID 匹配"></a>检查 UUID 匹配</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查二进制文件 UUID</span></span><br><span class="line">dwarfdump --uuid MyApp.app/MyApp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 dSYM 文件 UUID</span></span><br><span class="line">dwarfdump --uuid MyApp.app.dSYM/Contents/Resources/DWARF/MyApp</span><br></pre></td></tr></table></figure>

<h2 id="2-自动化解析方法"><a href="#2-自动化解析方法" class="headerlink" title="2. 自动化解析方法"></a>2. 自动化解析方法</h2><h3 id="使用-symbolicatecrash（推荐）"><a href="#使用-symbolicatecrash（推荐）" class="headerlink" title="使用 symbolicatecrash（推荐）"></a>使用 symbolicatecrash（推荐）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到工具位置</span></span><br><span class="line">find /Applications/Xcode.app -name symbolicatecrash -<span class="built_in">type</span> f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开发环境</span></span><br><span class="line"><span class="built_in">export</span> DEVELOPER_DIR=<span class="string">&quot;/Applications/Xcode.app/Contents/Developer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析整个崩溃日志文件</span></span><br><span class="line">symbolicatecrash crash_log.crash MyApp.app.dSYM &gt; symbolicated_crash.crash</span><br></pre></td></tr></table></figure>

<h2 id="3-手动解析方法"><a href="#3-手动解析方法" class="headerlink" title="3. 手动解析方法"></a>3. 手动解析方法</h2><h3 id="使用-atos-命令解析单个地址"><a href="#使用-atos-命令解析单个地址" class="headerlink" title="使用 atos 命令解析单个地址"></a>使用 atos 命令解析单个地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 dSYM 文件解析（推荐）</span></span><br><span class="line">atos -o MyApp.app.dSYM/Contents/Resources/DWARF/MyApp -l &lt;load_address&gt; &lt;crash_address&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用二进制文件解析</span></span><br><span class="line">atos -o MyApp.app/MyApp -l &lt;load_address&gt; &lt;crash_address&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">atos -o MyApp.app.dSYM/Contents/Resources/DWARF/MyApp -l 0x100000000 0x100001234</span><br></pre></td></tr></table></figure>

<h3 id="批量解析多个地址"><a href="#批量解析多个地址" class="headerlink" title="批量解析多个地址"></a>批量解析多个地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量解析脚本</span></span><br><span class="line">atos -o MyApp.app.dSYM/Contents/Resources/DWARF/MyApp -l &lt;load_address&gt; &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">0x100001234</span></span><br><span class="line"><span class="string">0x100002345</span></span><br><span class="line"><span class="string">0x100003456</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h2 id="4-辅助诊断命令"><a href="#4-辅助诊断命令" class="headerlink" title="4. 辅助诊断命令"></a>4. 辅助诊断命令</h2><h3 id="查看二进制文件信息"><a href="#查看二进制文件信息" class="headerlink" title="查看二进制文件信息"></a>查看二进制文件信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看支持的架构</span></span><br><span class="line">lipo -info MyApp.app/MyApp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件类型</span></span><br><span class="line">file MyApp.app/MyApp</span><br></pre></td></tr></table></figure>

<h3 id="查看调试符号信息"><a href="#查看调试符号信息" class="headerlink" title="查看调试符号信息"></a>查看调试符号信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看详细的调试信息</span></span><br><span class="line">dwarfdump MyApp.app.dSYM</span><br></pre></td></tr></table></figure>

<h2 id="5-完整解析流程"><a href="#5-完整解析流程" class="headerlink" title="5. 完整解析流程"></a>5. 完整解析流程</h2><ol>
<li><strong>验证匹配性</strong>：使用 <code>dwarfdump --uuid</code> 确认二进制文件和 dSYM 文件的 UUID 一致</li>
<li><strong>选择解析方法</strong>：<ul>
<li>自动解析：使用 <code>symbolicatecrash</code> 处理整个崩溃日志</li>
<li>手动解析：使用 <code>atos</code> 解析特定地址</li>
</ul>
</li>
<li><strong>执行解析</strong>：根据崩溃日志中的 load address 和 crash address 进行解析</li>
<li><strong>分析结果</strong>：查看解析后的函数名、文件名和行号信息</li>
</ol>
<p>这样整理后，您可以根据具体需求选择合适的解析方法。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>iOS14隐私权限适配及其他</title>
    <url>/2020/09/14/iOS14%E9%9A%90%E7%A7%81%E6%9D%83%E9%99%90%E9%80%82%E9%85%8D%E5%8F%8A%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>在<a href="https://developer.apple.com/videos/wwdc2020/">WWDC2020</a>发布会上苹果展示了新的<a href="https://developer.apple.com/cn/ios/">iOS14</a>系统。对于iOS开发工程师来说，适配iOS14其重点在于隐私权限的适配。具体内容可以观看<a href="https://developer.apple.com/videos/play/wwdc2020/10676/">WWDC2020中：建立更好的隐私信任</a>的视频进行了解。</p>
<blockquote>
<p>note:截止目前，适配<code>iOS14</code>需要更新mac系统到<code>11  beta 6</code>、xcode需要更新到<code>12 beta 6</code>、手机需要更新到<code>14 beta 8</code>，相关版本可以到<a href="https://developer.apple.com/download/#ios-restore-images-iphone-new">苹果官网下载</a>；更新beta版本打包可能会影响正常上架，该问题未进行测试，但需要引起注意。</p>
</blockquote>
<h1 id="广告标识符的获取"><a href="#广告标识符的获取" class="headerlink" title="广告标识符的获取"></a>广告标识符的获取</h1><p>广告标识符(Identity for Advertisers)简称<code>IDFA</code>，主要用来标记用户。在<code>iOS14</code>系统中，系统会默认关闭广告标跟踪权限。如果在开发中使用，需要向用户请求权限，步骤如下：</p>
<blockquote>
<p>1、info.plist配置</p>
</blockquote>
<p>选中<code>info.plist</code>右键<code>Open As</code>-&gt;<code>Source Code</code> 然后将下方配置和描述信息添加进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSUserTrackingUsageDescription&lt;/key&gt;</span><br><span class="line">&lt;string&gt;“太平通宝”需要您允许访问广告标识符权限，以便于追踪广告和信息的推送&lt;/string&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2、头文件引入</p>
</blockquote>
<p>为了适配低版本Xcode编译，需要使用预编译命令,所以头文件引入方式如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if defined(__IPHONE_14_0)</span><br><span class="line">#import &lt;AppTrackingTransparency/AppTrackingTransparency.h&gt;//适配iOS14</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3、获取IDFA</p>
</blockquote>
<p><code>iOS14</code>及以上系统，需要先请求跟踪权限，用户同意后才能获取广告标识。获取方法标识符的代码<code>iOS14</code>之前一样。示例代码如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ (NSString *)idfaString &#123;</span><br><span class="line">    __block NSString *idfa;</span><br><span class="line">#if defined(__IPHONE_14_0)</span><br><span class="line">    if (@available(iOS 14, *)) &#123;</span><br><span class="line">        // iOS14及以上版本需要先请求权限</span><br><span class="line">        ATTrackingManagerAuthorizationStatus status = ATTrackingManager.trackingAuthorizationStatus;</span><br><span class="line">        if (status == ATTrackingManagerAuthorizationStatusNotDetermined) &#123; //用户未做选择或未弹窗</span><br><span class="line">            dispatch_semaphore_t sem = dispatch_semaphore_create(0);</span><br><span class="line">            [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status) &#123;</span><br><span class="line">                // 获取到权限后，依然使用老方法获取idfa</span><br><span class="line">                if (status == ATTrackingManagerAuthorizationStatusAuthorized) &#123; //用户允许</span><br><span class="line">                    idfa = [[ASIdentifierManager sharedManager].advertisingIdentifier UUIDString];</span><br><span class="line">                    ICLog(@&quot;--iOS14----%@----&quot;,idfa);</span><br><span class="line">                &#125;</span><br><span class="line">                dispatch_semaphore_signal(sem);</span><br><span class="line">            &#125;];</span><br><span class="line">            dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        &#125;else if(status == ATTrackingManagerAuthorizationStatusAuthorized)&#123;//用户允许</span><br><span class="line">            idfa = [[ASIdentifierManager sharedManager].advertisingIdentifier UUIDString];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            ICLog(@&quot;请在设置-隐私-Tracking中允许App请求跟踪&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#else</span><br><span class="line">    // iOS14以下版本依然使用老方法</span><br><span class="line">    // 判断在设置-隐私里用户是否打开了广告跟踪</span><br><span class="line">    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) &#123;</span><br><span class="line">        idfa = [[ASIdentifierManager sharedManager].advertisingIdentifier UUIDString];</span><br><span class="line">        ICLog(@&quot;---iOS14以下系统----%@-----&quot;,idfa);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ICLog(@&quot;请在设置-隐私-广告中打开广告跟踪功能&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">    idfa = (idfa ? : @&quot;&quot;);</span><br><span class="line">    return idfa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="相册权限"><a href="#相册权限" class="headerlink" title="相册权限"></a>相册权限</h1><p>iOS14中新增了个<code>有限的图片库访问</code>模式，在授权弹窗的时候会新增个<code>Select Photo</code>选项，用户可以选择一部分图片供App读取，而App无法获取相册中的所有图片信息。</p>
<p>如果用户使用了<code>有限图片库访问</code>(Limited Photo Library Access)的模式, 如果App不进行适配，权限提示框会在每次冷启动打开相册的时候重新弹出，我们需要在<code>info.plist</code>中进行配置，关闭弹窗。</p>
<blockquote>
<p>1、info.plist配置</p>
</blockquote>
<p>选中<code>info.plist</code>右键<code>Open As</code>-&gt;<code>Source Code</code> 然后将下方配置和描述信息添加进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;PHPhotoLibraryPreventAutomaticLimitedAccessAlert&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br></pre></td></tr></table></figure>

<p>当然，我们也可以通过相应API来控制何时弹出图片选择的弹出。API如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[PHPhotoLibrary sharedPhotoLibrary] presentLimitedLibraryPickerFromViewController:self];</span><br></pre></td></tr></table></figure>
<p>同时，在iOS14中官方推荐使用苹果推荐使用<code>PHPicker</code>来代替原API来选择图片。</p>
<p>关于<code>PHPicker</code>的介绍可以参看<a href="https://developer.apple.com/videos/play/wwdc2020/10652/">WWDC2020：认识新的照片选择器</a>的相关介绍。</p>
<h1 id="位置信息"><a href="#位置信息" class="headerlink" title="位置信息"></a>位置信息</h1><p>在iOS14中，苹果新增了<code>模糊定位</code>的概念。原因是苹果认为很多APP并不需要获取用户的<code>精准定位</code>。所以在iOS14授权弹窗的时候新增了<code>Precise</code>的精准开关，默认会选中精准位置，用户可以通过这个开关进行更改。</p>
<h2 id="对于地理位置敏感的APP"><a href="#对于地理位置敏感的APP" class="headerlink" title="对于地理位置敏感的APP"></a>对于地理位置敏感的APP</h2><blockquote>
<p>1、info.plist配置</p>
</blockquote>
<p>不过对于需要精准定位的App需要在<code>info.plist</code>中设置<code>NSLocationTemporaryUsageDescriptionDictionary</code>字典，key为<code>purposeKey</code>,value为对应获取<code>精准定位</code>的原因。</p>
<p>示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSLocationTemporaryUsageDescriptionDictionary&lt;/key&gt;</span><br><span class="line">    &lt;dict&gt;</span><br><span class="line">        &lt;key&gt;punchTheClock&lt;/key&gt;</span><br><span class="line">        &lt;string&gt;“太平通宝”需要您允许精准定位，以便于使用打卡功能&lt;/string&gt;</span><br><span class="line">    &lt;/dict&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2、获取单次精准定位</p>
</blockquote>
<p>同时需要调用相应API，获取精准定位。代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[CALocationMnanger requestTemporaryFullAccuracyAuthorizationWithPurposeKey:@&quot;punchTheClock&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="对于地理位置不敏感的App"><a href="#对于地理位置不敏感的App" class="headerlink" title="对于地理位置不敏感的App"></a>对于地理位置不敏感的App</h2><p>对定位信息不敏感的APP，iOS14中可以直接在<code>info.plist</code>中添加<code>NSLocationDefaultAccuracyReduced</code>为<code>true</code>,默认请求<code>模糊定位</code>。</p>
<p>选中<code>info.plist</code>右键<code>Open As</code>-&gt;<code>Source Code</code> 然后将下方配置和描述信息添加进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;key&gt;NSLocationDefaultAccuracyReduced&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Local-Network"><a href="#Local-Network" class="headerlink" title="Local Network"></a>Local Network</h1><p>iOS14中新增了<code>Local Network</code>权限提示，具体关于<code>Local Network</code>的相关信息可以查看<a href="https://developer.apple.com/videos/play/wwdc2020/10110/">苹果官网的视频</a>或者<code>少数派</code>的关于<a href="https://zhuanlan.zhihu.com/p/157159226?from_voters_page=true">iOS14新增的本地网络权限，要开给第三方App吗?</a>等相关资料。</p>
<h1 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h1><p>在iOS14中，如果APP读取剪切版的内容时，手机会弹出提示，提示哪个APP在获取剪切板内容。</p>
<h1 id="相机和麦克风"><a href="#相机和麦克风" class="headerlink" title="相机和麦克风"></a>相机和麦克风</h1><p>在iOS14中APP如果使用相机和麦克风，手机的的上方会有绿色和黄色的提示，同时也可以查看是哪个APP在使用相机和麦克风。</p>
<p>关于该功能开发人员无法控制。</p>
<h1 id="UIDatePicker更新UI样式"><a href="#UIDatePicker更新UI样式" class="headerlink" title="UIDatePicker更新UI样式"></a>UIDatePicker更新UI样式</h1><p>在iOS14中，<code>UIDatePicker</code>的样式新增了<code>UIDatePickerStyleInline</code>，而且为默认值。如果项目中使用了<code>UIDatePicker</code>，而且希望使用原来的样式，需要设置其样式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.pickerView.preferredDatePickerStyle = UIDatePickerStyleWheels;</span><br></pre></td></tr></table></figure>

<h1 id="UITableViewCell适配"><a href="#UITableViewCell适配" class="headerlink" title="UITableViewCell适配"></a>UITableViewCell适配</h1><blockquote>
<p>UITableViewCell无法点击</p>
</blockquote>
<p>在Xcode12、iOS14中，如果在UITableViewCell渲染前没有调用<code>self.contentView</code>，系统会在渲染完<code>UITableViewCell</code>上的控件后在其上方添加<code>contentView</code>，这会使<code>contentView</code>拦截住<code>UITableViewCell</code>控件的响应事件。</p>
<p>其解决方式是将<code>UITableViewCell</code>上的控件添加到<code>self.contentView</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[self addSubview:view];</span><br><span class="line">改为：</span><br><span class="line">[self.contentView addSubview:view];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>hook修复UITableViewCell无法点击问题</p>
</blockquote>
<p>虽然上方的方法可以修复UITableViewCell无法点击问题，但对于一个很庞大的项目来说，不确定是否有遗漏，尤其是一些组件。所以在项目中需要用到<code>修改+hook</code>的方式。</p>
<p>方法也很简单，直接hook住<code>UITableViewCell</code>中的<code>addSubview：</code>方法，全局修复下即可，同时后期写代码也要注意代码规范。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;UITableViewCell+TB.h&quot;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation UITableViewCell (TB)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    Method method1 = class_getInstanceMethod([self class], NSSelectorFromString(@&quot;addSubview:&quot;));</span><br><span class="line">    Method method2 = class_getInstanceMethod([self class], @selector(tb_addSubview:));</span><br><span class="line">    method_exchangeImplementations(method1, method2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addSubview:(UIView *)view&#123;</span><br><span class="line">    [super addSubview:view];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tb_addSubview:(UIView *)view &#123;</span><br><span class="line">    if  ([view isKindOfClass:NSClassFromString(@&quot;UITableViewCellContentView&quot;)]) &#123;</span><br><span class="line">        [self tb_addSubview:view];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self.contentView addSubview:view];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>


<blockquote>
<p>UITableViewCell 背景色变成灰色</p>
</blockquote>
<p>灰色为<code>self.contentView</code>的背景色，在init方法中共添加即可。</p>
<h1 id="YYAnimatedImageView-无法加载图片"><a href="#YYAnimatedImageView-无法加载图片" class="headerlink" title="YYAnimatedImageView 无法加载图片"></a>YYAnimatedImageView 无法加载图片</h1><p>因为项目中用到<code>YYImage</code>第三方库。</p>
<p>解决方式：<br>修复：YYAnimatedImageView.m 529行的函数修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)displayLayer:(CALayer *)layer &#123;</span><br><span class="line">    if (_curFrame) &#123;</span><br><span class="line">        layer.contents = (__bridge id)_curFrame.CGImage;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        if (@available(iOS 14.0, *)) &#123;</span><br><span class="line">            [super displayLayer:layer];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但在项目中，并不会这些修复，毕竟是第三方库，我们可以直接替换这个类的该方法。</p>
<p>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &quot;YYAnimatedImageView+TB.h&quot;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation YYAnimatedImageView (TB)</span><br><span class="line"></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    Method method1 = class_getInstanceMethod([self class], NSSelectorFromString(@&quot;displayLayer:&quot;));</span><br><span class="line">    Method method2 = class_getInstanceMethod([self class], @selector(tb_displayLayer:));</span><br><span class="line">    method_exchangeImplementations(method1, method2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tb_displayLayer:(CALayer *)layer&#123;</span><br><span class="line">    Ivar ivar = class_getInstanceVariable(self.class, &quot;_curFrame&quot;);</span><br><span class="line">    UIImage *_curFrame = object_getIvar(self, ivar);</span><br><span class="line">    if (_curFrame) &#123;</span><br><span class="line">        layer.contents = (__bridge id)_curFrame.CGImage;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if (@available(iOS 14.0, *)) &#123;</span><br><span class="line">            [super displayLayer:layer];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>


<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote>
<p>关于真机调试</p>
</blockquote>
<p>最新Xcode 12 beta版本<code>31G</code>,而且还不稳定，如果需要使用低版本Xcode运行到iOS14的真机上可以下载<a href="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/iOS14%E9%9A%90%E7%A7%81%E6%9D%83%E9%99%90%E9%80%82%E9%85%8D%E5%8F%8A%E5%85%B6%E4%BB%96/14.0.zip">iOS14的DeviceSupport</a>，存放的路径为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于更新iOS14系统</p>
</blockquote>
<p>关于更新iOS14 beta版的系统，我在<a href="https://jingyan.baidu.com/article/2a1383284630dd464b134f11.html">百度经验</a>上水了篇文章，可以点击百度经验查看，当然经验水的有些粗糙，还有错别字。</p>
<p>也可能是好久没写了，写完后，竟然还给了0.3元的红包……</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.apple.com/videos/wwdc2020/">WWDC2020</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2020/10676/">WWDC2020中：建立更好的隐私信任</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2020/10652/">WWDC2020：认识新的照片选择器</a></li>
<li><a href="https://developer.apple.com/videos/play/wwdc2020/10110/">WWDC2020-在你的应用程序中支持本地网络隐私</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/157159226?from_voters_page=true">iOS14新增的本地网络权限，要开给第三方App吗?</a></li>
<li><a href="https://mp.weixin.qq.com/s/CJML-2YUv6sqEEnI8rI0Bw">iOS14 隐私适配及部分解决方案</a></li>
<li><a href="https://www.jianshu.com/p/a0b0303962bb">iOS14 适配 先行者</a></li>
<li><a href="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/iOS14%E9%9A%90%E7%A7%81%E6%9D%83%E9%99%90%E9%80%82%E9%85%8D%E5%8F%8A%E5%85%B6%E4%BB%96/14.0.zip">iOS14:DeviceSupport</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS18SDK构建应用时间节点</title>
    <url>/2024/09/29/iOS18SDK%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8%E6%97%B6%E9%97%B4%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>自<code>2025年4月</code>起，所有上传至 App Store Connect 的 iOS 和 iPadOS App 都必须使用 iOS 18 SDK 来构建。</p>
<p>具体公告可以查看<a href="https://developer.apple.com/cn/ios/submit/">《将iOS App提交至App Store》</a>中的介绍，具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将 Apple 平台上的最新优势无缝集成到你的 App 中，从而提供卓越的体验。使用 Xcode 的最新版本来构建你的 App。Xcode 包含适用于 Apple 平台的 SDK。</span><br><span class="line">所有上传至 App Store Connect 的 iOS 和 iPadOS App 都必须使用 Xcode 15 和 iOS 17 SDK 或更新版本来构建。自 2025 年 4 月起，所有上传至 App Store Connect 的 iOS 和 iPadOS App 都必须使用 iOS 18 SDK 来构建。</span><br></pre></td></tr></table></figure>


<p>具体的适配工作可以查看<a href="https://juejin.cn/post/7416166317986562088?searchId=20240927142648C42C6C9648A70E9A829B">iOS&#x2F;Flutter: Only Xcode16 Can Do (问题收集)</a>和<a href="https://www.jianshu.com/p/cca4d4d8145d">iOS 18适配问题记录(Xcode16正式版)</a>基本可以囊括所有问题。</p>
<p>#参考资料</p>
<ul>
<li><a href="https://developer.apple.com/documentation/xcode-release-notes/xcode-16-release-notes/">Xcode16发布说明</a></li>
<li><a href="https://developer.apple.com/cn/ios/submit/">将 iOS App 提交至 App Store</a></li>
<li><a href="https://www.jianshu.com/p/cca4d4d8145d">iOS 18适配问题记录(Xcode16正式版)</a></li>
<li><a href="https://juejin.cn/post/7416166317986562088?searchId=20240927142648C42C6C9648A70E9A829B">iOS&#x2F;Flutter: Only Xcode16 Can Do (问题收集)</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS关于多线程常用方法汇总</title>
    <url>/2020/12/04/iOS%E5%85%B3%E4%BA%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>前段时间整理了<a href="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8BiOS%E4%B8%8EOS%20X%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%20iOS%E4%B8%8EOS%20X%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.pdf">《Objective-C高级编程iOS与OS X 多线程和内存管理》</a>中共的GCD相关的知识，其中内容大部分都是摘录书中的内容。</p>
<p>写完以后感觉有些意犹未尽，所以决定将在开发过程中常用的多线程的方法单独拿出来整理一下。</p>
<h2 id="串行和并行"><a href="#串行和并行" class="headerlink" title="串行和并行"></a>串行和并行</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 串行队列的创建方法</span><br><span class="line">dispatch_queue_t serialDispatchQueue = dispatch_queue_create(&quot;com.example.gcd.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">// 并发队列的创建方法</span><br><span class="line">dispatch_queue_t concurrentDispatchQueue = dispatch_queue_create(&quot;com.example.gcd.concurrent&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//串行队列的创建方法</span><br><span class="line">let serialDispatch = DispatchQueue.init(label: &quot;com.example.gcd.serial&quot;)</span><br><span class="line">//并发队列的创建方法</span><br><span class="line">let concurrentDispatchQueue = DispatchQueue.init(label: &quot;com.example.gcd.concurrent&quot;, attributes: .concurrent)</span><br></pre></td></tr></table></figure>

<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_sync(serialDispatchQueue, ^&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(concurrentDispatchQueue, ^&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//同步</span><br><span class="line">serialDispatch.sync &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//异步</span><br><span class="line">concurrentDispatchQueue.async &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="各种Dispatch-Queue获取方法"><a href="#各种Dispatch-Queue获取方法" class="headerlink" title="各种Dispatch Queue获取方法"></a>各种Dispatch Queue获取方法</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Main Dispatch Queue 的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t mainDispatchQueue = dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (高优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueHigh = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (默认优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (低优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueLow = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (后台优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* --- 各种 Dispatch Queue的获取方法 --- */</span><br><span class="line">/*</span><br><span class="line"> * 相应参数说明：</span><br><span class="line"> * label : 队列的标识</span><br><span class="line"> * qos(服务质量)： .default 默认   .background 后台   .unspecified 不指定   .userInitiated 用户发起</span><br><span class="line">     attributes: 不指定的情况下是串行队列    .concurrent 并行队列</span><br><span class="line"> * autoreleaseFrequency: 自动释放的频率  .inherit 继承     .workItem工作组    .never 从不</span><br><span class="line"> * let dispatchQueue = DispatchQueue.init(label: String, qos: DispatchQoS, attributes: DispatchQueue.Attributes, autoreleaseFrequency: DispatchQueue.AutoreleaseFrequency, target: DispatchQueue?)</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Main Dispatch Queue 的获取方法</span><br><span class="line"> */</span><br><span class="line">let mainDispatchQueue = DispatchQueue.main</span><br></pre></td></tr></table></figure>

<h2 id="线程暂停和恢复"><a href="#线程暂停和恢复" class="headerlink" title="线程暂停和恢复"></a>线程暂停和恢复</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd.suspend&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_suspend(queue);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    dispatch_apply(5, queue, ^(size_t index) &#123;</span><br><span class="line">        NSLog(@&quot;---%ld---1----&quot;,index);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">sleep(1);</span><br><span class="line">NSLog(@&quot;---2---&quot;);</span><br><span class="line">dispatch_resume(queue);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let queue = DispatchQueue.init(label: &quot;com.example.gcd.suspend&quot;, attributes: .concurrent)</span><br><span class="line">queue.suspend()</span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;------1----&quot;)</span><br><span class="line">&#125;</span><br><span class="line">sleep(1)</span><br><span class="line">print(&quot;---2---&quot;)</span><br><span class="line">queue.resume()</span><br></pre></td></tr></table></figure>

<h2 id="延迟操作"><a href="#延迟操作" class="headerlink" title="延迟操作"></a>延迟操作</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;--- 延迟3秒后执行的操作 ---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//或</span><br><span class="line"></span><br><span class="line">dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.f * NSEC_PER_SEC));</span><br><span class="line">dispatch_after(time, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;--- 延迟3秒后执行的操作 ---&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DispatchQueue.main.asyncAfter(deadline: DispatchTime.init(uptimeNanoseconds: 2))&#123;</span><br><span class="line">    print(&quot;---延迟2秒执行---&quot;)</span><br><span class="line">&#125;</span><br><span class="line">print(&quot;---1---&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="队列组"><a href="#队列组" class="headerlink" title="队列组"></a>队列组</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_group_t dispatchGroup = dispatch_group_create();</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd.queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(dispatchGroup, queue, ^&#123;</span><br><span class="line">    //接口1</span><br><span class="line">    sleep(2);</span><br><span class="line">    NSLog(@&quot;---接口1---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(dispatchGroup, queue, ^&#123;</span><br><span class="line">    //接口2</span><br><span class="line">    sleep(1);</span><br><span class="line">    NSLog(@&quot;---接口2---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(dispatchGroup, queue, ^&#123;</span><br><span class="line">    //结束</span><br><span class="line">    NSLog(@&quot;---结束---&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let dispatchGroup = DispatchGroup.init()</span><br><span class="line">let queue = DispatchQueue.init(label: &quot;com.example.gcd.queue&quot;, attributes: .concurrent)</span><br><span class="line"></span><br><span class="line">dispatchGroup.enter()</span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;---1---&quot;)</span><br><span class="line">    sleep(1)</span><br><span class="line">    print(&quot;---2---&quot;)</span><br><span class="line">    dispatchGroup.leave()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatchGroup.notify(queue: queue)&#123;</span><br><span class="line">    print(&quot;---3---&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="栅栏方法"><a href="#栅栏方法" class="headerlink" title="栅栏方法"></a>栅栏方法</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd.barrier&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    [NSThread sleepForTimeInterval:2];</span><br><span class="line">    NSLog(@&quot;dispatch_async1&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    [NSThread sleepForTimeInterval:1];</span><br><span class="line">    NSLog(@&quot;dispatch_async2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//等待前面的任务执行完毕后自己才执行，后面的任务需等待它完成之后才执行</span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;dispatch_barrier_async&quot;);</span><br><span class="line">    [NSThread sleepForTimeInterval:4];</span><br><span class="line">    NSLog(@&quot;四秒后：dispatch_barrier_async&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    [NSThread sleepForTimeInterval:1];</span><br><span class="line">    NSLog(@&quot;dispatch_async3&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;dispatch_async4&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let queue = DispatchQueue.init(label: &quot;com.example.gcd.barrier&quot;, attributes: .concurrent)</span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(2)</span><br><span class="line">    print(&quot;dispatch_async1&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(1)</span><br><span class="line">    print(&quot;dispatch_async2&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//等待前面的任务执行完毕后自己才执行，后面的任务需等待它完成之后才执行</span><br><span class="line">queue.async(flags: .barrier)&#123;</span><br><span class="line">    sleep(4)</span><br><span class="line">    print(&quot;四秒后：dispatch_barrier_async&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    sleep(1)</span><br><span class="line">    print(&quot;dispatch_async3&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue.async &#123;</span><br><span class="line">    print(&quot;dispatch_async4&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><blockquote>
<p>Objective-C</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</span><br><span class="line"></span><br><span class="line">    dispatch_async(dispatch_queue_create(&quot;com.example.gcd.queue&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">        sleep(2);</span><br><span class="line">        NSLog(@&quot;---1---&quot;);</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">//    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t) 1 * NSEC_PER_SEC);</span><br><span class="line">    long result = dispatch_semaphore_wait(semaphore, time);</span><br><span class="line">    if (result == 0) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * 由于Dispatch Semaphore 的计数值达到大于等于1</span><br><span class="line">         * 或者在待机中的指定时间内</span><br><span class="line">         * Dispatch Semaphore 的计数值达到大于等于1</span><br><span class="line">         *</span><br><span class="line">         * 可执行需要进行排他控制的处理</span><br><span class="line">         */</span><br><span class="line">        NSLog(@&quot;---2---&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        /*</span><br><span class="line">         * 由于 Dispatch Semaphore 的计数值为0</span><br><span class="line">         * 因此再达到指定时间为止待机</span><br><span class="line">         */</span><br><span class="line">        NSLog(@&quot;---3---&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swift</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    let semaphore = DispatchSemaphore.init(value: 0)</span><br><span class="line"></span><br><span class="line">    DispatchQueue.init(label: &quot;com.example.gcd.queue&quot;,attributes: .concurrent).async &#123;</span><br><span class="line">        sleep(2)</span><br><span class="line">        print(&quot;---1---&quot;)</span><br><span class="line">        semaphore.signal()</span><br><span class="line">    &#125;</span><br><span class="line">    print(&quot;---2---&quot;)</span><br><span class="line">//    semaphore.wait()</span><br><span class="line">    let time = DispatchTime.init(uptimeNanoseconds: 1)</span><br><span class="line">    let result = semaphore.wait(timeout: time)</span><br><span class="line"></span><br><span class="line">    if result == DispatchTimeoutResult.success &#123;</span><br><span class="line">        print(&quot;---3---&quot;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        print(&quot;---4---&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS审核-因需要访问相机权限被拒</title>
    <url>/2018/07/04/iOS%E5%AE%A1%E6%A0%B8-%E5%9B%A0%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E7%9B%B8%E6%9C%BA%E6%9D%83%E9%99%90%E8%A2%AB%E6%8B%92/</url>
    <content><![CDATA[<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E5%AE%A1%E6%A0%B8-%E5%9B%A0%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E7%9B%B8%E6%9C%BA%E6%9D%83%E9%99%90%E8%A2%AB%E6%8B%92/%E4%B9%8B%E5%89%8D%E7%9A%84%E6%9D%83%E9%99%90%E6%8F%8F%E8%BF%B0.png" alt="之前的权限描述.png"></p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E5%AE%A1%E6%A0%B8-%E5%9B%A0%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E7%9B%B8%E6%9C%BA%E6%9D%83%E9%99%90%E8%A2%AB%E6%8B%92/%E8%A2%AB%E6%8B%92%E5%8E%9F%E5%9B%A0.png" alt="被拒原因.png"></p>
<h4 id="关于被拒"><a href="#关于被拒" class="headerlink" title="关于被拒"></a>关于被拒</h4><p>收到邮件发现应用审核被拒了，而审核被拒的原因竟然是因为权限描述的问题。</p>
<p>当时有些费解，毕竟获取相机权限这个功能已经写了很久。没想到突然因为这个原因被拒，通过阅读邮件和查阅<a href="https://developer.apple.com/cn/app-store/review/guidelines/#data-collection-and-storage">App Store审核指南</a>发现，现在使用权限，需要说明使用的原因。</p>
<h4 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h4><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E5%AE%A1%E6%A0%B8-%E5%9B%A0%E9%9C%80%E8%A6%81%E8%AE%BF%E9%97%AE%E7%9B%B8%E6%9C%BA%E6%9D%83%E9%99%90%E8%A2%AB%E6%8B%92/%E6%9B%B4%E6%94%B9%E6%9D%83%E9%99%90%E6%8F%8F%E8%BF%B0.png" alt="更改权限描述.png"></p>
<p>于是更改后在周一下班前提交，今天早晨查看邮件，发现已审核通过。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><ul>
<li>1、在App Store 审核指南更新的时候，要重新阅读一遍审核指南，同时注意修改的部分，避免下次提交时审核被拒。</li>
<li>2、最近发现从开始审核（in Review）到审核完毕时间缩短了好多……</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://developer.apple.com/cn/app-store/review/guidelines/#data-collection-and-storage">App Store审核指南</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS应用审核被拒的原因及提交应用的注意事项。</title>
    <url>/2017/10/13/iOS%E5%BA%94%E7%94%A8%E5%AE%A1%E6%A0%B8%E8%A2%AB%E6%8B%92%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E6%8F%90%E4%BA%A4%E5%BA%94%E7%94%A8%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>&amp;emsp;&amp;emsp;前段时候准备整理‘提交应用审核的一些注意事项’，但因为iPhone X、iPhone8等的发布搁浅了。因为新产品的发布，所以我们开始着手公司应用适配iOS11、iPhone X的工作。遇到了些坑，但总体的工作量并不是很大。如果想了解如何适配iOS11、iPhone X，可以查看我的上篇博客<a href="https://xnxy.github.io/xnxy.github.io/2017/09/28/iOS%E5%BC%80%E5%8F%91%E9%80%82%E9%85%8DiOS11&iPhone%20X%20%E3%80%81Xcode9%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/">iOS开发适配iOS11&amp;iPhone X 、Xcode9遇到的坑</a> 。</p>
<p>&amp;emsp;&amp;emsp;如果你是首次提交iOS应用，个人还是很建议你先阅读<a href="https://developer.apple.com/app-store/review/guidelines/cn/">App Store审核指南</a>的，这样可以有效地避免因很浅显问题被拒的情况。当然苹果的审核指南过于官方化，而且有时会出现应用莫名其妙被拒的情况……。那么让我们一起整理审核被拒的原因，以此为戒，尽量提高审核通过率。</p>
<p>&amp;emsp;&amp;emsp;审核被拒的原因一共分为两大类：</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; - Metadata Rejected (元数据被拒)</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; - Binary Rejected (二进制被拒)</p>
<h3 id="一：Metadata-Rejected-（元数据被拒）"><a href="#一：Metadata-Rejected-（元数据被拒）" class="headerlink" title="一：Metadata Rejected （元数据被拒）"></a>一：Metadata Rejected （元数据被拒）</h3><p>&amp;emsp;&amp;emsp;元数据被拒其实就是iTunes Connect 中的解释说明类的内容有问题，比如App信息中的应用的副标题有明显的品牌名，应用的分级不合适…… 都会被拒的。</p>
<p>&amp;emsp;&amp;emsp;而这种情况下并不需重新提交IPA包，根据邮件的提醒直接在iTunes Connect 进行修改就行，然后点击发布，重新排队审核就可以了。</p>
<p>&amp;emsp;&amp;emsp; 那么接下来我们详细地说说每个点的注意事项：</p>
<p>&amp;emsp;&amp;emsp; 1. 应用名称：</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 应用名称最多为6个汉字，超过手机端将会显示不全。</p>
<p>&amp;emsp;&amp;emsp; 2. 副标题</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;标题中不要出现关键词或相似词语堆砌的现象，不然也会被拒的。</p>
<p>&amp;emsp;&amp;emsp; 3. 隐私政策网站（URL）</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;所有面向儿童的App，或者提供自动续费或免费订阅的App，都必须提供隐私政策。此外，如果App包含账户注册或需要访问用户的现有账户，或法律另行规定，也必须提供隐私政策。对于收集用户或设备相关数据的App，也建议提供隐私政策。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;当然也可不填，但如果应用是音乐类、视频类、游戏等，涉及到版权的尽量加上。如果不加，很大可能会被拒。</p>
<p>&amp;emsp;&amp;emsp; 4. 类别</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;应用是什么类型选择什么类别就好，貌似在网上也没看到因类别被拒的。</p>
<p>&amp;emsp;&amp;emsp; 5. 分级</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;分级要跟你的应用相符。一般都是4+岁 或 17+岁吧，在网上也有看到因级别太低或太高被拒的。</p>
<p>&amp;emsp;&amp;emsp; 6. 版本</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;版本号应遵循<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E7%89%88%E6%9C%AC%E8%99%9F">软件版本规范</a>。</p>
<p>&amp;emsp;&amp;emsp; 7. 版本信息</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;描述此版本的新增内容，例如增添了何种新功能，有何改进之处以及修正了哪些错误。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;版本信息中不要出现其他终端设备的提示语如Android、WindowsPhone等。当然应用里面的任何地方也不要出现，也会被拒的。使用iOS、iPhone X等词语的时候，需要注意大小写，写错也会被拒的。</p>
<p>&amp;emsp;&amp;emsp; 8. App预览和屏幕快照</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;屏幕快照必须为 JPG 或 PNG 格式，且必须采用 RGB 颜色空间。App 预览必须为 M4V、MP4 或 MOV 格式，且不能超过 500 MB。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;屏幕快照上不要出现其他系统的名称和图标,而且也不要出现测试、不文明等词语。RGB色彩空间、无透明度。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;录制的视频中尽量避免加入广告、特效等过多的宣传成分。同时视频必须在苹果真机上录制，画面中不要出现人机交互界面（如手指，不过现在iOS11在控制中心有屏幕录制，可以使用）。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 录制的视频必须在真机上录制，不能采用拉伸、裁剪、填充方式处理生成。</p>
<p>&amp;emsp;&amp;emsp; 9. 宣传文本</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;苹果最近刚加的，iOS11或更高版本会显示  170字以内  可不填</p>
<p>&amp;emsp;&amp;emsp; 10. 描述</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;注意用词，不要出现不文明或引起误会的词语。同时也不要出现其他系统的名称如：Android等。使用iOS、iPhone X等词语时，不要写错，不然也会被拒的。</p>
<p>&amp;emsp;&amp;emsp; 11. 关键词</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;一个或多个关键词，用以描述您的 App。关键词将使 App Store 搜索结果更加准确。关键词之间用英文逗点分隔。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;注意是英文逗号分隔，关键词不要使用不文明词语，不然会因为关键词不符合要求被拒。</p>
<p>&amp;emsp;&amp;emsp; 12. 技术支持网址（URL）</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;您的 App 技术支持信息网址(URL)。直接可以浏览的网页，如果进去提醒登录会被拒的。</p>
<p>&amp;emsp;&amp;emsp; 13. 营销网址（URL）</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;您的 App 营销信息网址(URL)。该网址(URL)会在 App Store 中显示。 （可不填）</p>
<p>&amp;emsp;&amp;emsp; 14. App Store 图标</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 1024 * 1024 分辨率至少72DPI，并采用RGB色彩空间，格式可以为JPG和PNG，无透明度。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;应用图标不要跟Apple的logo风格相似，或一些出名的应用或iOS系统应用图标相似，有很大可能会被拒的。</p>
<p>&amp;emsp;&amp;emsp; 15. 版权</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;拥有您的 App 专有权的人员或实体的名称，前面是获得权利的年份（例如“2008 Acme Inc”）。请勿提供网址(URL)。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;公司版权信息。</p>
<p>&amp;emsp;&amp;emsp; 16. 商务代表联系信息</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;公司的一些信息，地址、联系电话、邮箱等。</p>
<p>&amp;emsp;&amp;emsp; 17. 路由App覆盖地区文件</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;指定您的 App 所支持的区域。文件格式必须为 .geojson 并且只能包含一个 MultiPolygon 元素。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 可不填。</p>
<p>&amp;emsp;&amp;emsp; 18. 登录信息</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;审核人员测试需要的登录账户，在提交应用后一定要保证该账号等够登录。尽量和服务端协商，别在审核期间删除掉，同时在审核过程中也不要登录该账号。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;如果App是手机验证码登录的，尽量也让服务端配置一个手机号和固定的验证码，同时在备注中说明。</p>
<p>&amp;emsp;&amp;emsp; 19. 联系信息</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;填写自己的姓名、电话和邮箱即可，或者填项目经理的。</p>
<p>&amp;emsp;&amp;emsp; 20. 备注</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;对审核过程会有所帮助的、有关您 App 的额外信息, 包括在测试中需要的 App 特别设置等。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;应用中需要说明的尽量在备注中说明，比如定位服务、手机验证码登录。同时也尽量用一句话描述自己的应用方便审核人员进行审核。</p>
<p>&amp;emsp;&amp;emsp; 21. 附件</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 您可以附加特定的 App 文稿、演示视频和 其他内容，以防止 App 审核延期。请确保 您的文件使用下列扩展名：.pdf、.doc、 .docx、.rtf、.pages、.xls、.xlsx、 .numbers、.zip、.rar、.plist、.crash、 .jpg、.png、.mp4 或 .avi。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 添加附件尽量在备注中说明。</p>
<h4 id="二：Binary-Rejected-二进制被拒"><a href="#二：Binary-Rejected-二进制被拒" class="headerlink" title="二：Binary Rejected (二进制被拒)"></a>二：Binary Rejected (二进制被拒)</h4><p>&amp;emsp;&amp;emsp; 二进制被拒，也就是你提交的包有问题了，这种情况需要你根据邮件提醒，然后对比<a href="https://developer.apple.com/app-store/review/guidelines/cn/">App Store审核指南</a>，然后修改相应代码，再次打包提交。提交时Build也要相应地加1，不然Application Loader会默认为同一个包，无法提交上去。</p>
<p>&amp;emsp;&amp;emsp; 那么接下来我们详细地说说每个点的注意事项：</p>
<p>&amp;emsp;&amp;emsp; 1. 启动页</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;提交前检查启动页，如果黑屏，有一定可能会被拒。</p>
<p>&amp;emsp;&amp;emsp; 2. 应用版权信息</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;一般启动页会放一些版权和版本信息，注意不要带beta、测试等字样，同样不要出现其他系统名称和图标（例如：Android的状态栏），应用里面也不要带，不然也会被拒。</p>
<p>&amp;emsp;&amp;emsp; 3. iOS大小写规范</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 特别是iOS、iPhone X等。还有一些英语词汇，注意大小写。</p>
<p>&amp;emsp;&amp;emsp; 4. UI风格</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 如果不符合苹果系统的UI风格也会被拒。具体请参考苹果<a href="https://developer.apple.com/design/tips/cn/">UI注意事项</a></p>
<p>&amp;emsp;&amp;emsp; 5. 检查更新</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;检查更新已经被苹果限制了，如果是在审核期间弹出更新提醒是很严重的。</p>
<p>&amp;emsp;&amp;emsp; 6. 第三方登录</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 如果手机没有安装某应用时应该将相应第三方登录图标隐藏，当然微博不用隐藏。分享也是，手机中没安装的也需要隐藏的。</p>
<p>&amp;emsp;&amp;emsp; 7. 登录</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;如果是账号、密码登录需要给审核人员提供一个账号和密码。如果你的应用是手机验证码登录，让服务端配置个手机号和固定的验证码，同时需要在备注中说明。</p>
<p>&amp;emsp;&amp;emsp; 8. 注册协议</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;注册时需要添加用户注册协议，如果不添加的话，审核人员看到也是会被拒的。</p>
<p>&amp;emsp;&amp;emsp; 9. 应用太过简单被拒。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;这个应该是看你是什么类型的应用，如果再App Store中有很多类似的应用也是有可能被拒的。只要不是什么马甲包，基本登录、注册什么的都有，一般也是不会被拒的。被拒了可以申诉的。</p>
<p>&amp;emsp;&amp;emsp; 10. 网络检测</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;应用应该监听网络状态，断网的时候要进行提醒，而不是一直卡在某个界面。在提交之前手机打开美国VPN每个界面都要跑一遍，检查接口是否存在问题，有问题及时协同服务端进行修复。</p>
<p>&amp;emsp;&amp;emsp; 11. IPV6 被拒</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;更新到最新的网络库。监听网络状态，加断网提醒。美国VPN跑一圈。搭建ipv6环境，判断是服务端还是客户端未支持IPV6，然后再进行解决。</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;或者全局搜索下方IPV4代码，如果应用中没有，基本就是服务器的问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inet_addr()</span><br><span class="line">inet_aton()</span><br><span class="line">inet_lnaof()</span><br><span class="line">inet_makeaddr()</span><br><span class="line">inet_netof()</span><br><span class="line">inet_network()</span><br><span class="line">inet_ntoa()</span><br><span class="line">inet_ntoa_r()</span><br><span class="line">bindresvport()</span><br><span class="line">getipv4sourcefilter()</span><br><span class="line">setipv4sourcefilter()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&amp;emsp;&amp;emsp; 12. 按钮或某个功能无法使用</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;如果按钮点击无效时，需要将其置灰或隐藏。某个功能无法使用时将其隐藏。</p>
<p>&amp;emsp;&amp;emsp; 13. 访问权限未设置</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;如果应用中有访问相机、麦克风等功能，都需要在info.plist中添加相应权限，同时应用中需要使用代码进行判断是否有权限。如果没有权限弹出弹窗提醒用户跳转。</p>
<p>&amp;emsp;&amp;emsp; 14. 没按照要求使用了应用内购买</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp; 苹果规定：如果系统通过付费才可以解锁某款应用中的一些功能（例如，订阅内容、游戏货币、游戏关卡、获取优质内容或解锁完整版本等），必须使用应用内付费（IAP）。应用不允许包括按钮、外部链接或者其他调用方式和行为指导用户采用非IAP的方式付费……如果你的应用内付费的付费类型不正确，你的应用会被拒绝。此外，应用不可以直接或间接使用应用内付费的内容和功能向其他用户赠送礼品。</p>
<p>&amp;emsp;&amp;emsp; 15. 私有API的调用</p>
<p>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;去除私有API的调用。（”prefs:root&#x3D;” 已经被列为私有API了，如果跳转到设置界面调用此API也会被拒的）</p>
<h4 id="三：写在最后"><a href="#三：写在最后" class="headerlink" title="三：写在最后"></a>三：写在最后</h4><p>&amp;emsp;&amp;emsp; 1. 认真阅读 <a href="https://developer.apple.com/app-store/review/guidelines/cn/">App Store审核指南</a>，遵循苹果的相应规则。</p>
<p>&amp;emsp;&amp;emsp; 2.在iTunes Connect 中的<code>户和职能</code>中添加自己的邮箱，被拒后会有邮件通知你。根据邮件的提醒判断是因元数据被拒还是二进制文件被拒。然后根据提示进行修改。</p>
<p>&amp;emsp;&amp;emsp; 3. 到App Store 下载客户端 iTunes Connect，然后登录<code>2.</code>中添加的邮箱，审核的状态会实时推送给你，可以实时跟踪审核的状态。</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://developer.apple.com/app-store/review/guidelines/cn/">App Store审核指南</a></li>
<li><a href="https://developer.apple.com/app-store/review/rejections/cn/">常见App拒绝情况</a></li>
<li><a href="https://developer.apple.com/cn/app-store/">App Store - Apple Developer</a></li>
<li><a href="https://www.zhihu.com/question/28849113?sort=created">iOS APP怎样轻松通过appstore审核？</a></li>
<li><a href="https://www.zhihu.com/question/20216099">应用提交App Store上架被拒的原因都有哪些</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22572268">iOS审核总被拒？腾讯教你提升iOS审核通过率！</a></li>
<li><a href="https://github.com/jcccn/Why-Reject">苹果App Store被拒理由大全</a></li>
<li><a href="http://www.jianshu.com/p/ba627e73e5b4">iOS被拒6次的ipv6</a></li>
<li><a href="http://www.jianshu.com/p/610f8c1938d2">那些年提交App Store审核踩过的坑</a></li>
<li><a href="https://nkcoder.github.io/2015/11/24/ios-app-review-reject-process/">记App Store审核被拒的经历</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E7%89%88%E6%9C%AC%E8%99%9F">软件版本号</a></li>
<li><a href="http://www.jianshu.com/p/8837739251ad?utm_campaign=hugo&utm_medium=reader_share&utm_content=note&utm_source=weixin-friends">IPV6-only 的兼容性解决方案</a></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS微信授权登录与通用链接配置</title>
    <url>/2020/07/07/iOS%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E5%8F%8A%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>微信的<code>openSDK</code>在1.8.6版本支持了<code>Universal Links</code>方式的跳转,在使用新版本的时候需要设置<code>Universal Links</code>。</p>
<p><code>Universal Links</code> 是在WWDC 2005提出了iOS9的新特性之一。</p>
<p>具体的使用可以参考<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW1">Support Universal Links</a>和<a href="https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content">Allowing Apps and Websites to Link to Your Content</a>两篇文章。</p>
<p>这篇文章主要整理微信openSDK的对接和<code>Universal Links</code>的配置。</p>
<h1 id="Universal-Links配置"><a href="#Universal-Links配置" class="headerlink" title="Universal Links配置"></a><code>Universal Links</code>配置</h1><p>当你支持通用链接时，iOS用户点击一个你网站的链接，可以被无缝地重定向到你安装的应用程序，而无需通过Safari。如果你的应用程序没有被安装，点击你网站的一个链接会在Safari中打开。</p>
<h2 id="开发者账号配置"><a href="#开发者账号配置" class="headerlink" title="开发者账号配置"></a>开发者账号配置</h2><blockquote>
<p>找到相应的<code>App ID</code>,勾选<code>Associated Domains</code>选项，然后点击保存即可。</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E5%8B%BE%E9%80%89Associated%20Domains.png" alt="勾选Associated Domains选项"></p>
<h2 id="apple-app-site-association-文件编写"><a href="#apple-app-site-association-文件编写" class="headerlink" title="apple-app-site-association 文件编写"></a>apple-app-site-association 文件编写</h2><p>关于<code>apple-app-site-association</code>的编写，可以查看<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW1">Support Universal Links</a>中相应文档的介绍。</p>
<p>为通用链接添加支持非常简单，需要采取以下三个步骤：</p>
<ol>
<li>创建一个<code>apple-app-site-association</code>文件，其中包含有关应用程序可以处理的 url 的 JSON 数据。</li>
<li>将 <code>apple-app-site-association</code> 文件上传到 HTTPS web 服务器。 可以将文件放在<code>Web服务器</code>的根目录或子目录<code>.well-known</code>下。</li>
<li>开始你的应用程序来处理通用链接。</li>
</ol>
<blockquote>
<p>Note:<code>apple-app-site-association</code>文件是纯文本文件，没有后缀名。</p>
</blockquote>
<p>关于<code>apple-app-site-association</code>的编写的官方示例如下方所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;applinks&quot;: &#123;</span><br><span class="line">        &quot;apps&quot;: [],</span><br><span class="line">        &quot;details&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;appID&quot;: &quot;9JA89QQLNQ.com.apple.wwdc&quot;,</span><br><span class="line">                &quot;paths&quot;: [ &quot;/wwdc/news/&quot;, &quot;/videos/wwdc/2015/*&quot;]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;appID&quot;: &quot;ABCD1234.com.apple.wwdc&quot;,</span><br><span class="line">                &quot;paths&quot;: [ &quot;*&quot; ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>appID</code>中的<code>9JA89QQLNQ</code>为团队ID，<code>com.apple.wwdc</code>为BundleID。如需添加多个<code>appID</code>，如上方所示。</p>
<blockquote>
<p>关于微信对<code>Universal Links</code>配置的要求</p>
</blockquote>
<ol>
<li><code>Universal Links</code>必须支持https</li>
<li><code>Universal Links</code>配置的paths不能带query参数</li>
<li>微信使用<code>Universal Links</code>拉起第三方App时,会在Universal Links末尾拼接路径和参数，因此App配置的paths必须加上通配符&#x2F;*</li>
</ol>
<p>微信示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">&quot;appID&quot;: &quot;8P7343TG54.com.tencent.xin.SDKSample&quot;,    </span><br><span class="line">&quot;paths&quot;: [&quot;/sdksample/*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note:本文项目的通用链接我存放到个人的阿里云中，路径如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/apple-app-site-association</span><br></pre></td></tr></table></figure>


<h2 id="apple-app-site-association-文件验证"><a href="#apple-app-site-association-文件验证" class="headerlink" title="apple-app-site-association 文件验证"></a>apple-app-site-association 文件验证</h2><p>将编写好的<code>apple-app-site-association</code>文件上传到<code>Web服务器</code>的根目录或子目录<code>.well-known</code>下后，我们可以进行校验一下服务器的配置是否正确。</p>
<p>可以通过<a href="https://search.developer.apple.com/appsearch-validation-tool/">App Search API Validation Tool</a>网页工具进行校验。</p>
<p>打开<a href="https://search.developer.apple.com/appsearch-validation-tool/">App Search API Validation Tool</a>网页工具，输入<code>apple-app-site-association</code> 在web 服务器中的地址,类似于<code>https://***/apple-app-site-association</code>。</p>
<p>验证的结果可能分为三种：验证通过-未上线、验证通过-已上线和验证失败。其结果分别如下所示。</p>
<blockquote>
<p>验证通过-未上线</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%AA%8C%E8%AF%81/%E9%AA%8C%E8%AF%81%E6%88%90%E5%8A%9F-%E5%B7%B2%E4%B8%8A%E7%BA%BF.jpg" alt="验证通过-未上线"></p>
<blockquote>
<p>验证通过-已上线</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%AA%8C%E8%AF%81/%E9%AA%8C%E8%AF%81%E6%88%90%E5%8A%9F-%E6%9C%AA%E4%B8%8A%E7%BA%BF.jpg" alt="验证通过-已上线"></p>
<blockquote>
<p>验证失败</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%AA%8C%E8%AF%81/%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF.jpg" alt="验证失败"></p>
<blockquote>
<p>Note:验证失败后，将<code>apple-app-site-association</code>存放到服务器的地址复制到浏览器中，查看<code>apple-app-site-association</code> 是否可以下载，如果可以下载查看文件内的<code>JSON</code>数据格式是否正确，如果不可以下载所以服务端配置的有问题。</p>
</blockquote>
<h2 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h2><p>如果上方的操作都已经做完，可以在工程中进行配置。</p>
<p>配置相对来说比较简单在 <code>TARGETS</code>-&gt;<code>Signing&amp;Capabilities</code> 中选择 <code>+ Capability</code> 然后搜索<code>Associated Domains</code>进行添加。</p>
<p>如图所示：</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5.png" alt="项目配置通用链接"></p>
<p>添加完以后，将通用链接地址填入到<code>Domains</code>中。<br><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/AssociatedDomains.jpg" alt="Associated Domains"></p>
<blockquote>
<p>Note: </p>
<p>如果提供的<code>apple-app-site-association</code>文件地址为<code>https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/apple-app-site-association</code></p>
<p>Associated Domains中需要填写(applinks：为固定格式)：<code>applinks:blog-zhouwei.oss-cn-beijing.aliyuncs.com</code></p>
<p>代码注册和微信开发平台中填写：<code>https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/</code></p>
</blockquote>
<p>其实配置到这里，选中证书，运行到手机。运行完后，在手机浏览器中输入<code>https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/</code> ，下滑的时候会出现从App中打开的选项。</p>
<p>如果将该链接复制到文本文档中，常按也会出现从App中打开的选项。</p>
<p>这说明<code>Universal Links</code>已经配置完成了。</p>
<h2 id="微信配置"><a href="#微信配置" class="headerlink" title="微信配置"></a>微信配置</h2><h3 id="配置Universal-Links"><a href="#配置Universal-Links" class="headerlink" title="配置Universal Links"></a>配置<code>Universal Links</code></h3><p>微信的通用链接配置如下方所示：</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%85%8D%E7%BD%AE%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E7%9A%84%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5.png" alt="配置微信开发平台的通用链接"></p>
<blockquote>
<p>Note: 就如同上方中写道，如果通用链接地址为<code>https://**/apple-app-site-association</code>,微信的<code>Universal Links</code>需要添加<code>https://**/</code>即可。</p>
</blockquote>
<h3 id="配置URL-Types"><a href="#配置URL-Types" class="headerlink" title="配置URL Types"></a>配置<code>URL Types</code></h3><p>配置完<code>Universal Links</code>后项目中同时还需要在工程中的<code>TARGETS</code>-&gt;<code>info</code>-&gt;<code>URL Types</code>中添加<code>URL scheme</code>,其中<code>URL scheme</code>为所注册的程序id。</p>
<p>如下图所示：</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%85%8D%E7%BD%AEURL%20Types" alt="配置URL Types"></p>
<h3 id="配置LSApplicationQueriesSchemes"><a href="#配置LSApplicationQueriesSchemes" class="headerlink" title="配置LSApplicationQueriesSchemes"></a>配置<code>LSApplicationQueriesSchemes</code></h3><p>在工程的<code>info.plist</code>中添加<code>LSApplicationQueriesSchemes</code>并添加<code>weixin</code>和<code>weixinULAPI</code>,如下图所示：</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/UniversalLink/%E9%85%8D%E7%BD%AEinfo.plist" alt="info.plist配置"></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content">Allowing Apps and Websites to Link to Your Content</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW1">Support Universal Links</a></li>
<li><a href="https://search.developer.apple.com/appsearch-validation-tool/">apple-app-site-association验证工具</a></li>
<li><a href="https://limitless-sierra-4673.herokuapp.com/">Universal Link Validator</a></li>
<li><a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/iOS.html">微信SDK-iOS接入指南</a></li>
<li><a href="https://www.jianshu.com/p/3a46eb4a107f">iOS微信授权登录+Universal Link(通用链接)</a></li>
<li><a href="https://www.jianshu.com/p/a42e3cdf550b">Universal Links 实现细节</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS证书配置指北</title>
    <url>/2018/03/05/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97.png" alt="iOS证书配置指北.png"></p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>我们都知道开发一款应用需要配置苹果常用证书、AppId,Provisioning Profiles，如果有推送还需要配置推送证书等，所以索性将所有的证书的配置流程都记录下来，方便以后查阅。</p>
<h6 id="App-ID"><a href="#App-ID" class="headerlink" title="App ID"></a>App ID</h6><p>App ID 是每个应用的独立标识，在设置中可以配置该应用的权限，比如：Push Notifications、Network Extensions等。</p>
<h6 id="开发者证书"><a href="#开发者证书" class="headerlink" title="开发者证书"></a>开发者证书</h6><p>开发证书类型分为两种，一种开发证书（iOS Development）一种发布证书(iOS Distribution)。开发证书（iOS Development）用于真机调试；生产证书用于打包上传App Store，用于验证开发者身份。</p>
<h6 id="推送证书"><a href="#推送证书" class="headerlink" title="推送证书"></a>推送证书</h6><p>如果项目中集成了推送功能，同样需要配置推送证书。推送证书同样也分两种：开发（Apple Development iOS Push Services）、生产（Apple Production iOS Push Services）。推送证书在AppID中创建生成，同时生成的的p12文件需要上传到服务端后台（友盟后台、极光后台或自己服务端后台）。</p>
<h6 id="配置文件（Provisioning-Profiles）"><a href="#配置文件（Provisioning-Profiles）" class="headerlink" title="配置文件（Provisioning Profiles）"></a>配置文件（Provisioning Profiles）</h6><p>配置文件同样也分两种，分为开发（Development）和发布（Distribution），配置文件（Provisioning Profiles）中包含了证书、App ID、设备（Devices）。它在开发者账号体系中扮演着配置和验证的角色，是真机调试和打包上架必须的文件。</p>
<p>ps:打Ad-hoc包的时候，如果遇到刚添加的设备UDID没添加进去，可以将开发模式的配置文件下载下来，打包后直接选中即可。</p>
<hr>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%B4%A6%E5%8F%B7.png" alt="苹果开发账号"></p>
<p>在配置证书之前我们需要有一个开发账号。个人账号和公司账号类似，每年都需要支付99刀，其中公司账号需要邓白氏编码而个人账号并不需要。</p>
<p>如果项目需要不通过App Store进行安装，可以申请企业账号。当然了，也可以找一些第三方直接打企业包，比如蒲公英之类的。</p>
<h3 id="创建CSR文件"><a href="#创建CSR文件" class="headerlink" title="创建CSR文件"></a>创建CSR文件</h3><p><a href="https://en.wikipedia.org/wiki/Certificate_signing_request">CSR（Certificate signing request）</a>即证书请求文件。证书申请者在申请数字证书时由CSP(加密服务提供者)在生成私钥的同时也生成证书请求文件（CSR文件），证书申请者只要把CSR文件提交给证书颁发机构后（创建App ID时上传到苹果后台），证书颁发机构使用其根证书私钥签名生成证书公钥文件（开发者证书）。</p>
<p>关于CSR文件的创建，我们可以直接使用Mac上的钥匙串访问直接请求。</p>
<p>具体步骤为： 钥匙串访问 -&gt; 钥匙串访问 -&gt; 证书助理 -&gt; 从证书颁发机构请求证书……</p>
<p>1、打开电脑上的钥匙串访问，选中证书助理；</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%E6%96%87%E4%BB%B6%E8%AF%B7%E6%B1%82.png" alt="证书签名文件请求"></p>
<p>2、用户电子邮件地址填开发者账号的邮箱，名称可以随意填，然后保存到磁盘上。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E4%BF%9D%E5%AD%98CSR%E6%96%87%E4%BB%B6.png" alt="保存CSR文件"></p>
<h3 id="创建App-ID"><a href="#创建App-ID" class="headerlink" title="创建App ID"></a>创建App ID</h3><p>1、登录<a href="https://developer.apple.com/">苹果开发者中心</a>,或者直接登录<a href="https://developer.apple.com/membercenter">Apple Member Center</a>选择<code>Certificates,Identifiers &amp; Profiles</code>；</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E4%B8%AD%E5%BF%83.png" alt="苹果开发者中心"></p>
<p>2、选择Identifiers 中的 App IDs，然后点上方的加号；</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E9%80%89%E6%8B%A9Identifiers%E4%B8%AD%E7%9A%84AppIDs.png" alt="选择Identifiers 中的 App IDs"></p>
<p>3、添加App ID Description和Bundle ID,如果项目中有推送，将Push Notifications勾选。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E6%B7%BB%E5%8A%A0AppID.png" alt="添加App ID"></p>
<h3 id="创建开发者证书-和-推送证书"><a href="#创建开发者证书-和-推送证书" class="headerlink" title="创建开发者证书 和 推送证书"></a>创建开发者证书 和 推送证书</h3><p>1、选择Certificates,然后选择上方的加号；</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E9%80%89%E6%8B%A9Certificates%E4%B8%AD%E7%9A%84All,%E7%84%B6%E5%90%8E%E9%80%89%E6%8B%A9%E4%B8%8A%E6%96%B9%E7%9A%84%E5%8A%A0%E5%8F%B7.png" alt="选择Certificates中的All,然后选择上方的加号"></p>
<p>2、选择相应的证书，因为开发调试证书、生产发布证书、开发环境推送证书、生产环境推送证书基本都类似，所以这里只选择开发调试证书为例。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E8%AF%81%E4%B9%A6.png" alt="选择相应证书"></p>
<p>3、一路点击Continue, 到Generate后选择一开始生成的CSR文件上传，然后再继续点击Continue。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E4%B8%8A%E4%BC%A0CSR%E6%96%87%E4%BB%B6.png" alt="上传CSR文件"></p>
<p>4、生成完开发调试、生成调试证书 和 开发环境推送证书、生成环境推送证书后，先下载到桌面上。然后双击添加到钥匙串中。</p>
<p>由于我们使用友盟，生成的推送证书（开发环境和生产环境）需要从钥匙串访问中导出p12文件，添加到友盟后台。</p>
<h3 id="推送证书-导出p12文件上传到友盟（极光）后台"><a href="#推送证书-导出p12文件上传到友盟（极光）后台" class="headerlink" title="推送证书 导出p12文件上传到友盟（极光）后台"></a>推送证书 导出p12文件上传到友盟（极光）后台</h3><p>1、由上一步创建了开发环境的推送证书和生成环境的推送证书，下载到电脑上后，直接双击即可安装到钥匙串中。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E4%BB%8E%E9%92%A5%E5%8C%99%E4%B8%B2%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%AF%81%E4%B9%A6.png" alt="从钥匙串中查看证书"></p>
<p>2、选中相应证书（开发环境推送证书或生成环境推送证书）右键 导出；</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E5%AF%BC%E5%87%BAP12%E6%96%87%E4%BB%B6.png" alt="导出P12文件"></p>
<p>3、点击存储后需要输入密码，密码要记住，上传到友盟（极光）后台时，需要用到。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E8%BE%93%E5%85%A5%E8%AF%81%E4%B9%A6%E5%AF%86%E7%A0%81.png" alt="输入证书密码"></p>
<h3 id="创建配置文件（Provisioning-Profiles）"><a href="#创建配置文件（Provisioning-Profiles）" class="headerlink" title="创建配置文件（Provisioning Profiles）"></a>创建配置文件（Provisioning Profiles）</h3><p>1、选中Provisioning Profiles 然后选中上方的加号。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="创建配置文件"></p>
<p>2、配置文件也分为开发和发布，我们这里以Ad Hoc为例，因为我们打测试包的时候，如果有些设备的UDID未添加进配置文件中，我们需要下载配置文件手动选择。而其他的的配置文件目前的Xcode会自动请求，所以一般不需要我们自己手动创建。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/Ad-Hoc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="Ad-Hoc配置文件"></p>
<p>3、选择刚创建的App ID,选择相应证书、选择测试的设备，然后创建名称一直点击Continue即可，最后下载下来。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/iOS%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="创建配置文件"></p>
<p>到此为止证书和配置文件之类的都创建完了~~</p>
<p>总结：</p>
<ul>
<li>导出p12证书的时候需要密码，上传到友盟（极光）后台需要输入密码。</li>
<li>开发和生成的推送证书创建成功后，到相应App ID 下查看是否有，如果没有可以停段时间刷新下，或下载下来手动上传上去。</li>
<li>新添加上的测试机的UDID，打包的时候没打包上去，需要重新创建配置文件，下载后将本地的删除，然后双击。不过刚添加UDID，重新创建配置文件后，我一般在打包的时候手动选择配置文件。</li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>lottie介绍及使用相关（翻译）</title>
    <url>/2019/09/09/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Lottie.jpg" alt="Lottie.jpg"></p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>因为应用的下个版本的很多交互是参考<a href="https://github.com/airbnb">Airbnb</a>来的，而<a href="https://github.com/airbnb">Airbnb</a>开源了一个叫做<a href="https://github.com/airbnb/lottie-ios">Lottie</a>动画库，而该库可以完成很多复杂炫酷的动画。所以在此翻译了Lottie的相应文档，熟悉其API。</p>
<p>通过阅读代码和Demo可以看出，Lottie是及其优秀的。它通过AE做成的动画导出JSON文件，然后前端使用Lottie直接加载JSON文件生成动画，不需要前端进行复杂的绘制等操作。同时Lottie 不仅支持iOS，还支持Mac、Android、web、React Native。而且它还具有占用内存少，加载流畅等特点，是个极其不错的第三方库。</p>
<h3 id="相应文档"><a href="#相应文档" class="headerlink" title="相应文档"></a>相应文档</h3><h1 id="Lottie-for-iOS-macOS-and-Android-and-React-Native"><a href="#Lottie-for-iOS-macOS-and-Android-and-React-Native" class="headerlink" title="Lottie for iOS, macOS (and Android and React Native)"></a>Lottie for iOS, macOS (and <a href="https://github.com/airbnb/lottie-android">Android</a> and <a href="https://github.com/airbnb/lottie-react-native">React Native</a>)</h1><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#installing-lottie">Installing Lottie</a></li>
<li><a href="#ios-sample-app">iOS Sample App</a></li>
<li><a href="#macos-sample-app">macOS Sample App</a></li>
<li><a href="#objective-c-examples">Objective C Examples</a></li>
<li><a href="#swift-examples">Swift Examples</a></li>
<li><a href="#debugging">Debugging Lottie</a></li>
<li><a href="#ios-view-controller-transitioning">iOS View Controller Transitioning</a></li>
<li><a href="#changing-animations-at-runtime">Changing Animations At Runtime</a></li>
<li><a href="#animated-controls-and-switches">Animated Controls and Switches</a></li>
<li><a href="#adding-views-to-an-animation-at-runtime">Adding Subviews to Animation</a></li>
<li><a href="#supported-after-effects-features">Supported After Effects Features</a></li>
<li><a href="#currently-unsupported-after-effects-features">Currently Unsupported After Effects Features</a></li>
<li><a href="#community-contributions">Community Contributions</a></li>
<li><a href="#alternatives">Alternatives</a></li>
<li><a href="#why-is-it-called-lottie">Why is it called Lottie?</a></li>
<li><a href="#contributing">Contributing</a></li>
<li><a href="#issues-or-feature-requests">Issues or feature requests?</a></li>
</ul>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Lottie是Android和iOS的移动库，用<a href="https://github.com/">bodymovin</a>解析<a href="http://www.adobe.com/products/aftereffects.html">Adobe After Effects</a>导出为json的动画并在移动设备上生成矢量动画，适用于React Native！</p>
<p>这是第一次，设计师可以创建和<em><strong>发送</strong></em>漂亮的动画，无需程序员辛苦地手动去创建它.<br>由于动画由JSON驱动，因此它们的体积非常小，但复杂程度可能很高！<br>可以播放动画，调整大小，循环，加快速度，减慢速度，颠倒速度，甚至交互式地清理动画。<br>Lottie也可以播放或循环动画的一部分，可能性是无限的！<br>动画甚至可以 <em><strong>在运行时以各种方式更改</strong></em> 改变颜色，位置或任何关键的可变值。<br>Lottie也支持原生的UIViewController Transitions！</p>
<p>这只是Lottie能力的一小部分</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Example1.gif" alt="Example1"><br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Example2.gif" alt="Example2"><br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Example3.gif" alt="Example3"></p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Abcs.gif" alt="Abcs"></p>
<h2 id="Installing-Lottie"><a href="#Installing-Lottie" class="headerlink" title="Installing Lottie"></a>Installing Lottie</h2><h3 id="Github-Repo"><a href="#Github-Repo" class="headerlink" title="Github Repo"></a>Github Repo</h3><p>您可以下载<a href="https://github.com/airbnb/lottie-ios/">Lottie Github Repo</a>和其中的Lottie.xcodeproj以构建动态或静态库。</p>
<h3 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h3><p>Get <a href="https://cocoapods.org/">Cocoapods</a><br>Add the pod to your podfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod &#x27;lottie-ios&#x27;</span><br></pre></td></tr></table></figure>
<p>run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure>

<p>通过CocoaPods安装到你的项目中后，将Lottie头文件导入工程中<br>Objective C<br><code>#import &lt;Lottie/Lottie.h&gt;</code><br>Swift<br><code>import Lottie</code></p>
<h3 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h3><p>Get <a href="https://github.com/Carthage/Carthage">Carthage</a></p>
<p>将 Lottie 添加到 Cartfile 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github &quot;airbnb/lottie-ios&quot; &quot;master&quot;</span><br></pre></td></tr></table></figure>
<p>run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">carthage update</span><br></pre></td></tr></table></figure>

<p>在你的应用程序的“常规”选项卡中“链接的框架和库”，需要从Carthage &#x2F; Build &#x2F; iOS目录中拖放“carthage update”生成的lottie-ios.framework。</p>
<h2 id="iOS-Sample-App"><a href="#iOS-Sample-App" class="headerlink" title="iOS Sample App"></a>iOS Sample App</h2><p>克隆这个repo，并尝试<a href="https://github.com/airbnb/lottie-ios/tree/master/Example">示例应用程序</a>,<br>repo中包含了一个macOS示例和一个iOS示例</p>
<p>iOS示例应用程序演示了Lottie的几项功能</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Example11.png" alt="Example 1"><br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Example12.png" alt="Example 2"><br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Example13.png" alt="Example 3"></p>
<p>动画资源管理器允许您移除，播放，循环和调整动画大小。<br>可以使用内置的扫描功能从应用程序包或从<a href="http://www.lottiefiles.com/">Lottie文件</a>中加载动画。</p>
<h2 id="macOS-Sample-App"><a href="#macOS-Sample-App" class="headerlink" title="macOS Sample App"></a>macOS Sample App</h2><p>下载这个 repo 并尝试运行 <a href="https://github.com/airbnb/lottie-ios/tree/master/Example">the Sample App</a>,<br>这个repo可以构建一个macOS示例和一个iOS示例</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/LottieViewer.png" alt="Lottie Viewer"></p>
<p>用于macOS的Lottie Viewer允许您拖放JSON文件用于播放，移除和循环动画。 Mac程序和iOS程序的动画代码是一样的，因此您将获得精确的Mac和iOS动画。</p>
<h2 id="Objective-C-Examples"><a href="#Objective-C-Examples" class="headerlink" title="Objective C Examples"></a>Objective C Examples</h2><p>Lottie可以从Build中的JSON文件或URL中加载动画</p>
<p>如何使用JSON文件加载动画，只需将生成的JSON文件添加到xcode的工程目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOTAnimationView *animation = [LOTAnimationView animationNamed:@&quot;Lottie&quot;];</span><br><span class="line">[self.view addSubview:animation];</span><br><span class="line">[animation playWithCompletion:^(BOOL animationFinished) &#123;</span><br><span class="line">  // Do Something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>如果你需要使用bundles中的JSON文件，加载动画</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOTAnimationView *animation = [LOTAnimationView animationNamed:@&quot;Lottie&quot; inBundle:[NSBundle YOUR_BUNDLE]];</span><br><span class="line">[self.view addSubview:animation];</span><br><span class="line">[animation playWithCompletion:^(BOOL animationFinished) &#123;</span><br><span class="line">  // Do Something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>

<p>或者你可以通过NSURL以编码的方式加载动画</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOTAnimationView *animation = [[LOTAnimationView alloc] initWithContentsOfURL:[NSURL URLWithString:URL]];</span><br><span class="line">[self.view addSubview:animation];</span><br></pre></td></tr></table></figure>

<p>Lottie支持iOS<code>UIViewContentModes</code>的aspectFit，aspectFill和scaleFill</p>
<p>你也可以设置动画的进度.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPoint translation = [gesture getTranslationInView:self.view];</span><br><span class="line">CGFloat progress = translation.y / self.view.bounds.size.height;</span><br><span class="line">animationView.animationProgress = progress;</span><br></pre></td></tr></table></figure>

<p>或者你可以只播放动画的一部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[lottieAnimation playFromProgress:0.25 toProgress:0.5 withCompletion:^(BOOL animationFinished) &#123;</span><br><span class="line">  // Do Something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h2 id="Swift-Examples"><a href="#Swift-Examples" class="headerlink" title="Swift Examples"></a>Swift Examples</h2><p>Lottie可以从Bundle中的JSON文件或URL中加载动画</p>
<p>如何使用JSON文件加载动画，只需将生成的JSON文件添加到xcode的工程目录中。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animationView <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;LottieLogo&quot;</span>)</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView)</span><br><span class="line">animationView.play&#123; (finished) <span class="keyword">in</span></span><br><span class="line">  <span class="comment">// Do Something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你需要使用bundles中的JSON文件，加载动画</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animationView <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;LottieLogo&quot;</span> bundle:yourBundle)</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView)</span><br><span class="line">animationView.play()</span><br></pre></td></tr></table></figure>

<p>或者你可以通过NSURL以编码的方式加载动画</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animationView <span class="operator">=</span> <span class="type">LOTAnimationView</span>(contentsOf: <span class="type">WebURL</span>)</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView)</span><br><span class="line">animationView.play()</span><br></pre></td></tr></table></figure>

<p>你也可以设置动画的进度.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> translation <span class="operator">=</span> gesture.getTranslationInView(<span class="keyword">self</span>.view)</span><br><span class="line"><span class="keyword">let</span> progress <span class="operator">=</span> translation.y <span class="operator">/</span> <span class="keyword">self</span>.view.bounds.size.height;</span><br><span class="line">animationView.animationProgress <span class="operator">=</span> progress</span><br></pre></td></tr></table></figure>

<p>或者你可以只播放动画的一部分：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">animationView.play(fromProgress: <span class="number">0.25</span>, toProgress: <span class="number">0.5</span>, withCompletion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<h2 id="iOS-View-Controller-Transitioning"><a href="#iOS-View-Controller-Transitioning" class="headerlink" title="iOS View Controller Transitioning"></a>iOS View Controller Transitioning</h2><p>Lottie带有一个<code>UIViewController</code>动画控制器，用于制作自定义viewController转换！</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Transition1.gif" alt="Transition1"><br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Transition2.gif" alt="Transition2"></p>
<p>只是成为过渡的delegate</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)_showTransitionA &#123;</span><br><span class="line">  ToAnimationViewController *vc = [[ToAnimationViewController alloc] init];</span><br><span class="line">  vc.transitioningDelegate = self;</span><br><span class="line">  [self presentViewController:vc animated:YES completion:NULL];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并用<code>LOTAnimationTransitionController</code>实现委托方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma mark -- View Controller Transitioning</span><br><span class="line"></span><br><span class="line">- (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source &#123;</span><br><span class="line">  LOTAnimationTransitionController *animationController = [[LOTAnimationTransitionController alloc] initWithAnimationNamed:@&quot;vcTransition1&quot; fromLayerNamed:@&quot;outLayer&quot; toLayerNamed:@&quot;inLayer&quot; applyAnimationTransform:NO];</span><br><span class="line">  return animationController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed &#123;</span><br><span class="line">  LOTAnimationTransitionController *animationController = [[LOTAnimationTransitionController alloc] initWithAnimationNamed:@&quot;vcTransition2&quot; fromLayerNamed:@&quot;outLayer&quot; toLayerNamed:@&quot;inLayer&quot; applyAnimationTransform:NO];</span><br><span class="line">  return animationController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过将applyAnimationTransform设置为YES，您可以使Lottie动画从一个视图控制器移动到另一个视图控制器。 它们将定位在图层的起源处。 设置为NO时，Lottie只是在指定z层时遮蔽具有指定层的视图控制器。</p>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>Lottie有几个要了解的调试功能。<br>当加载动画时，不支持的功能,其工程名将打印在控制台中。</p>
<p>如果您查看LOTHelpers.h这个类，您将看到两个调试标志。 <code>ENABLE_DEBUG_LOGGING</code>和<code>ENABLE_DEBUG_SHAPES</code>。<br><code>ENABLE_DEBUG_LOGGING</code>增加了Lottie Logging的详细程度。 它在动画期间随时记录一个动画节点。 如果您的动画不起作用，请将其打开并播放您的动画。 控制台日志可能会给你一些关于问题什么的线索。</p>
<p><code>ENABLE_DEBUG_SHAPES</code>为每个图层和形状的锚点画一个彩色正方形。 这对查看屏幕上是否有任何内容很有帮助。</p>
<h3 id="Keypaths"><a href="#Keypaths" class="headerlink" title="Keypaths"></a>Keypaths</h3><p>LOTAnimationView提供<code> - （void）logHierarchyKeypaths</code>，它将递归记录动画的所有可设置关键路径。 这有助于在运行时更改动画。</p>
<h2 id="Adding-Views-to-an-Animation-at-Runtime"><a href="#Adding-Views-to-an-Animation-at-Runtime" class="headerlink" title="Adding Views to an Animation at Runtime"></a>Adding Views to an Animation at Runtime</h2><p>您不仅可以（在运行时更改动画），还可以在运行时将自定义UI添加到LOTAnimation中。<br>下面的例子是一些进度用途的动态图像加载器。</p>
<h2 id="A-Dynamic-Image-Loading-Spinner"><a href="#A-Dynamic-Image-Loading-Spinner" class="headerlink" title="A Dynamic Image Loading Spinner"></a>A Dynamic Image Loading Spinner</h2><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Spinner.gif" alt="Spinner"></p>
<p>上面的例子显示了一个单独的LOTAnimationView，它使用加载微调器动画进行设置。 加载微调器会循环一部分动画，而图像则是异步下载的。 下载完成后，图像将添加到动画中，其余动画将无缝播放。 图像完美地执行动画并被调用。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Spinner_Alt.gif" alt="Spinner_Alt"></p>
<p>现在，动画已由设计师更改并需要更新。 所需的只是更新包中的JSON文件。 无需更改代码！</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Spinner_Dark.gif" alt="Spinner_Dark"></p>
<p>现在，动画已由设计师更改并需要更新。 所需的只是更新包中的JSON文件。 无需更改代码！</p>
<p>很强大吧 嗯?</p>
<p>查看下面的代码以获取示例！</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> Lottie</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> animationView: <span class="type">LOTAnimationView</span> <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;SpinnerSpin&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setup our animaiton view</span></span><br><span class="line">    animationView.contentMode <span class="operator">=</span> .scaleAspectFill</span><br><span class="line">    animationView.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">20</span>, y: <span class="number">20</span>, width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.view.addSubview(animationView)</span><br><span class="line">    <span class="comment">// Lets change some of the properties of the animation</span></span><br><span class="line">    <span class="comment">// We arent going to use the MaskLayer, so lets just hide it</span></span><br><span class="line">    animationView.setValue(<span class="number">0</span>, forKeypath: <span class="string">&quot;MaskLayer.Ellipse 1.Transform.Opacity&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// All of the strokes and fills are white, lets make them DarkGrey</span></span><br><span class="line">    animationView.setValue(<span class="type">UIColor</span>.darkGray, forKeypath: <span class="string">&quot;OuterRing.Stroke.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">    animationView.setValue(<span class="type">UIColor</span>.darkGray, forKeypath: <span class="string">&quot;InnerRing.Stroke.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">    animationView.setValue(<span class="type">UIColor</span>.darkGray, forKeypath: <span class="string">&quot;InnerRing.Fill.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Lets turn looping on, since we want it to repeat while the image is &#x27;Downloading&#x27;</span></span><br><span class="line">    animationView.loopAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// Now play from 0 to 0.5 progress and loop indefinitely.</span></span><br><span class="line">    animationView.play(fromProgress: <span class="number">0</span>, toProgress: <span class="number">0.5</span>, withCompletion: <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Lets simulate a download that finishes in 4 seconds.</span></span><br><span class="line">    <span class="keyword">let</span> dispatchTime <span class="operator">=</span> <span class="type">DispatchTime</span>.now() <span class="operator">+</span> <span class="number">4.0</span></span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: dispatchTime) &#123;</span><br><span class="line">      <span class="keyword">self</span>.simulateImageDownloaded()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">simulateImageDownloaded</span>() &#123;</span><br><span class="line">    <span class="comment">// Our downloaded image</span></span><br><span class="line">    <span class="keyword">let</span> image <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;avatar.jpg&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>(image: image)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We want the image to show up centered in the animation view at 150Px150P</span></span><br><span class="line">    <span class="comment">// Convert that rect to the animations coordinate space</span></span><br><span class="line">    <span class="comment">// The origin is set to -75, -75 because the origin is centered in the animation view</span></span><br><span class="line">    <span class="keyword">let</span> imageRect <span class="operator">=</span> animationView.convert(<span class="type">CGRect</span>(x: <span class="operator">-</span><span class="number">75</span>, y: <span class="operator">-</span><span class="number">75</span>, width: <span class="number">150</span>, height: <span class="number">150</span>), toLayerNamed: <span class="literal">nil</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setup our image view with the rect and add rounded corners</span></span><br><span class="line">    imageView.frame <span class="operator">=</span> imageRect</span><br><span class="line">    imageView.layer.masksToBounds <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    imageView.layer.cornerRadius <span class="operator">=</span> imageRect.width <span class="operator">/</span> <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Now we set the completion block on the currently running animation</span></span><br><span class="line">    animationView.completionBlock <span class="operator">=</span> &#123; (result: <span class="type">Bool</span>) <span class="keyword">in</span> ()</span><br><span class="line">      <span class="comment">// Add the image view to the layer named &quot;TransformLayer&quot;</span></span><br><span class="line">      <span class="keyword">self</span>.animationView.addSubview(imageView, toLayerNamed: <span class="string">&quot;TransformLayer&quot;</span>, applyTransform: <span class="literal">true</span>)</span><br><span class="line">      <span class="comment">// Now play the last half of the animation</span></span><br><span class="line">      <span class="keyword">self</span>.animationView.play(fromProgress: <span class="number">0.5</span>, toProgress: <span class="number">1</span>, withCompletion: &#123; (complete: <span class="type">Bool</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">// Now the animation has finished and our image is displayed on screen</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Image Downloaded and Displayed&quot;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Turn looping off. Once the current loop finishes the animation will stop </span></span><br><span class="line">    <span class="comment">// and the completion block will be called.</span></span><br><span class="line">    animationView.loopAnimation <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Changing-Animations-At-Runtime"><a href="#Changing-Animations-At-Runtime" class="headerlink" title="Changing Animations At Runtime"></a>Changing Animations At Runtime</h2><p>Lottie可以做的不仅仅是美丽的动画。 Lottie允许您在运行时更改<strong>动画</strong>。</p>
<h3 id="Say-we-want-to-create-4-toggle-switches"><a href="#Say-we-want-to-create-4-toggle-switches" class="headerlink" title="Say we want to create 4 toggle switches."></a>Say we want to create 4 toggle switches.</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Toggle.gif" alt="Toggle"></p>
<p>它很容易创建四个开关并播放它们：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animationView <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;toggle&quot;</span>);</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView)</span><br><span class="line">animationView.frame.origin.x <span class="operator">=</span> <span class="number">40</span></span><br><span class="line">animationView.frame.origin.y <span class="operator">=</span> <span class="number">20</span></span><br><span class="line">animationView.autoReverseAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView.loopAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView.play()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animationView2 <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;toggle&quot;</span>);</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView2)</span><br><span class="line">animationView2.frame.origin.x <span class="operator">=</span> <span class="number">40</span></span><br><span class="line">animationView2.frame.origin.y <span class="operator">=</span> animationView.frame.maxY <span class="operator">+</span> <span class="number">4</span></span><br><span class="line">animationView2.autoReverseAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView2.loopAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView2.play()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animationView3 <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;toggle&quot;</span>);</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView3)</span><br><span class="line">animationView3.frame.origin.x <span class="operator">=</span> <span class="number">40</span></span><br><span class="line">animationView3.frame.origin.y <span class="operator">=</span> animationView2.frame.maxY <span class="operator">+</span> <span class="number">4</span></span><br><span class="line">animationView3.autoReverseAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView3.loopAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView3.play()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animationView4 <span class="operator">=</span> <span class="type">LOTAnimationView</span>(name: <span class="string">&quot;toggle&quot;</span>);</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(animationView4)</span><br><span class="line">animationView4.frame.origin.x <span class="operator">=</span> <span class="number">40</span></span><br><span class="line">animationView4.frame.origin.y <span class="operator">=</span> animationView3.frame.maxY <span class="operator">+</span> <span class="number">4</span></span><br><span class="line">animationView4.autoReverseAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView4.loopAnimation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">animationView4.play()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Now-lets-change-their-colors"><a href="#Now-lets-change-their-colors" class="headerlink" title="Now lets change their colors"></a>Now lets change their colors</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/RecoloredToggle.gif" alt="Recolored Toggle"></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">animationView2.setValue(<span class="type">UIColor</span>.green, forKeypath: <span class="string">&quot;BG-On.Group 1.Fill 1.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">animationView3.setValue(<span class="type">UIColor</span>.red, forKeypath: <span class="string">&quot;BG-On.Group 1.Fill 1.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">animationView4.setValue(<span class="type">UIColor</span>.orange, forKeypath: <span class="string">&quot;BG-On.Group 1.Fill 1.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[animationView2 setValue:[UIColor greenColor] forKeypath:@&quot;BG-On.Group 1.Fill 1.Color&quot; atFrame:@0];</span><br></pre></td></tr></table></figure>
<p>keyPath是来自After Effects的图层和属性名称的点分离路径。</p>
<p>LOTAnimationView提供<code> - （void）logHierarchyKeypaths</code>，它将递归记录动画的所有可设置关键路径。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/KeyPath.png" alt="Key Path"><br>“BG-On.Group 1.Fill 1.Color”</p>
<h3 id="Now-lets-change-a-couple-of-properties"><a href="#Now-lets-change-a-couple-of-properties" class="headerlink" title="Now lets change a couple of properties"></a>Now lets change a couple of properties</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/MultipleColors.gif" alt="Multiple Colors"></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">animationView2.setValue(<span class="type">UIColor</span>.green, forKeypath: <span class="string">&quot;BG-On.Group 1.Fill 1.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br><span class="line">animationView2.setValue(<span class="type">UIColor</span>.red, forKeypath: <span class="string">&quot;BG-Off.Group 1.Fill 1.Color&quot;</span>, atFrame: <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>Lottie允许您更改After Effects动画制作过程中的<strong>任何</strong>属性。 如果关键帧不存在，则为您创建一个线性关键帧。 如果关键帧确实存在，那么它仅替换其数据。</p>
<h2 id="Animated-Controls-and-Switches"><a href="#Animated-Controls-and-Switches" class="headerlink" title="Animated Controls and Switches"></a>Animated Controls and Switches</h2><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/AnimatedButtons.gif" alt="Animated Buttons"></p>
<p>Lottie还拥有UIControl的自定义子类，用于创建自定义动画式交互式控件。<br>目前Lottie有<code>LOTAnimatedSwitch</code>这是一种切换式开关控制。 点击开关将播放On-Off或Off-On动画，并向所有目标发送UIControlStateValueChanged广播。 它跟UISwitch使用方式相同，同时使用Lottie设置了一些动画。</p>
<p>您可以使用conveneince方法或直接提供动画来初始化开关。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Convenience</span><br><span class="line">LOTAnimatedSwitch *toggle1 = [LOTAnimatedSwitch switchNamed:@&quot;Switch&quot;];</span><br><span class="line"> </span><br><span class="line">// Manually </span><br><span class="line">LOTComposition *comp = [LOTComposition animationNamed:@&quot;Switch&quot;];</span><br><span class="line">LOTAnimatedSwitch *toggle1 = [[LOTAnimatedSwitch alloc] initWithFrame:CGRectZero];</span><br><span class="line">[toggle1 setAnimationComp:comp];</span><br></pre></td></tr></table></figure>

<p>您还可以为动画的开启和关闭指定动画时间轴的特定部分。<br>默认情况下<code>LOTAnimatedSwitch</code>将向前播放动画，向后播放动画以关闭。</p>
<p>可以说提供的动画从0.5-1进度开始动画，从0-0.5开始动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// On animation is 0.5 to 1 progress.</span><br><span class="line">[toggle1 setProgressRangeForOnState:0.5 toProgress:1];</span><br><span class="line"></span><br><span class="line">/// Off animation is 0 to 0.5 progress.</span><br><span class="line">[toggle1 setProgressRangeForOffState:0 toProgress:0.5];</span><br></pre></td></tr></table></figure>

<p>此外，所有LOTAnimatedControls都支持更改状态更改的外观。 这需要After Effects中的一些设置。 Lottie会根据控件状态切换可见的动画图层。 这可以用于具有禁用，选定或突出显示的状态。 这些状态与After Effects中的图层名称关联，并在控件更改状态时动态显示。</p>
<p>可以说我们有一个正常和禁用状态的切换开关。 在效果中，我们有一个包含常规“按钮”和禁用“禁用”状态的Precomps的组合。 他们有不同的视觉风格。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Regular.png" alt="Regular"><br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/lottie%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/Disabled.png" alt="Disabled"></p>
<p>现在在代码中，我们可以将<code>UIControlState</code>与这些图层相关联</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Specify the layer names for different states</span><br><span class="line">[statefulSwitch setLayerName:@&quot;Button&quot; forState:UIControlStateNormal];</span><br><span class="line">[statefulSwitch setLayerName:@&quot;Disabled&quot; forState:UIControlStateDisabled];</span><br><span class="line"></span><br><span class="line">// Changes visual appearance by switching animation layer to &quot;Disabled&quot;</span><br><span class="line">statefulSwitch.enabled = NO;</span><br><span class="line"></span><br><span class="line">// Changes visual appearance by switching animation layer to &quot;Button&quot;</span><br><span class="line">statefulSwitch.enabled = YES;</span><br></pre></td></tr></table></figure>

<h2 id="Supported-After-Effects-Features"><a href="#Supported-After-Effects-Features" class="headerlink" title="Supported After Effects Features"></a>Supported After Effects Features</h2><h3 id="Keyframe-Interpolation"><a href="#Keyframe-Interpolation" class="headerlink" title="Keyframe Interpolation"></a>Keyframe Interpolation</h3><hr>
<ul>
<li>Linear Interpolation</li>
<li>Bezier Interpolation</li>
<li>Hold Interpolation</li>
<li>Rove Across Time</li>
<li>Spatial Bezier</li>
</ul>
<h3 id="Solids"><a href="#Solids" class="headerlink" title="Solids"></a>Solids</h3><hr>
<ul>
<li>Transform Anchor Point</li>
<li>Transform Position</li>
<li>Transform Scale</li>
<li>Transform Rotation</li>
<li>Transform Opacity</li>
</ul>
<h3 id="Masks"><a href="#Masks" class="headerlink" title="Masks"></a>Masks</h3><hr>
<ul>
<li>Path</li>
<li>Opacity</li>
<li>Multiple Masks (additive, subtractive and intersection)</li>
</ul>
<h3 id="Track-Mattes"><a href="#Track-Mattes" class="headerlink" title="Track Mattes"></a>Track Mattes</h3><hr>
<ul>
<li>Alpha Matte</li>
</ul>
<h3 id="Parenting"><a href="#Parenting" class="headerlink" title="Parenting"></a>Parenting</h3><hr>
<ul>
<li>Multiple Parenting</li>
<li>Nulls</li>
</ul>
<h3 id="Shape-Layers"><a href="#Shape-Layers" class="headerlink" title="Shape Layers"></a>Shape Layers</h3><hr>
<ul>
<li>Anchor Point</li>
<li>Position</li>
<li>Scale</li>
<li>Rotation</li>
<li>Opacity</li>
<li>Path</li>
<li>Group Transforms (Anchor point, position, scale etc)</li>
<li>Rectangle (All properties)</li>
<li>Eclipse (All properties)(Eclipse</li>
<li>Multiple paths in one group</li>
<li>Even-Odd winding paths</li>
<li>Reverse Fill Rule</li>
</ul>
<h4 id="Stroke-shape-layer"><a href="#Stroke-shape-layer" class="headerlink" title="Stroke (shape layer)"></a>Stroke (shape layer)</h4><hr>
<ul>
<li>Stroke Color</li>
<li>Stroke Opacity</li>
<li>Stroke Width</li>
<li>Line Cap</li>
<li>Dashes (Now Animated!)</li>
</ul>
<h4 id="Fill-shape-layer"><a href="#Fill-shape-layer" class="headerlink" title="Fill (shape layer)"></a>Fill (shape layer)</h4><hr>
<ul>
<li>Fill Color</li>
<li>Fill Opacity</li>
</ul>
<h4 id="Trim-Paths-shape-layer"><a href="#Trim-Paths-shape-layer" class="headerlink" title="Trim Paths (shape layer)"></a>Trim Paths (shape layer)</h4><hr>
<ul>
<li>Trim Paths Start</li>
<li>Trim Paths End</li>
<li>Trim Paths Offset</li>
</ul>
<h3 id="Repeaters"><a href="#Repeaters" class="headerlink" title="Repeaters"></a>Repeaters</h3><hr>
<ul>
<li>Supports repeater transforms</li>
<li>Offset currently not supported.</li>
</ul>
<h3 id="Gradients"><a href="#Gradients" class="headerlink" title="Gradients"></a>Gradients</h3><hr>
<ul>
<li>Support for Linear Gradients</li>
<li>Support for Radial Gradients</li>
</ul>
<h3 id="Polystar-and-Polygon"><a href="#Polystar-and-Polygon" class="headerlink" title="Polystar and Polygon"></a>Polystar and Polygon</h3><hr>
<ul>
<li>Supported! Theres a known bug if the roundness is greater than 100 percent.</li>
</ul>
<h4 id="Layer-Features"><a href="#Layer-Features" class="headerlink" title="Layer Features"></a>Layer Features</h4><hr>
<ul>
<li>Precomps</li>
<li>Image Layers</li>
<li>Shape Layers</li>
<li>Null Layers</li>
<li>Solid Layers</li>
<li>Parenting Layers</li>
<li>Alpha Matte Layers</li>
</ul>
<h2 id="Currently-Unsupported-After-Effects-Features"><a href="#Currently-Unsupported-After-Effects-Features" class="headerlink" title="Currently Unsupported After Effects Features"></a>Currently Unsupported After Effects Features</h2><ul>
<li>Merge Shapes</li>
<li>Alpha Inverted Masks</li>
<li>Trim Shapes Individually feature of Trim Paths</li>
<li>Expressions</li>
<li>3d Layer support</li>
<li>Time remapping &#x2F; Layer Reverse</li>
<li>Layer Blend Modes</li>
<li>Layer Effects</li>
</ul>
<h2 id="Community-Contributions"><a href="#Community-Contributions" class="headerlink" title="Community Contributions"></a>Community Contributions</h2><ul>
<li><a href="https://github.com/martijn00/LottieXamarin">Xamarin bindings</a></li>
<li><a href="https://github.com/bradmartin/nativescript-lottie">NativeScript bindings</a></li>
<li><a href="https://github.com/m1ga/ti.animation">Appcelerator Titanium bindings</a></li>
<li>macOS Support added by <a href="https://github.com/pawlowskialex">Alex Pawlowski</a></li>
</ul>
<h2 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h2><ol>
<li>手动构建动画。 手动构建动画是跨Android和iOS设计和工程的时间承诺。 通常很难甚至不可能证明花费这么多时间来获得动画是正确的。</li>
<li>[Facebook关键帧]（<a href="https://github.com/facebookincubator/Keyframes%EF%BC%89%E3%80%82">https://github.com/facebookincubator/Keyframes）。</a> 关键帧是来自Facebook的精彩新图书馆，它们为反应而构建。 但是，关键帧不支持Lottie的一些功能，如遮罩，遮罩，修剪路径，破折号图案等。</li>
<li>Gifs。 GIF的尺寸是bodymovin JSON尺寸的两倍多，并且以固定的尺寸渲染，无法放大以匹配大屏幕和高密度屏幕。</li>
<li>Png序列。 Png序列比gifs更糟，因为它们的文件大小通常是bodymovin json大小的30-50倍，也不能放大。</li>
</ol>
<h2 id="Why-is-it-called-Lottie"><a href="#Why-is-it-called-Lottie" class="headerlink" title="Why is it called Lottie?"></a>Why is it called Lottie?</h2><p>Lottie（洛蒂）是以德国电影导演和剪影动画的先驱者命名的。 她最着名的电影是“阿彻梅德王子历险记”（1926年） - 这是迄今为止最古老的长篇动画电影，在沃尔特迪斯尼的长篇白雪公主和七个小矮人（1937）之前超过十年<br><a href="https://www.youtube.com/watch?v=LvU55CUw5Ck&feature=youtu.be">The art of Lotte Reineger</a></p>
<h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>贡献者非常欢迎。 只需上传一份描述您所做更改的公关。</p>
<p>如果你想添加更多的JSON文件，请随时这样做！</p>
<h2 id="Issues-or-feature-requests"><a href="#Issues-or-feature-requests" class="headerlink" title="Issues or feature requests?"></a>Issues or feature requests?</h2><p>文件github问题的任何意外中断。 如果After Effects文件无效，请将其附加到您的问题中。 在没有原始文件的情况下进行调试要困难得多。 Lottie由[Brandon Withrow]开发和维护（mailto：<a href="mailto:&#x62;&#x72;&#x61;&#110;&#100;&#x6f;&#110;&#x2e;&#119;&#x69;&#116;&#x68;&#x72;&#111;&#119;&#x40;&#x61;&#x69;&#114;&#x62;&#110;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x62;&#x72;&#x61;&#110;&#100;&#x6f;&#110;&#x2e;&#119;&#x69;&#116;&#x68;&#x72;&#111;&#119;&#x40;&#x61;&#x69;&#114;&#x62;&#110;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>）。 请随时通过电子邮件或[Twitter]（<a href="https://twitter.com/theWithra%EF%BC%89">https://twitter.com/theWithra）</a></p>
<h2 id="Roadmap-In-no-particular-order"><a href="#Roadmap-In-no-particular-order" class="headerlink" title="Roadmap (In no particular order)"></a>Roadmap (In no particular order)</h2><ul>
<li>添加对交互式动画过渡的支持</li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本的使用及整理</title>
    <url>/2020/04/29/shell%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>这篇文章应该算对自己之前使用Jenkins、Shell脚本打包项目的总结。</p>
<p>毕竟之前很多东西要么存到项目中，要么存在笔记中，并没有进行整理。</p>
<h1 id="关于shell"><a href="#关于shell" class="headerlink" title="关于shell"></a>关于shell</h1><p>关于<code>shell</code>脚本的介绍，可以查看<a href="https://baike.baidu.com/item/shell/99702">百度百科</a>中的介绍。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任何代码最终需要被‘翻译’成二进制的形式才能在计算机中执行。</span><br><span class="line"></span><br><span class="line">有的编程语言，如C/C++、Pascal、Go语言、汇编等，必须在程序运行之前将所有代码都编程成二进制形式(可执行文件),用户拿到最终生成的可执行文件，看不到源码。</span><br><span class="line"></span><br><span class="line">这个过程叫做编译（Compile），这样的编程语言叫做[编译型语言]，完成编译过程的软件叫做编译器[Compiler]。</span><br><span class="line"></span><br><span class="line">而有的编程语言，如Shell、JavaScript、Python、PHP等，需要一边执行一边翻译，不会生成任何可执行文件，用户拿到源代码才能运行程序。程序运行后会即时翻译，翻译完一部分执行一部分，不用等到所有代码都翻译完。</span><br><span class="line"></span><br><span class="line">这个过程叫做解释，这样的编程语言叫做[解释型语言]或者[脚本语言]（Script），完成解释过程的软件叫做解释器。</span><br><span class="line"></span><br><span class="line">编译型语言的优点是执行速度快、对硬件要求低、保密性好，适合开发操作系统、大型应用程序、数据库等。</span><br><span class="line"></span><br><span class="line">脚本语言的优点是使用灵活、部署容易、跨平台性好、非常适合Web开发以及小工具的制作。</span><br><span class="line"></span><br><span class="line">Shell 就是一种脚本语言，我们编写完源码后不用编译，直接运行源码即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="shell历史"><a href="#shell历史" class="headerlink" title="shell历史"></a>shell历史</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于历史原因，UNIX系统上有很多种Shell：</span><br><span class="line"></span><br><span class="line">1.sh（Bourne Shell）：由Steve Bourne开发，各种UNIX系统都配有sh。</span><br><span class="line"></span><br><span class="line">2.csh（C Shell）：由Bill Joy开发，随BSD UNIX发布，它的流程控制语句很像C语言，支持很多Bourne Shell所不支持的功能：作业控制，命令历史，命令行编辑。</span><br><span class="line"></span><br><span class="line">3.ksh（Korn Shell）：由David Korn开发，向后兼容sh的功能，并且添加了csh引入的新功能，是目前很多UNIX系统标准配置的Shell，在这些系统上/bin/sh往往是指向/bin/ksh的符号链接。</span><br><span class="line"></span><br><span class="line">4.tcsh（TENEX C Shell）：是csh的增强版本，引入了命令补全等功能，在FreeBSD、Mac OS X等系统上替代了csh。</span><br><span class="line"></span><br><span class="line">5.bash（Bourne Again Shell）：由GNU开发的Shell，主要目标是与POSIX标准保持一致，同时兼顾对sh的兼容，bash从csh和ksh借鉴了很多功能，是各种Linux发行版标准配置的Shell，在Linux系统上/bin/sh往往是指向/bin/bash的符号链接。虽然如此，bash和sh还是有很多不同的，一方面，bash扩展了一些命令和参数，另一方面，bash并不完全和sh兼容，有些行为并不一致，所以bash需要模拟sh的行为：当我们通过sh这个程序名启动bash时，bash可以假装自己是sh，不认扩展的命令，并且行为与sh保持一致。</span><br></pre></td></tr></table></figure>



<h1 id="术语名词"><a href="#术语名词" class="headerlink" title="术语名词"></a>术语名词</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- IDC--（Internet Data Center)互联网数据中心，主要服务包括整机租用、服务器托管、机柜租用、机房租用、专线接入和网络管理服务等。广义上的IDC业务，实际上就是数据中心所提供的一切服务。客户租用数据中心的服务器和带宽，并利用数据中心的技术力量，来实现自己对软、硬件的要求，搭建自己的互联网平台，享用数据中心所提供的一系列服务。</span><br><span class="line"></span><br><span class="line">- ISP--(Internet Service Provider)互联网服务提供商，即向广大用户综合提供互联网接入业务、信息业务、和增值业务的电信运营商。</span><br><span class="line"></span><br><span class="line">- ICP--(Internet Content Provider)互联网内容提供商，向广大用户综合提供互联网信息业务和增值业务的电信运营商。 根据中华人民共和国国务院令第292号《互联网信息服务管理办法》规定，国家对提供互联网信息服务的ICP实行许可证制度。从而，ICP证成为网站经营的许可证，经营性网站必须办理ICP证，否则就属于非法经营。因此，办理ICP证是企业网站合法经营的需要.</span><br><span class="line"></span><br><span class="line">- CDN--(Content Delivery Network)内容分发网络,依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。 CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</span><br><span class="line"></span><br><span class="line">- LVS--(Linux Virtual Server)的简写，意即Linux虚拟服务器，是一个虚拟的服务器集群系统。LVS集群采用IP负载均衡技术和基于内容请求分发技术。调度器具有很好的吞吐率，将请求均衡地转移到不同的服务器上执行，且调度器自动屏蔽掉服务器的故障，从而将一组服务器构成一个高性能的、高可用的虚拟服务器。整个服务器集群的结构对客户是透明的，而且无需修改客户端和服务器端的程序。为此，在设计时需要考虑系统的透明性、可伸缩性、高可用性和易管理性。</span><br><span class="line"></span><br><span class="line">- CGI--(Common Gateway Interface)通用网关接口。CGI规范允许Web服务器执行外部程序，并将它们的输出发送给Web浏览器，CGI将Web的一组简单的静态超媒体文档变成一个完整的新的交互式媒体。</span><br><span class="line"></span><br><span class="line">- GSLB--(Global Server Load Balance，全局负载均衡）作为 CDN 系统架构中最核心的部分，负责流量调度.基于DNS的GSLB 绝大部分使用负载均衡技术的应用都通过域名来访问目的主机，在用户发出任何应用连接请求时，首先必须通过DNS请求获得服务器的IP地址，基于DNS的GSLB正是在返回DNS解析结果的过程中进行智能决策，给用户返回一个最佳的服务IP。用户应用流程与没有GSLB时未发生任何变化。这也是市场上主流的GSLB技术。</span><br><span class="line"></span><br><span class="line">- BOSS--(Business &amp; Operation Support System，BOSS)是业务运营支撑系统。通常所说的BOSS分为四个部分：计费及结算系统、营业与账务系统、客户服务系统和决策支持系统。BOSS从业务层面来看就是一个框架，来承载业务系统、CRM系统、计费系统。实现统一框架中的纵向、横向管理。该系统最早由电信部门的计费系统发展演变而来，基本功能包括客户资料管理、产品管理、用户订购管理、计费、出帐、结算等，负责登记客户资料、管理用户订购服务的提供、实时的根据不同产品、套餐的资费标准计算业务（手机、固定电话用户通话时、点播收视、宽带流量与时间等）的消费金额，准实时及定期计算用户帐单，实时或定期结算用户各种消费费用。</span><br></pre></td></tr></table></figure>


<h1 id="常用shell命令"><a href="#常用shell命令" class="headerlink" title="常用shell命令"></a>常用shell命令</h1><h3 id="获取SDK或IPA的版本号"><a href="#获取SDK或IPA的版本号" class="headerlink" title="获取SDK或IPA的版本号"></a>获取SDK或IPA的版本号</h3><p>使用<code>shell</code>脚本获取SDK或IPA的版本号，跟我们在代码中获取IPA的版本号一样，都是解析Info.plist中的<code>CFBundleShortVersionString</code>。</p>
<p>所以在这里就可以使用Mac自带的专门解析plist的小工具<code>PlistBuddy</code>来获取项目的版本号。</p>
<p>使用方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#获取Inof.plist中的版本号</span><br><span class="line">buildVersion=$(/usr/libexec/PlistBuddy -c &quot;print:CFBundleShortVersionString&quot; $&#123;projectPath&#125;../tpocr/tpocr/Info.plist)</span><br></pre></td></tr></table></figure>

<p>同理我们可以将打包IPA所需的<code>scheme</code>、<code>configuration</code>……等信息存放到<code>config.plist</code>中，使用<code>PlistBuddy</code>直接读取，我们需要修改相应参数的时候可以直接修改<code>config.plist</code>，避免直接修改脚本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#工程项目路径</span><br><span class="line">projectPath=&quot;$(pwd)&quot;</span><br><span class="line">#build配置文件</span><br><span class="line">buildConfigFile=&quot;$&#123;projectPath&#125;/Packaging/config.plist&quot;</span><br><span class="line">#打包的target名称</span><br><span class="line">buildSchemeName=$(/usr/libexec/PlistBuddy -c &quot;print:build:scheme&quot; $&#123;buildConfigFile&#125;)</span><br><span class="line">#build configuration</span><br><span class="line">buildConfiguration=$(/usr/libexec/PlistBuddy -c &quot;print:build:configuration&quot; $&#123;buildConfigFile&#125;)</span><br><span class="line">#export options plist</span><br><span class="line">exportOptionsPlist=&quot;$&#123;projectPath&#125;/Packaging/$(/usr/libexec/PlistBuddy -c &quot;print:build:exportPlist&quot; $&#123;buildConfigFile&#125;).plist&quot;</span><br><span class="line">#用于签名的企业开发者名称</span><br><span class="line">enterpriseDistributionSignName=$(/usr/libexec/PlistBuddy -c &quot;print:resign:enterpriseName&quot; $&#123;buildConfigFile&#125;)</span><br><span class="line">#企业打包provision证书</span><br><span class="line">enterpriseProvisionFile=&quot;$&#123;projectPath&#125;/Packaging/$(/usr/libexec/PlistBuddy -c &quot;print:resign:enterpriseProvision&quot; $&#123;buildConfigFile&#125;).mobileprovision&quot;</span><br><span class="line">#Jenkins job</span><br><span class="line">jenkinsJob=$(/usr/libexec/PlistBuddy -c &quot;print:deliver:jenkinsJob&quot; $&#123;buildConfigFile&#125;)</span><br><span class="line">#fir api token</span><br><span class="line">firAPIToken=$(/usr/libexec/PlistBuddy -c &quot;print:deliver:fir&quot; $&#123;buildConfigFile&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="使用Xcodebuild指令对项目进行打包"><a href="#使用Xcodebuild指令对项目进行打包" class="headerlink" title="使用Xcodebuild指令对项目进行打包"></a>使用Xcodebuild指令对项目进行打包</h3><p>xcodebuild是命令行工具包(Command Line Tools)中的一项，是一个轻量型的、可以与Xcode分开的、在Mac上单独下载的命令行工具包。</p>
<p>在<code>/usr/bin</code>目录下，我们可以在终端使用<code>open /usr/bin</code>查找该工具。而在<code>usr/bin</code>目录下还有很多命令工具，比如：git、make、xcrun等。</p>
<p>在xcode9后build不指定任何签名信息，具体编译命令如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#编译IPA</span><br><span class="line">xcodebuild -workspace $&#123;workspace&#125; -scheme &quot;$buildSchemeName&quot; -configuration &quot;$buildConfiguration&quot; -sdk iphoneos clean archive -archivePath $&#123;archiveFilePath&#125; | xcpretty</span><br><span class="line"></span><br><span class="line">#导出ipa文件</span><br><span class="line">xcodebuild -allowProvisioningUpdates -exportArchive -archivePath $&#123;archiveFilePath&#125; -exportPath $&#123;ipaDir&#125; -exportOptionsPlist $&#123;exportOptionsPlist&#125; | xcpretty</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>导出的文件中除了导出ipa包以外，还有dSYM文件。</p>
<p>dSYM是符号表文件，每次打包我们需要保存好，如果后面项目出现问题，我们可以使用dSYM分析其崩溃信息。</p>
<h3 id="使用xcodebuild指令打包Framework"><a href="#使用xcodebuild指令打包Framework" class="headerlink" title="使用xcodebuild指令打包Framework"></a>使用xcodebuild指令打包Framework</h3><p>我们手动打包Framework的时候，是先将每个指令集进行打包，然后使用<code>lipo -create</code>将其合并，使用命令打包也是这个逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### Build simulator platform. (i386, x86_64)</span><br><span class="line">echo &quot;========== Build Simulator Platform ==========&quot;</span><br><span class="line">echo &quot;===== Build Simulator Platform: i386 =====&quot;</span><br><span class="line">xcodebuild -project &quot;$&#123;PROJECT_FILE_PATH&#125;&quot; -target &quot;$&#123;TARGET_NAME&#125;&quot; -configuration &quot;$&#123;CONFIGURATION&#125;&quot; -sdk iphonesimulator BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; OBJROOT=&quot;$&#123;OBJROOT&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; CONFIGURATION_BUILD_DIR=&quot;$&#123;IPHONE_SIMULATOR_BUILD_DIR&#125;/i386&quot; SYMROOT=&quot;$&#123;SYMROOT&#125;&quot; ARCHS=&#x27;i386&#x27; VALID_ARCHS=&#x27;i386&#x27; -UseModernBuildSystem=NO $ACTION</span><br><span class="line"></span><br><span class="line">echo &quot;===== Build Simulator Platform: x86_64 =====&quot;</span><br><span class="line">xcodebuild -project &quot;$&#123;PROJECT_FILE_PATH&#125;&quot; -target &quot;$&#123;TARGET_NAME&#125;&quot; -configuration &quot;$&#123;CONFIGURATION&#125;&quot; -sdk iphonesimulator BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; OBJROOT=&quot;$&#123;OBJROOT&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; CONFIGURATION_BUILD_DIR=&quot;$&#123;IPHONE_SIMULATOR_BUILD_DIR&#125;/x86_64&quot; SYMROOT=&quot;$&#123;SYMROOT&#125;&quot; ARCHS=&#x27;x86_64&#x27; VALID_ARCHS=&#x27;x86_64&#x27; -UseModernBuildSystem=NO $ACTION</span><br><span class="line"></span><br><span class="line">### Build device platform. (armv7, arm64)</span><br><span class="line">echo &quot;========== Build Device Platform ==========&quot;</span><br><span class="line">echo &quot;===== Build Device Platform: armv7 =====&quot;</span><br><span class="line">xcodebuild -project &quot;$&#123;PROJECT_FILE_PATH&#125;&quot; -target &quot;$&#123;TARGET_NAME&#125;&quot; -configuration &quot;$&#123;CONFIGURATION&#125;&quot; -sdk iphoneos BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; OBJROOT=&quot;$&#123;OBJROOT&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot;  CONFIGURATION_BUILD_DIR=&quot;$&#123;IPHONE_DEVICE_BUILD_DIR&#125;/armv7&quot; SYMROOT=&quot;$&#123;SYMROOT&#125;&quot; ARCHS=&#x27;armv7&#x27; VALID_ARCHS=&#x27;armv7&#x27; -UseModernBuildSystem=NO $ACTION</span><br><span class="line"></span><br><span class="line">echo &quot;===== Build Device Platform: arm64 =====&quot;</span><br><span class="line">xcodebuild -project &quot;$&#123;PROJECT_FILE_PATH&#125;&quot; -target &quot;$&#123;TARGET_NAME&#125;&quot; -configuration &quot;$&#123;CONFIGURATION&#125;&quot; -sdk iphoneos BUILD_DIR=&quot;$&#123;BUILD_DIR&#125;&quot; OBJROOT=&quot;$&#123;OBJROOT&#125;&quot; BUILD_ROOT=&quot;$&#123;BUILD_ROOT&#125;&quot; CONFIGURATION_BUILD_DIR=&quot;$&#123;IPHONE_DEVICE_BUILD_DIR&#125;/arm64&quot; SYMROOT=&quot;$&#123;SYMROOT&#125;&quot; ARCHS=&#x27;arm64&#x27;  VALID_ARCHS=&#x27;arm64&#x27; -UseModernBuildSystem=NO $ACTION</span><br><span class="line"></span><br><span class="line">### Build device platform. (arm64, armv7)</span><br><span class="line">echo &quot;========== Build Universal Platform ==========&quot;</span><br><span class="line">## Copy the framework structure to the universal folder (clean it first).</span><br><span class="line">rm -rf &quot;$&#123;UNIVERSAL_OUTPUTFOLDER&#125;&quot;</span><br><span class="line">mkdir -p &quot;$&#123;UNIVERSAL_OUTPUTFOLDER&#125;&quot;</span><br><span class="line">## Copy the last product files of xcodebuild command.</span><br><span class="line">cp -R &quot;$&#123;IPHONE_DEVICE_BUILD_DIR&#125;/arm64/$&#123;PRODUCT_NAME&#125;.framework&quot; &quot;$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;PRODUCT_NAME&#125;.framework&quot;</span><br><span class="line">echo &quot;Smash them together to combine all architectures.&quot;</span><br><span class="line">lipo -create  &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/i386/$&#123;PRODUCT_NAME&#125;.framework/$&#123;PRODUCT_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/x86_64/$&#123;PRODUCT_NAME&#125;.framework/$&#123;PRODUCT_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos/armv7/$&#123;PRODUCT_NAME&#125;.framework/$&#123;PRODUCT_NAME&#125;&quot; &quot;$&#123;BUILD_DIR&#125;/$&#123;CONFIGURATION&#125;-iphoneos/arm64/$&#123;PRODUCT_NAME&#125;.framework/$&#123;PRODUCT_NAME&#125;&quot; -output &quot;$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;PRODUCT_NAME&#125;.framework/$&#123;PRODUCT_NAME&#125;&quot;</span><br><span class="line">echo &quot;Copy Framework Code Signature&quot;</span><br><span class="line">cp -R &quot;$&#123;IPHONE_SIMULATOR_BUILD_DIR&#125;/x86_64/$&#123;PRODUCT_NAME&#125;.framework/_CodeSignature&quot; &quot;$&#123;UNIVERSAL_OUTPUTFOLDER&#125;/$&#123;PRODUCT_NAME&#125;.framework/&quot;</span><br></pre></td></tr></table></figure>

<h3 id="关于xcpretty"><a href="#关于xcpretty" class="headerlink" title="关于xcpretty"></a>关于xcpretty</h3><p>将<code>xcpretty</code>拎出来单独说，是因为刚复工回来，更新了电脑的<code>ruby</code>然后导致了打包脚本不能使用，才注意到它。</p>
<p><code>xcpretty</code>是一个用ruby实现的小工具，可以使用<code>gem install xcpretty</code>，作用是美化<code>xcodebuild</code>冗长的日志输入。</p>
<p>如需使用<code>xcpretty</code>对日志进行美化只需要在<code>xcodebuild</code>命令后面加入<code> | xcpretty</code>即可。</p>
<p>类似于下方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcodebuild -workspace $&#123;workspace&#125; -scheme &quot;$buildSchemeName&quot; -configuration &quot;$buildConfiguration&quot; | xcpretty</span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>shell脚本的for循环结构和我们的<code>OC</code>中<code>for in</code>遍历有些类似。<br>例如下方脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#获取所有jar包并上传</span><br><span class="line">for workitem in `ls $&#123;updatePath&#125;/`; do</span><br><span class="line">workspaceDir=$&#123;updatePath&#125;&quot;/&quot;$workitem</span><br><span class="line">echo &quot;\n---jar包目录：\n$&#123;workspaceDir&#125;---\n&quot;</span><br><span class="line">java -jar /Users/apple/Desktop/build/UpdateService/jenkins-file-service.jar $&#123;workspaceDir&#125; 1 /home/verifaceops/jenkins-file/taiping_src/</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>该脚本其主要功能是遍历<code>$&#123;updatePath&#125;</code>目录下的的文件，然后将所有文件上传到公司内网的文件服务器中。</p>
<p>这很类似于我们了解的<code>for in</code>遍历了。</p>
<p>for循环的一般格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p><code>shll</code>中的<code>while</code>循环也跟<code>OC</code>和<code>C</code>的用法和写法类似，比如下方一个验证密码是否正确（当然在现实中并不会用到）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#脚本内容：</span><br><span class="line">echo &quot;请输入打包密码:&quot;</span><br><span class="line">read TRY</span><br><span class="line">while [ &quot;$TRY&quot; != &quot;tplife&quot; ]; do</span><br><span class="line">  echo &quot;抱歉，密码错误！\n请重新输入：&quot;</span><br><span class="line">  read TRY</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#终端输出：</span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro Python_Project % sh build.sh</span><br><span class="line">请输入打包密码:</span><br><span class="line">123</span><br><span class="line">抱歉，密码错误！</span><br><span class="line">请重新输入：</span><br><span class="line">tplife</span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro Python_Project %</span><br></pre></td></tr></table></figure>

<h3 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h3><p><code>shell</code>的<code>if</code>语法跟<code>OC</code>类似，但感觉所有语言并没有<code>OC</code>写着优雅。</p>
<p>if语句语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>if else 语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>if else-if else 语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-eq           //等于</span><br><span class="line">-ne           //不等于</span><br><span class="line">-gt            //大于 （greater ）</span><br><span class="line">-lt            //小于  （less）</span><br><span class="line">-ge            //大于等于</span><br><span class="line">-le            //小于等于</span><br><span class="line"></span><br><span class="line">命令的逻辑关系：</span><br><span class="line">在linux 中 命令执行状态：0 为真，其他为假</span><br><span class="line">逻辑与： &amp;&amp;</span><br><span class="line">第一个条件为假时，第二条件不用再判断，最终结果已经有；</span><br><span class="line">第一个条件为真时，第二条件必须得判断；</span><br><span class="line">逻辑或： ||</span><br><span class="line">逻辑非： ！</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#xcode9后build不指定任何签名信息</span><br><span class="line">xcodebuild -workspace $&#123;workspace&#125; -scheme &quot;$buildSchemeName&quot; -configuration &quot;$buildConfiguration&quot; -sdk iphoneos clean archive -archivePath $&#123;archiveFilePath&#125; | xcpretty</span><br><span class="line"></span><br><span class="line">EXCODE=$?</span><br><span class="line">if [ &quot;$EXCODE&quot; == &quot;0&quot; ]; then</span><br><span class="line">echo &quot;Build, Archive ----&gt; O.K&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;***********************编译失败********************************&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">echo &quot;***********************结束build archive app文件***********************&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将打包的apk和IPA包上传到蒲公英</span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">#  update.sh</span><br><span class="line">#  </span><br><span class="line">#</span><br><span class="line">#  Created by CNTP on 2020/04/14.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">export LANG=&quot;en_US.UTF-8&quot;</span><br><span class="line"></span><br><span class="line">updateAndroidPath=&quot;/Users/apple/Desktop/build/OCR/Android&quot;</span><br><span class="line">updateiOSPath=&quot;/Users/apple/Desktop/build/OCR/iOS&quot;</span><br><span class="line">userKey=&quot;**&quot;</span><br><span class="line">apiKey=&quot;**&quot;</span><br><span class="line"></span><br><span class="line"># ----- 上传Android apk -----</span><br><span class="line">echo &quot;\n\n----- 上传Android apk -----\n\n&quot;</span><br><span class="line"></span><br><span class="line">for workitem in `ls $&#123;updateAndroidPath&#125;`; do</span><br><span class="line">filePath=$&#123;updateAndroidPath&#125;&quot;/&quot;$workitem</span><br><span class="line">if [[ &quot;$&#123;filePath##*.&#125;&quot;x = &quot;apk&quot;x ]]; then</span><br><span class="line">echo &quot;----文件----$&#123;filePath&#125;---&quot;</span><br><span class="line">curl -F &quot;file=@$filePath&quot; \</span><br><span class="line">-F &quot;uKey=$&#123;userKey&#125;&quot; \</span><br><span class="line">-F &quot;_api_key=$&#123;apiKey&#125;&quot; \</span><br><span class="line">https://www.pgyer.com/apiv1/app/upload</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">#----- 上传iOS IPA -----</span><br><span class="line">echo &quot;\n\n----- 上传iOS IPA -----\n\n&quot;</span><br><span class="line">cd $&#123;updateiOSPath&#125;</span><br><span class="line">unzip ipa-1.0.zip</span><br><span class="line">for workitem in `ls $&#123;updateiOSPath&#125;/ipa-1.0/1.0`; do</span><br><span class="line">filePath=$&#123;updateiOSPath&#125;&quot;/ipa-1.0/1.0/&quot;$workitem</span><br><span class="line">if [[ &quot;$&#123;filePath##*.&#125;&quot;x = &quot;ipa&quot;x ]]; then</span><br><span class="line">echo &quot;----文件----$&#123;filePath&#125;---&quot;</span><br><span class="line">curl -F &quot;file=@$filePath&quot; \</span><br><span class="line">-F &quot;uKey=$&#123;userKey&#125;&quot; \</span><br><span class="line">-F &quot;_api_key=$&#123;apiKey&#125;&quot; \</span><br><span class="line">https://www.pgyer.com/apiv1/app/upload</span><br><span class="line">rm -rf $&#123;updateiOSPath&#125;/ipa-1.0</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Android打包"><a href="#Android打包" class="headerlink" title="Android打包"></a>Android打包</h3><p>Android打包是调用工程根目录下的gradlew来完成打包。</p>
<p>cd到相应工程目录，然后执行<code>gradlew clean</code>清理缓存，然后再执行<code>gradlew assembleRelease</code>进行打包。</p>
<p>具体命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gradlew clean</span><br><span class="line">gradlew assembleRelease</span><br></pre></td></tr></table></figure>

<p><code>gradlew clean </code>是清理工程目录下的<code>build</code>文件夹。<br><code>gradlew assembleRelease</code>是编译并打<code>Release</code>包，同理<code>gradlew assembleDebug</code>是编译是打<code>Debug</code>包。</p>
<p>我们也可以使用<code>gradlew build</code>命令将<code>debug</code>、<code>release</code>环境的包都打出来。</p>
<h3 id="服务端打包"><a href="#服务端打包" class="headerlink" title="服务端打包"></a>服务端打包</h3><p>服务端那边是使用<code>Maven</code>进行自动化打包。</p>
<p>全程也只有下方一个指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install -DskipTests</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>首先使用<code>Maven</code>需要在<code>Mac</code>系统上安装和配置<code>Maven</code>环境。</p>
<p>具体配置可以参考<a href="https://blog.csdn.net/winstonlau/article/details/95605557">Mac系统下载、安装和配置Maven环境</a>这篇文章。</p>
<p>因还有其他逻辑，所以将所有逻辑存放在<code>build.sh</code>文件中。但在调用时发现，会报配置出错。</p>
<p>所以需要在<code>Jenkins</code>配置的<code>Execute shell</code>中添加<code>#!/bin/bash -ilex</code>。</p>
<p>其中<code>build.sh</code>为编译jar包的脚本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash -ilex</span><br><span class="line">cd /Users/apple/Desktop/build/taiping_src</span><br><span class="line">sh build.sh</span><br></pre></td></tr></table></figure>



<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%AE%BC%E5%B1%A4">shell-维基百科</a></li>
<li><a href="https://baike.baidu.com/item/shell/99702">shell-百度百科</a></li>
<li><a href="https://www.runoob.com/linux/linux-shell.html">shell教程-菜鸟</a></li>
<li><a href="http://c.biancheng.net/shell/base/">Shell基础</a></li>
<li><a href="https://www.runoob.com/linux/linux-command-manual.html">Linux命令大全</a></li>
<li><a href="https://www.jianshu.com/p/7248276d3bb5">Gradle与Maven的区别</a></li>
<li><a href="https://blog.csdn.net/winstonlau/article/details/95605557">Mac系统下载、安装和配置Maven环境</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Certimate申请Let&#39;s Encrypt免费SSL证书完整指南</title>
    <url>/2025/09/13/%E4%BD%BF%E7%94%A8Certimate%E7%94%B3%E8%AF%B7Let&#39;s%20Encrypt%E5%85%8D%E8%B4%B9SSL%E8%AF%81%E4%B9%A6%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="使用Certimate申请Let’s-Encrypt免费SSL证书完整指南"><a href="#使用Certimate申请Let’s-Encrypt免费SSL证书完整指南" class="headerlink" title="使用Certimate申请Let’s Encrypt免费SSL证书完整指南"></a>使用Certimate申请Let’s Encrypt免费SSL证书完整指南</h1><h2 id="📋-目录"><a href="#📋-目录" class="headerlink" title="📋 目录"></a>📋 目录</h2><ul>
<li><a href="#1-certimate%E7%AE%80%E4%BB%8B">1. Certimate简介</a><ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7">核心特性</a></li>
</ul>
</li>
<li><a href="#2-%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6%E6%9C%8D%E5%8A%A1%E5%95%86%E5%AF%B9%E6%AF%94">2. 免费SSL证书服务商对比</a><ul>
<li><a href="#%E4%B8%BB%E6%B5%81%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6%E9%A2%81%E5%8F%91%E6%9C%BA%E6%9E%84">主流免费SSL证书颁发机构</a></li>
<li><a href="#%E6%8E%A8%E8%8D%90%E9%80%89%E6%8B%A9">推荐选择</a></li>
</ul>
</li>
<li><a href="#3-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">3. 快速开始</a><ul>
<li><a href="#31-%E5%AE%89%E8%A3%85certimate">3.1 安装Certimate</a></li>
<li><a href="#32-%E7%B3%BB%E7%BB%9F%E8%A6%81%E6%B1%82">3.2 系统要求</a></li>
</ul>
</li>
<li><a href="#4-dns%E6%8F%90%E4%BE%9B%E5%95%86%E9%85%8D%E7%BD%AE">4. DNS提供商配置</a><ul>
<li><a href="#41-%E9%98%BF%E9%87%8C%E4%BA%91dns%E9%85%8D%E7%BD%AE">4.1 阿里云DNS配置</a></li>
<li><a href="#42-%E5%85%B6%E4%BB%96dns%E6%8F%90%E4%BE%9B%E5%95%86">4.2 其他DNS提供商</a></li>
</ul>
</li>
<li><a href="#5-%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6">5. 申请免费SSL证书</a><ul>
<li><a href="#51-lets-encrypt-%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE">5.1 Let’s Encrypt 证书配置</a></li>
<li><a href="#52-%E9%85%8D%E7%BD%AEdns%E6%8F%90%E4%BE%9B%E5%95%86">5.2 配置DNS提供商</a></li>
<li><a href="#53-%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E5%92%8C%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6">5.3 添加域名和申请证书</a></li>
<li><a href="#54-%E8%AF%81%E4%B9%A6%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9">5.4 证书类型选择</a></li>
<li><a href="#55-%E9%AA%8C%E8%AF%81%E6%96%B9%E5%BC%8F%E9%80%89%E6%8B%A9">5.5 验证方式选择</a></li>
</ul>
</li>
<li><a href="#6-%E8%AF%81%E4%B9%A6%E9%83%A8%E7%BD%B2">6. 证书部署</a><ul>
<li><a href="#61-%E4%BA%91%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2">6.1 云服务部署</a></li>
<li><a href="#62-web%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2">6.2 Web服务器部署</a></li>
<li><a href="#63-%E5%85%B6%E4%BB%96%E9%83%A8%E7%BD%B2%E7%9B%AE%E6%A0%87">6.3 其他部署目标</a></li>
</ul>
</li>
<li><a href="#7-%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6%E5%90%8C%E6%AD%A5">7. 多服务器证书同步</a><ul>
<li><a href="#71-%E5%8D%95%E7%82%B9%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88%E6%8E%A8%E8%8D%90">7.1 单点管理方案（推荐）</a></li>
<li><a href="#72-%E8%AF%81%E4%B9%A6%E5%88%86%E5%8F%91%E8%84%9A%E6%9C%AC">7.2 证书分发脚本</a></li>
<li><a href="#73-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E6%96%B9%E6%A1%88">7.3 负载均衡器方案</a></li>
<li><a href="#74-%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%90%8C%E6%AD%A5">7.4 容器化部署同步</a></li>
<li><a href="#75-%E7%9B%91%E6%8E%A7%E5%92%8C%E5%91%8A%E8%AD%A6">7.5 监控和告警</a></li>
</ul>
</li>
<li><a href="#8-%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4">8. 故障排除</a><ul>
<li><a href="#81-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">8.1 常见问题</a></li>
<li><a href="#82-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90">8.2 日志分析</a></li>
<li><a href="#83-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">8.3 性能优化</a></li>
</ul>
</li>
<li><a href="#9-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">9. 最佳实践</a><ul>
<li><a href="#91-%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%AE">9.1 安全建议</a></li>
<li><a href="#92-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">9.2 性能优化</a></li>
<li><a href="#93-%E5%A4%87%E4%BB%BD%E7%AD%96%E7%95%A5">9.3 备份策略</a></li>
</ul>
</li>
<li><a href="#10-%E6%80%BB%E7%BB%93">10. 总结</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5">相关链接</a></li>
</ul>
<hr>
<h2 id="1-Certimate简介"><a href="#1-Certimate简介" class="headerlink" title="1. Certimate简介"></a>1. Certimate简介</h2><p><a href="https://docs.certimate.me/docs/introduction/">Certimate</a>是一款开源的SSL证书管理工具，专门用于自动申请、部署和续期Let’s Encrypt等免费SSL证书。通过Certimate，您可以轻松管理多个域名的SSL证书，实现完全自动化的证书生命周期管理。</p>
<h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><ul>
<li><strong>完全自动化</strong>：从证书申请到部署的全流程自动化</li>
<li><strong>多种证书类型</strong>：支持单域名、多域名、泛域名证书</li>
<li><strong>多种验证方式</strong>：支持DNS-01和HTTP-01两种质询方式</li>
<li><strong>广泛兼容</strong>：支持40+域名托管商，包括阿里云、腾讯云、Cloudflare等</li>
<li><strong>灵活部署</strong>：支持100+部署目标，如CDN、负载均衡、Kubernetes等</li>
<li><strong>自动续期</strong>：证书到期前自动续期，无需人工干预</li>
</ul>
<h2 id="2-免费SSL证书服务商对比"><a href="#2-免费SSL证书服务商对比" class="headerlink" title="2. 免费SSL证书服务商对比"></a>2. 免费SSL证书服务商对比</h2><h3 id="主流免费SSL证书颁发机构"><a href="#主流免费SSL证书颁发机构" class="headerlink" title="主流免费SSL证书颁发机构"></a>主流免费SSL证书颁发机构</h3><table>
<thead>
<tr>
<th>服务商</th>
<th>证书有效期</th>
<th>域名类型支持</th>
<th>申请限制</th>
<th>特点</th>
<th>推荐指数</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Let’s Encrypt</strong></td>
<td>90天</td>
<td>单域名、多域名、泛域名</td>
<td>每周50个证书&#x2F;域名</td>
<td>通过Certimate自动申请，完全免费，支持自动续期</td>
<td>⭐⭐⭐⭐⭐</td>
</tr>
<tr>
<td><strong>ZeroSSL</strong></td>
<td>90天</td>
<td>单域名、多域名、泛域名</td>
<td>需要注册账号，每月3个免费证书</td>
<td>企业级支持，界面友好 <mcreference link="https://zerossl.com" index="2">2</mcreference></td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td><strong>阿里云SSL</strong></td>
<td>90天</td>
<td>单域名</td>
<td>每年20张免费证书</td>
<td>DigiCert品牌，国内访问快 <mcreference link="https://aliyunfuwuqi.com/mianfeissl/" index="2">2</mcreference></td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td><strong>腾讯云SSL</strong></td>
<td>90天</td>
<td>单域名</td>
<td>每年20张免费证书</td>
<td>TrustAsia品牌，一键部署 <mcreference link="https://cloud.tencent.com/product/ssl" index="1">1</mcreference></td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td><strong>华为云SSL</strong></td>
<td>365天</td>
<td>单域名</td>
<td>每年20张免费证书</td>
<td>DigiCert品牌，有效期1年 <mcreference link="https://www.cnblogs.com/osfipin/p/15952888.html" index="2">2</mcreference></td>
<td>⭐⭐⭐⭐⭐</td>
</tr>
<tr>
<td><strong>百度云SSL</strong></td>
<td>365天</td>
<td>单域名</td>
<td>需要注册，限制较多</td>
<td>TrustAsia品牌，有效期1年 <mcreference link="https://zhuanlan.zhihu.com/p/174755007" index="3">3</mcreference></td>
<td>⭐⭐⭐</td>
</tr>
<tr>
<td><strong>Google Trust Services</strong></td>
<td>90天</td>
<td>单域名、多域名、泛域名</td>
<td>无明确限制</td>
<td>谷歌背书，兼容性好 <mcreference link="https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs" index="4">4</mcreference></td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td><strong>Buypass Go SSL</strong></td>
<td>180天</td>
<td>单域名、多域名、泛域名</td>
<td>每个域名5个证书&#x2F;月</td>
<td>挪威公司，有效期更长 <mcreference link="https://technocript.com/free-ssl-certificates-alternatives-to-lets-encrypt/" index="1">1</mcreference></td>
<td>⭐⭐⭐</td>
</tr>
<tr>
<td><strong>SSL.com</strong></td>
<td>90天</td>
<td>单域名</td>
<td>需要注册，限制较多</td>
<td>提供多种付费选项</td>
<td>⭐⭐</td>
</tr>
</tbody></table>
<h3 id="推荐选择"><a href="#推荐选择" class="headerlink" title="推荐选择"></a>推荐选择</h3><p><strong>国外用户推荐：</strong> Let’s Encrypt</p>
<ul>
<li>完全免费，无需注册</li>
<li>生态最完善，支持最广泛</li>
<li>Certimate默认推荐</li>
</ul>
<p><strong>国内用户推荐：</strong> 华为云SSL证书</p>
<ul>
<li>有效期1年，续期频率低</li>
<li>国内访问速度快</li>
<li>DigiCert权威品牌</li>
</ul>
<p><strong>企业用户推荐：</strong> 阿里云SSL证书 或 腾讯云SSL证书</p>
<ul>
<li>与云服务深度集成</li>
<li>一键部署到CDN、负载均衡等</li>
<li>本土化技术支持</li>
</ul>
<p><strong>开发测试推荐：</strong> Let’s Encrypt 或 ZeroSSL</p>
<ul>
<li>支持泛域名证书</li>
<li>自动化程度高</li>
<li>适合频繁测试场景</li>
</ul>
<p><strong>Google Cloud用户推荐：</strong> Google Trust Services</p>
<ul>
<li>与GCP服务无缝集成</li>
<li>性能和稳定性有保障</li>
</ul>
<h2 id="3-快速开始"><a href="#3-快速开始" class="headerlink" title="3. 快速开始"></a>3. 快速开始</h2><h3 id="3-1-安装Certimate"><a href="#3-1-安装Certimate" class="headerlink" title="3.1 安装Certimate"></a>3.1 安装Certimate</h3><h4 id="方式一：二进制部署（推荐）"><a href="#方式一：二进制部署（推荐）" class="headerlink" title="方式一：二进制部署（推荐）"></a>方式一：二进制部署（推荐）</h4><ol>
<li>从<a href="https://github.com/certimate-go/certimate/releases">GitHub Releases</a>下载最新版本</li>
<li>解压并运行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载并解压</span></span><br><span class="line">wget https://github.com/certimate-go/certimate/releases/latest/download/certimate-linux-amd64.tar.gz</span><br><span class="line">tar -xzf certimate-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行服务</span></span><br><span class="line">./certimate serve</span><br></pre></td></tr></table></figure></li>
<li>浏览器访问 <a href="http://127.0.0.1:8090/">http://127.0.0.1:8090</a></li>
<li>使用默认账号登录：<ul>
<li>账号：<a href="mailto:&#x61;&#100;&#109;&#105;&#x6e;&#64;&#x63;&#x65;&#114;&#116;&#105;&#x6d;&#97;&#x74;&#x65;&#x2e;&#x66;&#x75;&#110;">&#x61;&#100;&#109;&#105;&#x6e;&#64;&#x63;&#x65;&#114;&#116;&#105;&#x6d;&#97;&#x74;&#x65;&#x2e;&#x66;&#x75;&#110;</a></li>
<li>密码：1234567890</li>
</ul>
</li>
</ol>
<h4 id="方式二：Docker部署"><a href="#方式二：Docker部署" class="headerlink" title="方式二：Docker部署"></a>方式二：Docker部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Docker运行</span></span><br><span class="line">docker run -d \</span><br><span class="line">  --name certimate \</span><br><span class="line">  -p 8090:8090 \</span><br><span class="line">  -v certimate_data:/app/data \</span><br><span class="line">  certimate/certimate:latest</span><br></pre></td></tr></table></figure>

<h3 id="3-2-系统要求"><a href="#3-2-系统要求" class="headerlink" title="3.2 系统要求"></a>3.2 系统要求</h3><p><strong>最低要求：</strong></p>
<ul>
<li>操作系统：Linux、Windows、macOS</li>
<li>内存：512MB RAM</li>
<li>存储：100MB 可用空间</li>
<li>网络：能够访问互联网</li>
</ul>
<p><strong>网络访问要求：</strong></p>
<ul>
<li>ACME服务器端点（各证书颁发机构）</li>
<li>阿里云API端点：<code>https://alidns.aliyuncs.com</code></li>
<li>如使用HTTP-01验证：需开放80端口</li>
</ul>
<h2 id="4-DNS提供商配置"><a href="#4-DNS提供商配置" class="headerlink" title="4. DNS提供商配置"></a>4. DNS提供商配置</h2><p>Certimate支持40+种DNS提供商，用于DNS-01验证方式申请Let’s Encrypt证书。以下以阿里云DNS为例说明配置过程：</p>
<h3 id="4-1-阿里云DNS配置"><a href="#4-1-阿里云DNS配置" class="headerlink" title="4.1 阿里云DNS配置"></a>4.1 阿里云DNS配置</h3><h4 id="4-1-1-创建RAM用户"><a href="#4-1-1-创建RAM用户" class="headerlink" title="4.1.1 创建RAM用户"></a>4.1.1 创建RAM用户</h4><p>为安全起见，建议创建专用的RAM用户：</p>
<ol>
<li>登录阿里云控制台</li>
<li>进入”访问控制(RAM)”服务</li>
<li>创建新的RAM用户</li>
<li>生成AccessKey ID和AccessKey Secret</li>
</ol>
<h4 id="4-1-2-配置权限策略"><a href="#4-1-2-配置权限策略" class="headerlink" title="4.1.2 配置权限策略"></a>4.1.2 配置权限策略</h4><p>为RAM用户分配DNS管理权限：</p>
<p><strong>使用系统策略（推荐）：</strong></p>
<ul>
<li><code>AliyunDNSFullAccess</code></li>
</ul>
<p><strong>或使用自定义策略：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Statement&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Effect&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Action&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;alidns:DescribeDomains&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;alidns:DescribeDomainRecords&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;alidns:AddDomainRecord&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;alidns:UpdateDomainRecord&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;alidns:DeleteDomainRecord&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-其他DNS提供商"><a href="#4-2-其他DNS提供商" class="headerlink" title="4.2 其他DNS提供商"></a>4.2 其他DNS提供商</h3><p>Certimate还支持以下主流DNS提供商：</p>
<p><strong>国外提供商：</strong></p>
<ul>
<li>Cloudflare：全球最大的DNS服务商，免费且功能强大</li>
<li>AWS Route 53：亚马逊云DNS服务，企业级可靠性</li>
<li>Google Cloud DNS：谷歌云DNS服务，性能优异</li>
<li>DigitalOcean：简单易用，适合个人开发者</li>
</ul>
<p><strong>国内提供商：</strong></p>
<ul>
<li>腾讯云DNS：与腾讯云服务深度集成</li>
<li>华为云DNS：企业级DNS解析服务</li>
<li>百度云DNS：百度智能云DNS服务</li>
</ul>
<p><strong>配置要点：</strong></p>
<ul>
<li>确保API密钥具有DNS记录管理权限</li>
<li>建议使用子账号而非主账号密钥</li>
<li>定期轮换API密钥以提高安全性</li>
</ul>
<h2 id="5-申请免费SSL证书"><a href="#5-申请免费SSL证书" class="headerlink" title="5. 申请免费SSL证书"></a>5. 申请免费SSL证书</h2><h3 id="5-1-Let’s-Encrypt-证书配置"><a href="#5-1-Let’s-Encrypt-证书配置" class="headerlink" title="5.1 Let’s Encrypt 证书配置"></a>5.1 Let’s Encrypt 证书配置</h3><h4 id="5-1-1-基础配置"><a href="#5-1-1-基础配置" class="headerlink" title="5.1.1 基础配置"></a>5.1.1 基础配置</h4><p>Let’s Encrypt是全球最受信任的免费SSL证书颁发机构，Certimate已内置完整的Let’s Encrypt支持，用户只需简单配置即可自动申请和续期证书。</p>
<p><strong>快速配置步骤：</strong></p>
<ol>
<li><strong>选择证书颁发机构</strong>：在Certimate中选择”Let’s Encrypt”</li>
<li><strong>填写邮箱地址</strong>：用于接收重要通知（如证书即将到期）</li>
<li><strong>选择验证方式</strong>：DNS验证（推荐）或HTTP验证</li>
<li><strong>配置域名</strong>：单域名、多域名或通配符域名</li>
</ol>
<p><strong>推荐配置：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生产环境推荐配置</span></span><br><span class="line"><span class="string">证书颁发机构:</span> <span class="string">Let&#x27;s</span> <span class="string">Encrypt</span> <span class="string">(生产环境)</span></span><br><span class="line"><span class="string">邮箱地址:</span> <span class="string">admin@yourdomain.com</span></span><br><span class="line"><span class="string">密钥类型:</span> <span class="string">RSA</span> <span class="number">2048</span><span class="string">位</span> <span class="string">(推荐)</span></span><br><span class="line"><span class="string">验证方式:</span> <span class="string">DNS-01</span> <span class="string">(支持通配符)</span></span><br><span class="line"><span class="string">自动续期:</span> <span class="string">开启</span> <span class="string">(证书到期前30天自动续期)</span></span><br></pre></td></tr></table></figure>

<h4 id="5-1-2-域名验证方式"><a href="#5-1-2-域名验证方式" class="headerlink" title="5.1.2 域名验证方式"></a>5.1.2 域名验证方式</h4><p>Certimate支持两种Let’s Encrypt域名验证方式，根据您的需求选择合适的验证方法：</p>
<p><strong>DNS-01验证（推荐）：</strong></p>
<ul>
<li>✅ 支持通配符证书（*.example.com）</li>
<li>✅ 无需开放80&#x2F;443端口</li>
<li>✅ 适合内网服务器</li>
<li>✅ 安全性更高</li>
</ul>
<p><strong>配置步骤：</strong></p>
<ol>
<li>选择验证方式：DNS-01</li>
<li>选择DNS提供商：如阿里云DNS、Cloudflare等</li>
<li>填入DNS API密钥</li>
<li>Certimate自动添加TXT记录完成验证</li>
</ol>
<p><strong>HTTP-01验证：</strong></p>
<ul>
<li>✅ 配置简单，无需DNS API</li>
<li>✅ 适合单域名证书</li>
<li>❌ 不支持通配符证书</li>
<li>❌ 需要开放80端口</li>
</ul>
<p><strong>配置步骤：</strong></p>
<ol>
<li>选择验证方式：HTTP-01</li>
<li>确保域名解析到服务器</li>
<li>确保80端口可访问</li>
<li>Certimate自动在网站根目录创建验证文件</li>
</ol>
<h4 id="5-1-3-证书类型选择"><a href="#5-1-3-证书类型选择" class="headerlink" title="5.1.3 证书类型选择"></a>5.1.3 证书类型选择</h4><p>根据您的域名需求，选择合适的证书类型：</p>
<p><strong>单域名证书：</strong></p>
<ul>
<li>适用场景：单个域名（如 example.com）</li>
<li>配置示例：<code>example.com</code></li>
<li>推荐用途：简单网站、API服务</li>
</ul>
<p><strong>多域名证书（SAN）：</strong></p>
<ul>
<li>适用场景：多个不同域名</li>
<li>配置示例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主域名：example.com</span><br><span class="line">附加域名：</span><br><span class="line">  - www.example.com</span><br><span class="line">  - api.example.com</span><br><span class="line">  - admin.example.com</span><br></pre></td></tr></table></figure></li>
<li>推荐用途：多服务架构、微服务</li>
</ul>
<p><strong>通配符证书（推荐）：</strong></p>
<ul>
<li>适用场景：所有子域名（如 *.example.com）</li>
<li>配置示例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通配符域名：*.example.com</span><br><span class="line">根域名：example.com</span><br></pre></td></tr></table></figure></li>
<li>验证要求：必须使用DNS-01验证</li>
<li>推荐用途：SaaS平台、多租户应用</li>
</ul>
<h4 id="5-1-4-最佳实践建议"><a href="#5-1-4-最佳实践建议" class="headerlink" title="5.1.4 最佳实践建议"></a>5.1.4 最佳实践建议</h4><p><strong>证书密钥类型选择：</strong></p>
<ul>
<li>🔧 <strong>RSA 2048位</strong>：兼容性最佳，推荐生产环境使用</li>
<li>🔧 <strong>ECDSA P-256</strong>：性能更优，文件更小，现代应用推荐</li>
</ul>
<p><strong>自动续期配置：</strong></p>
<ul>
<li>⏰ 续期时间：证书到期前30天自动续期</li>
<li>🔄 检查频率：每天检查一次证书状态</li>
<li>📧 通知设置：续期成功&#x2F;失败邮件通知</li>
</ul>
<p><strong>安全注意事项：</strong></p>
<ul>
<li>🔐 定期备份证书私钥</li>
<li>🔐 使用强密码保护Certimate管理界面</li>
<li>🔐 限制API密钥权限范围</li>
<li>🔐 启用操作日志审计</li>
</ul>
<p><strong>性能优化建议：</strong></p>
<ul>
<li>📈 使用CDN加速证书分发</li>
<li>📈 启用OCSP Stapling提升握手速度</li>
<li>📈 配置HTTP&#x2F;2提升传输效率</li>
</ul>
<p><strong>备用链：</strong></p>
<ul>
<li>根证书：DST Root CA X3（已过期，但某些旧设备仍需要）</li>
<li>使用场景：需要支持Android 7.1.1以下设备</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">certificate_chain:</span></span><br><span class="line">  <span class="attr">prefer_chain:</span> <span class="string">&quot;ISRG Root X1&quot;</span>  <span class="comment"># 或 &quot;DST Root CA X3&quot;</span></span><br><span class="line">  <span class="attr">include_root:</span> <span class="literal">false</span>  <span class="comment"># 通常不包含根证书</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-配置DNS提供商"><a href="#5-2-配置DNS提供商" class="headerlink" title="5.2 配置DNS提供商"></a>5.2 配置DNS提供商</h3><p>在Certimate中配置DNS提供商，用于DNS-01验证方式：</p>
<h4 id="5-2-1-添加DNS提供商"><a href="#5-2-1-添加DNS提供商" class="headerlink" title="5.2.1 添加DNS提供商"></a>5.2.1 添加DNS提供商</h4><ol>
<li>登录Certimate管理界面</li>
<li>进入”DNS提供商”页面</li>
<li>点击”添加DNS提供商”</li>
<li>根据您的DNS服务商选择对应类型</li>
</ol>
<h4 id="5-2-2-常用DNS提供商配置"><a href="#5-2-2-常用DNS提供商配置" class="headerlink" title="5.2.2 常用DNS提供商配置"></a>5.2.2 常用DNS提供商配置</h4><p><strong>阿里云DNS配置：</strong></p>
<ul>
<li>类型：选择”阿里云”</li>
<li>名称：阿里云DNS（自定义名称）</li>
<li>AccessKey ID：您的AccessKey ID</li>
<li>AccessKey Secret：您的AccessKey Secret</li>
<li>区域：cn-hangzhou（可选）</li>
</ul>
<p><strong>Cloudflare配置：</strong></p>
<ul>
<li>类型：选择”Cloudflare”</li>
<li>名称：Cloudflare DNS</li>
<li>API Token：您的Cloudflare API Token</li>
<li>Zone ID：域名的Zone ID（可选）</li>
</ul>
<p><strong>腾讯云DNS配置：</strong></p>
<ul>
<li>类型：选择”腾讯云”</li>
<li>名称：腾讯云DNS</li>
<li>SecretId：您的SecretId</li>
<li>SecretKey：您的SecretKey</li>
<li>区域：ap-beijing（可选）</li>
</ul>
<p><strong>AWS Route 53配置：</strong></p>
<ul>
<li>类型：选择”AWS Route 53”</li>
<li>名称：AWS DNS</li>
<li>Access Key ID：您的AWS Access Key</li>
<li>Secret Access Key：您的AWS Secret Key</li>
<li>区域：us-east-1（根据实际情况选择）</li>
</ul>
<h3 id="5-3-添加域名和申请证书"><a href="#5-3-添加域名和申请证书" class="headerlink" title="5.3 添加域名和申请证书"></a>5.3 添加域名和申请证书</h3><h4 id="5-3-1-配置域名证书"><a href="#5-3-1-配置域名证书" class="headerlink" title="5.3.1 配置域名证书"></a>5.3.1 配置域名证书</h4><ol>
<li>进入”域名”管理页面</li>
<li>点击”添加域名”</li>
<li>填入域名信息：<ul>
<li><strong>域名</strong>：example.com（您的实际域名）</li>
<li><strong>DNS提供商</strong>：选择之前配置的DNS提供商</li>
<li><strong>证书类型</strong>：选择需要的类型（单域名&#x2F;多域名&#x2F;泛域名）</li>
<li><strong>证书颁发机构</strong>：推荐选择Let’s Encrypt</li>
<li><strong>验证方式</strong>：推荐选择DNS-01验证</li>
</ul>
</li>
</ol>
<h4 id="5-3-2-Let’s-Encrypt配置要点"><a href="#5-3-2-Let’s-Encrypt配置要点" class="headerlink" title="5.3.2 Let’s Encrypt配置要点"></a>5.3.2 Let’s Encrypt配置要点</h4><p><strong>证书颁发机构选择：</strong></p>
<ul>
<li><strong>Let’s Encrypt</strong>：完全免费，90天有效期，支持自动续期</li>
<li><strong>ZeroSSL</strong>：免费版每月3个证书，需要注册账号</li>
<li><strong>Buypass</strong>：180天有效期，挪威公司</li>
</ul>
<p><strong>验证方式选择：</strong></p>
<ul>
<li><strong>DNS-01验证</strong>：支持泛域名，无需开放端口，推荐使用</li>
<li><strong>HTTP-01验证</strong>：仅支持单域名，需要开放80端口</li>
</ul>
<p><strong>域名格式示例：</strong></p>
<ul>
<li>单域名：<code>example.com</code></li>
<li>多域名：<code>example.com,www.example.com,api.example.com</code></li>
<li>泛域名：<code>*.example.com</code>（注意：泛域名只能使用DNS-01验证）</li>
</ul>
<h3 id="5-4-证书类型选择"><a href="#5-4-证书类型选择" class="headerlink" title="5.4 证书类型选择"></a>5.4 证书类型选择</h3><p><strong>单域名证书：</strong></p>
<ul>
<li>适用于：单个域名（如 example.com）</li>
<li>配置：直接输入域名即可</li>
</ul>
<p><strong>多域名证书（SAN）：</strong></p>
<ul>
<li>适用于：多个不同域名</li>
<li>配置：在域名字段中用逗号分隔多个域名</li>
<li>示例：example.com,<a href="http://www.example.com,api.example.com/">www.example.com,api.example.com</a></li>
</ul>
<p><strong>泛域名证书：</strong></p>
<ul>
<li>适用于：一个域名的所有子域名</li>
<li>配置：使用通配符格式</li>
<li>示例：*.example.com</li>
<li>注意：只能使用DNS-01验证方式</li>
</ul>
<h3 id="5-5-验证方式选择"><a href="#5-5-验证方式选择" class="headerlink" title="5.5 验证方式选择"></a>5.5 验证方式选择</h3><p><strong>DNS-01验证（推荐）：</strong></p>
<ul>
<li>优势：支持泛域名证书，无需开放端口</li>
<li>原理：在DNS中添加TXT记录验证域名所有权</li>
<li>适用场景：所有场景，特别是泛域名证书</li>
</ul>
<p><strong>HTTP-01验证：</strong></p>
<ul>
<li>优势：验证过程简单直观</li>
<li>原理：在网站根目录放置验证文件</li>
<li>限制：不支持泛域名证书，需要开放80端口</li>
<li>适用场景：单域名证书，且服务器可直接访问</li>
</ul>
<h2 id="6-证书部署"><a href="#6-证书部署" class="headerlink" title="6. 证书部署"></a>6. 证书部署</h2><p>Certimate支持将Let’s Encrypt证书自动部署到100+种目标平台，包括云服务、CDN、负载均衡器、Web服务器等。</p>
<h3 id="6-1-云服务部署"><a href="#6-1-云服务部署" class="headerlink" title="6.1 云服务部署"></a>6.1 云服务部署</h3><h4 id="6-1-1-阿里云服务部署"><a href="#6-1-1-阿里云服务部署" class="headerlink" title="6.1.1 阿里云服务部署"></a>6.1.1 阿里云服务部署</h4><p><strong>阿里云CDN：</strong></p>
<ol>
<li>进入”部署目标”页面</li>
<li>点击”添加部署目标”</li>
<li>选择”阿里云CDN”并配置：<ul>
<li>名称：生产环境CDN</li>
<li>AccessKey ID：具有CDN管理权限的AccessKey</li>
<li>AccessKey Secret：对应的Secret</li>
<li>域名：CDN加速域名</li>
</ul>
</li>
</ol>
<p><strong>阿里云SLB（负载均衡）：</strong></p>
<ol>
<li>选择”阿里云SLB”类型</li>
<li>填入SLB实例ID和监听端口</li>
<li>证书将自动部署到HTTPS监听器</li>
</ol>
<h4 id="6-1-2-腾讯云服务部署"><a href="#6-1-2-腾讯云服务部署" class="headerlink" title="6.1.2 腾讯云服务部署"></a>6.1.2 腾讯云服务部署</h4><p><strong>腾讯云CDN：</strong></p>
<ul>
<li>类型：选择”腾讯云CDN”</li>
<li>SecretId&#x2F;SecretKey：腾讯云API密钥</li>
<li>域名：CDN加速域名</li>
</ul>
<p><strong>腾讯云CLB（负载均衡）：</strong></p>
<ul>
<li>类型：选择”腾讯云CLB”</li>
<li>实例ID：CLB实例标识</li>
<li>监听器ID：HTTPS监听器标识</li>
</ul>
<h4 id="6-1-3-AWS服务部署"><a href="#6-1-3-AWS服务部署" class="headerlink" title="6.1.3 AWS服务部署"></a>6.1.3 AWS服务部署</h4><p><strong>AWS CloudFront：</strong></p>
<ul>
<li>类型：选择”AWS CloudFront”</li>
<li>Access Key&#x2F;Secret Key：AWS API密钥</li>
<li>Distribution ID：CloudFront分发ID</li>
</ul>
<p><strong>AWS ALB&#x2F;ELB：</strong></p>
<ul>
<li>类型：选择”AWS Load Balancer”</li>
<li>负载均衡器ARN：目标负载均衡器</li>
<li>监听器端口：HTTPS监听端口</li>
</ul>
<h3 id="6-2-Web服务器部署"><a href="#6-2-Web服务器部署" class="headerlink" title="6.2 Web服务器部署"></a>6.2 Web服务器部署</h3><h4 id="6-2-1-SSH服务器部署"><a href="#6-2-1-SSH服务器部署" class="headerlink" title="6.2.1 SSH服务器部署"></a>6.2.1 SSH服务器部署</h4><p>通过SSH将证书部署到Web服务器：</p>
<ol>
<li>选择”SSH服务器”类型</li>
<li>配置服务器连接信息：<ul>
<li>服务器地址：192.168.1.100</li>
<li>SSH端口：22</li>
<li>用户名：root 或具有sudo权限的用户</li>
<li>认证方式：密码或SSH密钥</li>
</ul>
</li>
<li>设置证书存储路径和重启命令</li>
</ol>
<p><strong>Nginx服务器配置：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 证书文件路径</span></span><br><span class="line">证书文件：/etc/nginx/ssl/domain.crt</span><br><span class="line">私钥文件：/etc/nginx/ssl/domain.key</span><br><span class="line">证书链文件：/etc/nginx/ssl/domain.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署后执行命令</span></span><br><span class="line">重启命令：sudo systemctl reload nginx</span><br><span class="line"><span class="comment"># 或者：sudo nginx -s reload</span></span><br></pre></td></tr></table></figure>

<p><strong>Apache服务器配置：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 证书文件路径</span></span><br><span class="line">证书文件：/etc/apache2/ssl/domain.crt</span><br><span class="line">私钥文件：/etc/apache2/ssl/domain.key</span><br><span class="line">证书链文件：/etc/apache2/ssl/domain.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署后执行命令</span></span><br><span class="line">重启命令：sudo systemctl reload apache2</span><br><span class="line"><span class="comment"># 或者：sudo service apache2 reload</span></span><br></pre></td></tr></table></figure>

<p><strong>Caddy服务器配置：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Caddy自动管理证书，通常只需重启</span></span><br><span class="line">重启命令：sudo systemctl reload caddy</span><br></pre></td></tr></table></figure>

<h4 id="6-2-2-容器化部署"><a href="#6-2-2-容器化部署" class="headerlink" title="6.2.2 容器化部署"></a>6.2.2 容器化部署</h4><p><strong>Docker容器部署：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载证书目录到容器</span></span><br><span class="line">证书目录：/opt/ssl/</span><br><span class="line">容器重启：docker restart nginx-container</span><br></pre></td></tr></table></figure>

<p><strong>Kubernetes部署：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建Secret资源</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tls-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">&lt;base64-encoded-cert&gt;</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">&lt;base64-encoded-key&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-其他部署目标"><a href="#6-3-其他部署目标" class="headerlink" title="6.3 其他部署目标"></a>6.3 其他部署目标</h3><h4 id="6-3-1-反向代理"><a href="#6-3-1-反向代理" class="headerlink" title="6.3.1 反向代理"></a>6.3.1 反向代理</h4><p><strong>Cloudflare：</strong></p>
<ul>
<li>自动上传证书到Cloudflare</li>
<li>支持通配符证书</li>
<li>全球CDN加速</li>
</ul>
<p><strong>Nginx Proxy Manager：</strong></p>
<ul>
<li>可视化反向代理管理</li>
<li>自动SSL证书管理</li>
<li>支持Docker部署</li>
</ul>
<h4 id="6-3-2-存储服务"><a href="#6-3-2-存储服务" class="headerlink" title="6.3.2 存储服务"></a>6.3.2 存储服务</h4><p><strong>本地文件系统：</strong></p>
<ul>
<li>证书保存到指定目录</li>
<li>支持自定义文件名格式</li>
<li>可配置文件权限</li>
</ul>
<p><strong>对象存储：</strong></p>
<ul>
<li>阿里云OSS</li>
<li>腾讯云COS</li>
<li>AWS S3</li>
<li>七牛云存储</li>
</ul>
<h2 id="7-多服务器证书同步"><a href="#7-多服务器证书同步" class="headerlink" title="7. 多服务器证书同步"></a>7. 多服务器证书同步</h2><p>当您有多个服务器但只使用一个域名时，需要将SSL证书同步到所有服务器。Certimate提供了几种解决方案：</p>
<h3 id="7-1-单点管理方案（推荐）"><a href="#7-1-单点管理方案（推荐）" class="headerlink" title="7.1 单点管理方案（推荐）"></a>7.1 单点管理方案（推荐）</h3><p><strong>部署架构：</strong></p>
<ul>
<li>在一台主服务器上部署Certimate</li>
<li>其他服务器通过证书同步获取证书</li>
<li>避免重复申请，减少CA服务器压力</li>
</ul>
<p><strong>实施步骤：</strong></p>
<ol>
<li><p><strong>选择主服务器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在主服务器上安装Certimate</span></span><br><span class="line">wget https://github.com/certimate-go/certimate/releases/latest/download/certimate-linux-amd64.tar.gz</span><br><span class="line">tar -xzf certimate-linux-amd64.tar.gz</span><br><span class="line">./certimate</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置证书申请</strong></p>
<ul>
<li>在主服务器上配置域名和DNS提供商</li>
<li>申请证书并验证成功</li>
</ul>
</li>
<li><p><strong>设置证书同步</strong></p>
<p><strong>方案一：SSH自动同步</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Certimate中配置多个SSH部署目标</span></span><br><span class="line">部署类型：SSH服务器</span><br><span class="line">服务器1：192.168.1.10</span><br><span class="line">服务器2：192.168.1.11</span><br><span class="line">服务器3：192.168.1.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书路径</span></span><br><span class="line">证书文件：/etc/nginx/ssl/domain.crt</span><br><span class="line">私钥文件：/etc/nginx/ssl/domain.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署后命令</span></span><br><span class="line">重启命令：sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>

<p><strong>方案二：共享存储同步</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用NFS或其他共享存储</span></span><br><span class="line"><span class="comment"># 主服务器导出证书目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/etc/ssl/certs *(ro,sync)&quot;</span> &gt;&gt; /etc/exports</span><br><span class="line">systemctl restart nfs-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他服务器挂载共享目录</span></span><br><span class="line">mount -t nfs 主服务器IP:/etc/ssl/certs /etc/ssl/certs</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-2-证书分发脚本"><a href="#7-2-证书分发脚本" class="headerlink" title="7.2 证书分发脚本"></a>7.2 证书分发脚本</h3><p><strong>自动分发脚本示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># cert-sync.sh - 证书同步脚本</span></span><br><span class="line"></span><br><span class="line">CERT_DIR=<span class="string">&quot;/etc/ssl/certs&quot;</span></span><br><span class="line">SERVERS=(<span class="string">&quot;192.168.1.10&quot;</span> <span class="string">&quot;192.168.1.11&quot;</span> <span class="string">&quot;192.168.1.12&quot;</span>)</span><br><span class="line">DOMAIN=<span class="string">&quot;example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查证书是否更新</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$CERT_DIR</span>/<span class="variable">$DOMAIN</span>.crt.new&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;发现新证书，开始同步...&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> server <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;SERVERS[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;同步到服务器: <span class="variable">$server</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 复制证书文件</span></span><br><span class="line">        scp <span class="string">&quot;<span class="variable">$CERT_DIR</span>/<span class="variable">$DOMAIN</span>.crt&quot;</span> <span class="string">&quot;root@<span class="variable">$server</span>:<span class="variable">$CERT_DIR</span>/&quot;</span></span><br><span class="line">        scp <span class="string">&quot;<span class="variable">$CERT_DIR</span>/<span class="variable">$DOMAIN</span>.key&quot;</span> <span class="string">&quot;root@<span class="variable">$server</span>:<span class="variable">$CERT_DIR</span>/&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重启Web服务</span></span><br><span class="line">        ssh <span class="string">&quot;root@<span class="variable">$server</span>&quot;</span> <span class="string">&quot;systemctl reload nginx&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;✓ <span class="variable">$server</span> 同步成功&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;✗ <span class="variable">$server</span> 同步失败&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 标记同步完成</span></span><br><span class="line">    <span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$CERT_DIR</span>/<span class="variable">$DOMAIN</span>.crt.new&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-负载均衡器方案"><a href="#7-3-负载均衡器方案" class="headerlink" title="7.3 负载均衡器方案"></a>7.3 负载均衡器方案</h3><p><strong>使用阿里云SLB：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置SLB HTTPS监听</span></span><br><span class="line">1. 在Certimate中选择<span class="string">&quot;阿里云SLB&quot;</span>部署类型</span><br><span class="line">2. 配置SLB实例ID和监听端口</span><br><span class="line">3. 证书自动部署到负载均衡器</span><br><span class="line">4. 后端服务器使用HTTP通信</span><br></pre></td></tr></table></figure>

<p><strong>优势：</strong></p>
<ul>
<li>SSL终结在负载均衡器</li>
<li>后端服务器无需配置证书</li>
<li>统一管理，简化运维</li>
</ul>
<h3 id="7-4-容器化部署同步"><a href="#7-4-容器化部署同步" class="headerlink" title="7.4 容器化部署同步"></a>7.4 容器化部署同步</h3><p><strong>Docker Swarm示例：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ssl-certs:/etc/nginx/ssl:ro</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">webnet</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">certimate:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">certimate/certimate:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ssl-certs:/app/certs</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOMAIN=example.com</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">ssl-certs:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">webnet:</span></span><br></pre></td></tr></table></figure>

<p><strong>Kubernetes示例：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Secret存储证书</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tls-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">&lt;base64-encoded-cert&gt;</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">&lt;base64-encoded-key&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 在Deployment中使用</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tls-volume</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/nginx/ssl</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">tls-volume</span></span><br><span class="line">        <span class="attr">secret:</span></span><br><span class="line">          <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br></pre></td></tr></table></figure>

<h3 id="7-5-监控和告警"><a href="#7-5-监控和告警" class="headerlink" title="7.5 监控和告警"></a>7.5 监控和告警</h3><p><strong>证书同步监控脚本：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># cert-monitor.sh - 证书同步监控</span></span><br><span class="line"></span><br><span class="line">SERVERS=(<span class="string">&quot;192.168.1.10&quot;</span> <span class="string">&quot;192.168.1.11&quot;</span> <span class="string">&quot;192.168.1.12&quot;</span>)</span><br><span class="line">DOMAIN=<span class="string">&quot;example.com&quot;</span></span><br><span class="line">ALERT_EMAIL=<span class="string">&quot;admin@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> server <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;SERVERS[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 检查证书有效期</span></span><br><span class="line">    expiry=$(ssh <span class="string">&quot;root@<span class="variable">$server</span>&quot;</span> <span class="string">&quot;openssl x509 -in /etc/ssl/certs/<span class="variable">$DOMAIN</span>.crt -noout -enddate | cut -d= -f2&quot;</span>)</span><br><span class="line">    expiry_timestamp=$(<span class="built_in">date</span> -d <span class="string">&quot;<span class="variable">$expiry</span>&quot;</span> +%s)</span><br><span class="line">    current_timestamp=$(<span class="built_in">date</span> +%s)</span><br><span class="line">    days_left=$(( (expiry_timestamp - current_timestamp) / <span class="number">86400</span> ))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$days_left</span> -lt 7 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;警告: <span class="variable">$server</span> 上的证书将在 <span class="variable">$days_left</span> 天后过期&quot;</span> | mail -s <span class="string">&quot;证书过期警告&quot;</span> <span class="variable">$ALERT_EMAIL</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查证书一致性</span></span><br><span class="line">    local_hash=$(openssl x509 -<span class="keyword">in</span> <span class="string">&quot;/etc/ssl/certs/<span class="variable">$DOMAIN</span>.crt&quot;</span> -noout -fingerprint | <span class="built_in">cut</span> -d= -f2)</span><br><span class="line">    remote_hash=$(ssh <span class="string">&quot;root@<span class="variable">$server</span>&quot;</span> <span class="string">&quot;openssl x509 -in /etc/ssl/certs/<span class="variable">$DOMAIN</span>.crt -noout -fingerprint | cut -d= -f2&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$local_hash</span>&quot;</span> != <span class="string">&quot;<span class="variable">$remote_hash</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;错误: <span class="variable">$server</span> 上的证书与主服务器不一致&quot;</span> | mail -s <span class="string">&quot;证书同步错误&quot;</span> <span class="variable">$ALERT_EMAIL</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="7-6-注意事项"><a href="#7-6-注意事项" class="headerlink" title="7.6 注意事项"></a>7.6 注意事项</h3><p><strong>避免重复申请：</strong></p>
<ul>
<li>只在一台服务器上运行Certimate</li>
<li>其他服务器通过同步获取证书</li>
<li>避免触发CA的速率限制</li>
</ul>
<p><strong>安全考虑：</strong></p>
<ul>
<li>使用SSH密钥认证而非密码</li>
<li>限制证书文件的访问权限（600或644）</li>
<li>定期轮换SSH密钥</li>
</ul>
<p><strong>高可用性：</strong></p>
<ul>
<li>配置主备Certimate实例</li>
<li>使用共享存储保存配置和证书</li>
<li>设置监控和自动故障转移</li>
</ul>
<h2 id="8-自动续期"><a href="#8-自动续期" class="headerlink" title="8. 自动续期"></a>8. 自动续期</h2><p>Certimate会自动处理证书续期：</p>
<ul>
<li><strong>检查频率</strong>：每天检查一次证书状态</li>
<li><strong>续期时机</strong>：证书过期前10天开始续期</li>
<li><strong>自动部署</strong>：续期成功后自动部署到配置的目标</li>
<li><strong>失败重试</strong>：续期失败会自动重试，最多3次</li>
</ul>
<h3 id="续期状态监控"><a href="#续期状态监控" class="headerlink" title="续期状态监控"></a>续期状态监控</h3><p>在Certimate界面中可以查看：</p>
<ul>
<li>证书剩余有效期</li>
<li>最近续期时间</li>
<li>续期状态（成功&#x2F;失败）</li>
<li>下次续期时间</li>
</ul>
<h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><h3 id="9-1-证书申请失败"><a href="#9-1-证书申请失败" class="headerlink" title="9.1 证书申请失败"></a>9.1 证书申请失败</h3><p><strong>DNS验证失败：</strong></p>
<ul>
<li>检查DNS提供商配置是否正确</li>
<li>确认AccessKey权限是否充足</li>
<li>验证域名解析是否正常</li>
</ul>
<p><strong>速率限制：</strong></p>
<ul>
<li>Let’s Encrypt：每周每域名最多50个证书</li>
<li>解决方案：等待限制重置或使用其他证书颁发机构</li>
</ul>
<p><strong>网络连接问题：</strong></p>
<ul>
<li>确保服务器能访问ACME服务器</li>
<li>检查防火墙设置</li>
<li>验证系统时间是否正确</li>
</ul>
<h3 id="9-2-证书部署失败"><a href="#9-2-证书部署失败" class="headerlink" title="9.2 证书部署失败"></a>9.2 证书部署失败</h3><p><strong>权限不足：</strong></p>
<ul>
<li>检查部署目标的访问权限</li>
<li>确认AccessKey具有相应服务的管理权限</li>
</ul>
<p><strong>网络连接：</strong></p>
<ul>
<li>验证到部署目标的网络连接</li>
<li>检查SSH连接配置（如果使用SSH部署）</li>
</ul>
<h3 id="9-3-自动续期失败"><a href="#9-3-自动续期失败" class="headerlink" title="9.3 自动续期失败"></a>9.3 自动续期失败</h3><p><strong>常见原因：</strong></p>
<ul>
<li>DNS配置变更</li>
<li>AccessKey过期或权限变更</li>
<li>网络连接问题</li>
<li>服务器资源不足</li>
</ul>
<p><strong>解决方案：</strong></p>
<ul>
<li>检查并更新DNS配置</li>
<li>验证AccessKey有效性</li>
<li>查看系统日志定位具体问题</li>
</ul>
<h2 id="10-最佳实践"><a href="#10-最佳实践" class="headerlink" title="10. 最佳实践"></a>10. 最佳实践</h2><h3 id="10-1-安全建议"><a href="#10-1-安全建议" class="headerlink" title="10.1 安全建议"></a>10.1 安全建议</h3><ul>
<li><strong>使用RAM用户</strong>：不要使用主账号的AccessKey</li>
<li><strong>最小权限原则</strong>：只授予必要的权限</li>
<li><strong>定期轮换</strong>：定期更换AccessKey</li>
<li><strong>监控访问</strong>：启用API访问日志监控</li>
</ul>
<h3 id="10-2-性能优化"><a href="#10-2-性能优化" class="headerlink" title="10.2 性能优化"></a>10.2 性能优化</h3><ul>
<li><strong>选择合适的证书颁发机构</strong>：根据地理位置选择访问速度最快的</li>
<li><strong>合理规划证书</strong>：使用泛域名证书减少证书数量</li>
<li><strong>监控续期状态</strong>：及时发现和解决续期问题</li>
</ul>
<h3 id="10-3-备份策略"><a href="#10-3-备份策略" class="headerlink" title="10.3 备份策略"></a>10.3 备份策略</h3><ul>
<li><strong>配置备份</strong>：定期备份Certimate配置</li>
<li><strong>证书备份</strong>：保存重要证书的副本</li>
<li><strong>多证书颁发机构</strong>：配置多个证书颁发机构作为备选</li>
</ul>
<h2 id="11-总结"><a href="#11-总结" class="headerlink" title="11. 总结"></a>11. 总结</h2><p>Certimate为免费SSL证书的申请和管理提供了完整的解决方案。通过本指南，您可以：</p>
<ol>
<li><strong>了解免费SSL证书服务商</strong>：选择最适合的证书颁发机构</li>
<li><strong>快速部署Certimate</strong>：在几分钟内完成安装和配置</li>
<li><strong>自动化证书管理</strong>：实现证书申请、部署和续期的全自动化</li>
<li><strong>集成阿里云服务</strong>：将证书无缝部署到各种阿里云服务</li>
</ol>
<p>免费SSL证书已经成为现代Web应用的标准配置，Certimate让这个过程变得简单、可靠且完全自动化。开始使用Certimate，让您的网站更安全！</p>
<hr>
<p><strong>相关链接：</strong></p>
<ul>
<li><a href="https://docs.certimate.me/">Certimate官方文档</a></li>
<li><a href="https://github.com/certimate-go/certimate">GitHub项目地址</a></li>
<li><a href="https://letsencrypt.org/">Let’s Encrypt官网</a></li>
<li><a href="https://zerossl.com/">ZeroSSL官网</a></li>
<li><a href="https://dns.console.aliyun.com/">阿里云DNS控制台</a></li>
</ul>
]]></content>
      <categories>
        <category>阿里云服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Apple 针对欧盟《数字市场法》的更新公告</title>
    <url>/2025/07/01/%E5%85%B3%E4%BA%8EApple%20%E9%92%88%E5%AF%B9%E6%AC%A7%E7%9B%9F%E3%80%8A%E6%95%B0%E5%AD%97%E5%B8%82%E5%9C%BA%E6%B3%95%E3%80%8B%E7%9A%84%E6%9B%B4%E6%96%B0%E5%85%AC%E5%91%8A__/</url>
    <content><![CDATA[<p>最近看到苹果开发者平台更新了一则<a href="https://developer.apple.com/cn/news/?id=awedznci">欧盟App所适用的更新</a>，虽然之前美国外部支付闹的沸沸扬扬，但没太过多关注。</p>
<p>随着欧盟苹果政策的更新，后期应该有更多的国家可能会开放外部支付渠道，于是使用Ai对相关文档进行解读和分析，整理成该篇文章便于后期查阅。</p>
<table>
<thead>
<tr>
<th><strong>地区</strong></th>
<th><strong>外部支付</strong></th>
<th><strong>替代应用商店</strong></th>
<th><strong>未来趋势</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>欧盟</strong></td>
<td>✅ 允许（但可能收 CTC）</td>
<td>✅ 允许（iOS 18.6+）</td>
<td>2026 年全面实施 CTC</td>
</tr>
<tr>
<td><strong>美国</strong></td>
<td>⚠️ 部分允许（27% 佣金）</td>
<td>❌ 禁止</td>
<td>可能因法律诉讼开放</td>
</tr>
<tr>
<td><strong>韩国</strong></td>
<td>✅ 允许（26% 佣金）</td>
<td>❌ 禁止</td>
<td>暂无进一步调整</td>
</tr>
<tr>
<td><strong>其他地区</strong></td>
<td>❌ 禁止</td>
<td>❌ 禁止</td>
<td>取决于本地立法</td>
</tr>
</tbody></table>
<h3 id="关于Apple-针对欧盟《数字市场法》的更新公告的解读"><a href="#关于Apple-针对欧盟《数字市场法》的更新公告的解读" class="headerlink" title="关于Apple 针对欧盟《数字市场法》的更新公告的解读"></a>关于Apple 针对欧盟《数字市场法》的更新公告的解读</h3><h4 id="1-核心变更内容"><a href="#1-核心变更内容" class="headerlink" title="1. 核心变更内容"></a><strong>1. 核心变更内容</strong></h4><p>Apple 根据欧盟《数字市场法》（DMA）的要求，对欧盟地区的 App Store 政策进行了以下调整：</p>
<h5 id="（1）优惠传达与推广的灵活性"><a href="#（1）优惠传达与推广的灵活性" class="headerlink" title="（1）优惠传达与推广的灵活性"></a><strong>（1）优惠传达与推广的灵活性</strong></h5><ul>
<li><strong>允许开发者推广替代购买渠道</strong>：开发者可以在 App 内或通过外部链接（如网站、替代应用市场或其他 App）推广其数字商品或服务的优惠。</li>
<li><strong>适用新业务条款</strong>：<ul>
<li><strong>初始用户获取费</strong>：针对通过 App Store 获取的用户。</li>
<li><strong>核心技术佣金（CTC）</strong>：适用于使用外部购买链接的 App，反映 Apple 提供的技术和服务价值。</li>
<li><strong>商店服务费</strong>：继续适用于通过 App Store 分发的交易。</li>
</ul>
</li>
</ul>
<h5 id="（2）业务条款更新"><a href="#（2）业务条款更新" class="headerlink" title="（2）业务条款更新"></a><strong>（2）业务条款更新</strong></h5><ul>
<li><strong>2026年1月1日起，统一业务模式</strong>：<ul>
<li>从核心技术费（CTF）过渡到核心技术佣金（CTC）。</li>
<li>CTC 将适用于所有渠道（App Store、网站分发、替代市场）的数字商品或服务交易。</li>
<li>目前适用《Alternative Terms Addendum for Apps in the EU》的 App 仍支付 CTF，直到 2026 年完全过渡。</li>
</ul>
</li>
</ul>
<h5 id="（3）用户体验更新"><a href="#（3）用户体验更新" class="headerlink" title="（3）用户体验更新"></a><strong>（3）用户体验更新</strong></h5><ul>
<li><strong>iOS&#x2F;iPadOS 18.6 开始</strong>：<ul>
<li>优化欧盟用户从替代市场或开发者网站安装 App 的体验。</li>
<li>今年晚些时候提供 API，允许开发者在 App 内启动替代分发 App 的下载。</li>
</ul>
</li>
</ul>
<h4 id="2-影响分析"><a href="#2-影响分析" class="headerlink" title="2. 影响分析"></a><strong>2. 影响分析</strong></h4><ul>
<li><p><strong>对开发者的影响</strong>：</p>
<ul>
<li><strong>推广自由度提升</strong>：开发者可以绕过 App Store 支付系统推广优惠，但需支付 CTC。</li>
<li><strong>费用结构变化</strong>：CTC 可能比现有费用更复杂，需权衡外部推广的成本与收益。</li>
<li><strong>音乐流媒体 App 的特殊性</strong>：EEA 音乐流媒体 App 可使用特定授权方案，可能降低佣金负担。</li>
</ul>
</li>
<li><p><strong>对用户的影响</strong>：</p>
<ul>
<li><strong>更多选择</strong>：用户可能通过外部渠道获得更优惠的价格。</li>
<li><strong>潜在风险</strong>：非 App Store 分发的 App 可能缺乏严格审核，需注意安全性。</li>
</ul>
</li>
<li><p><strong>对 Apple 的影响</strong>：</p>
<ul>
<li><strong>合规性</strong>：满足 DMA 要求，避免法律风险。</li>
<li><strong>收入模式调整</strong>：CTC 可能弥补因开放外部支付导致的佣金损失。</li>
</ul>
</li>
</ul>
<h4 id="3-关键时间点"><a href="#3-关键时间点" class="headerlink" title="3. 关键时间点"></a><strong>3. 关键时间点</strong></h4><ul>
<li><strong>2024年</strong>：iOS&#x2F;iPadOS 18.6 推出替代市场安装优化，年底发布相关 API。</li>
<li><strong>2026年1月1日</strong>：全面过渡到 CTC，CTF 废止。</li>
</ul>
<h4 id="4-开发者注意事项"><a href="#4-开发者注意事项" class="headerlink" title="4. 开发者注意事项"></a><strong>4. 开发者注意事项</strong></h4><ul>
<li>需评估新条款对盈利模式的影响。</li>
<li>若使用外部链接，需遵守 StoreKit 外部购买链接授权附录。</li>
<li>可预约 Apple 的 30 分钟线上沟通，获取进一步解答。</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h3><p>Apple 的更新旨在平衡 DMA 合规与商业利益，赋予开发者更多自由，但通过 CTC 等机制保留部分收入控制权。开发者需审慎选择分发和支付策略，而用户需警惕非官方渠道的安全风险。长期来看，欧盟数字市场可能因 DMA 推动更开放的竞争格局。</p>
<h3 id="Apple-欧盟新政策-vs-传统内购政策的区别"><a href="#Apple-欧盟新政策-vs-传统内购政策的区别" class="headerlink" title="Apple 欧盟新政策 vs. 传统内购政策的区别"></a><strong>Apple 欧盟新政策 vs. 传统内购政策的区别</strong></h3><p>Apple 此次针对欧盟《数字市场法》（DMA）的更新，对原有的 App Store 内购（IAP）规则进行了重大调整。以下是新旧政策的核心区别：</p>
<hr>
<h2 id="1-支付渠道的开放性"><a href="#1-支付渠道的开放性" class="headerlink" title="1. 支付渠道的开放性"></a><strong>1. 支付渠道的开放性</strong></h2><table>
<thead>
<tr>
<th><strong>传统内购政策</strong></th>
<th><strong>欧盟新政策</strong></th>
</tr>
</thead>
<tbody><tr>
<td>强制使用 Apple 的 App Store 内购系统（IAP），禁止引导用户到外部支付渠道（如网站、第三方支付）。</td>
<td>允许开发者在 App 内或通过外部链接（网站、替代应用市场等）推广和完成支付，无需强制使用 IAP。</td>
</tr>
<tr>
<td>违反规则可能导致 App 被下架。</td>
<td>开发者可以自由选择支付方式，但需遵守新业务条款（如 CTC）。</td>
</tr>
</tbody></table>
<p><strong>影响</strong>：  </p>
<ul>
<li><strong>开发者</strong>：可以绕过 Apple 的 15-30% 佣金，但需支付新的“核心技术佣金（CTC）”。  </li>
<li><strong>用户</strong>：可能通过外部渠道获得更低价格（如 Spotify 直接官网订阅更便宜）。</li>
</ul>
<hr>
<h2 id="2-佣金结构的变化"><a href="#2-佣金结构的变化" class="headerlink" title="2. 佣金结构的变化"></a><strong>2. 佣金结构的变化</strong></h2><table>
<thead>
<tr>
<th><strong>传统内购政策</strong></th>
<th><strong>欧盟新政策</strong></th>
</tr>
</thead>
<tbody><tr>
<td>所有数字商品交易（如订阅、应用内购买）需支付 15-30% 的佣金（具体比例取决于收入规模）。</td>
<td>引入 <strong>核心技术佣金（CTC）</strong>，适用于所有数字商品交易，无论是否通过 App Store 完成。</td>
</tr>
<tr>
<td>仅适用于 App Store 内交易。</td>
<td>即使开发者使用外部支付或替代市场，仍需支付 CTC（费率未明确，但可能低于 30%）。</td>
</tr>
</tbody></table>
<p><strong>影响</strong>：  </p>
<ul>
<li>Apple 仍然能从外部交易中抽成，但可能降低费率以保持竞争力。  </li>
<li>2026 年后，<strong>CTF（核心技术费）将完全过渡到 CTC</strong>，意味着所有数字交易（包括网站销售）都可能被 Apple 抽成。</li>
</ul>
<hr>
<h2 id="3-推广与营销限制"><a href="#3-推广与营销限制" class="headerlink" title="3. 推广与营销限制"></a><strong>3. 推广与营销限制</strong></h2><table>
<thead>
<tr>
<th><strong>传统内购政策</strong></th>
<th><strong>欧盟新政策</strong></th>
</tr>
</thead>
<tbody><tr>
<td>严格禁止在 App 内提及外部支付方式（如“官网更便宜”）。</td>
<td>允许开发者在 App 内推广替代购买渠道（如网站、第三方市场）。</td>
</tr>
<tr>
<td>违反规则可能导致 App 被拒绝或下架。</td>
<td>开发者可以自由引导用户到外部支付，但需遵守新业务条款。</td>
</tr>
</tbody></table>
<p><strong>影响</strong>：  </p>
<ul>
<li><strong>Spotify、Netflix 等公司</strong>可以明确告诉用户“官网订阅更便宜”，而不再需要隐藏外部支付选项。  </li>
<li>但 Apple 仍可能通过 CTC 从这些交易中抽成。</li>
</ul>
<hr>
<h2 id="4-应用分发方式"><a href="#4-应用分发方式" class="headerlink" title="4. 应用分发方式"></a><strong>4. 应用分发方式</strong></h2><table>
<thead>
<tr>
<th><strong>传统内购政策</strong></th>
<th><strong>欧盟新政策</strong></th>
</tr>
</thead>
<tbody><tr>
<td>仅允许通过 App Store 分发 App（除企业签名或 TestFlight 外）。</td>
<td>允许 <strong>替代应用市场</strong> 和 <strong>开发者直接分发</strong>（如官网下载）。</td>
</tr>
<tr>
<td>侧载（Sideloading）在 iOS 上被严格限制。</td>
<td>欧盟用户可以直接从第三方市场或开发者网站安装 App。</td>
</tr>
</tbody></table>
<p><strong>影响</strong>：  </p>
<ul>
<li><strong>Epic Games、AltStore 等</strong>可以推出自己的应用商店，绕过 App Store。  </li>
<li>但 Apple 仍可能通过 <strong>核心技术佣金（CTC）</strong> 对部分交易收费。</li>
</ul>
<hr>
<h2 id="5-用户体验变化"><a href="#5-用户体验变化" class="headerlink" title="5. 用户体验变化"></a><strong>5. 用户体验变化</strong></h2><table>
<thead>
<tr>
<th><strong>传统内购政策</strong></th>
<th><strong>欧盟新政策</strong></th>
</tr>
</thead>
<tbody><tr>
<td>所有支付流程在 App Store 内完成，统一且安全。</td>
<td>用户可能被引导到外部网站支付，可能增加欺诈风险。</td>
</tr>
<tr>
<td>更新仅通过 App Store 进行。</td>
<td>允许替代市场和开发者直接推送更新（iOS 18.6+）。</td>
</tr>
</tbody></table>
<p><strong>影响</strong>：  </p>
<ul>
<li><strong>用户便利性</strong>：可能需要在不同平台管理 App 更新。  </li>
<li><strong>安全性</strong>：非 App Store 分发的 App 可能缺乏严格审核，需谨慎下载。</li>
</ul>
<hr>
<h2 id="总结：Apple-欧盟新政策-vs-传统内购"><a href="#总结：Apple-欧盟新政策-vs-传统内购" class="headerlink" title="总结：Apple 欧盟新政策 vs. 传统内购"></a><strong>总结：Apple 欧盟新政策 vs. 传统内购</strong></h2><table>
<thead>
<tr>
<th><strong>方面</strong></th>
<th><strong>传统内购</strong></th>
<th><strong>欧盟新政策</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>支付方式</strong></td>
<td>强制 IAP</td>
<td>允许外部支付</td>
</tr>
<tr>
<td><strong>佣金</strong></td>
<td>15-30%（仅 App Store）</td>
<td>CTC（适用于所有数字交易）</td>
</tr>
<tr>
<td><strong>推广限制</strong></td>
<td>禁止外部支付引导</td>
<td>允许推广替代渠道</td>
</tr>
<tr>
<td><strong>分发方式</strong></td>
<td>仅 App Store</td>
<td>允许替代市场和官网分发</td>
</tr>
<tr>
<td><strong>用户体验</strong></td>
<td>统一、安全</td>
<td>可能更灵活但风险增加</td>
</tr>
</tbody></table>
<h3 id="关键结论"><a href="#关键结论" class="headerlink" title="关键结论"></a><strong>关键结论</strong></h3><ol>
<li><strong>Apple 仍然控制收入</strong>：即使开放支付和分发，CTC 确保 Apple 仍能从外部交易抽成。  </li>
<li><strong>开发者有更多选择</strong>：可以绕过 30% 佣金，但需权衡 CTC 成本。  </li>
<li><strong>用户需谨慎</strong>：非官方渠道的 App 可能带来安全风险。  </li>
<li><strong>2026 年后 CTC 全面生效</strong>：可能影响所有数字交易，包括网站销售。</li>
</ol>
<p>欧盟新政策是 Apple 在监管压力下的妥协，但仍试图通过 CTC 维持收入。开发者需计算哪种模式更划算，而用户需注意非官方渠道的安全性。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>关于Block的使用及注意事项</title>
    <url>/2017/10/09/%E5%85%B3%E4%BA%8EBlock%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=474922552&auto=1&height=66"></iframe>

<h6 id="闲暇之余整理了Block的使用方法和注意事项，仅供自己参考。"><a href="#闲暇之余整理了Block的使用方法和注意事项，仅供自己参考。" class="headerlink" title="闲暇之余整理了Block的使用方法和注意事项，仅供自己参考。"></a>闲暇之余整理了Block的使用方法和注意事项，仅供自己参考。</h6><h2 id="1-typedef-作为属性的Block"><a href="#1-typedef-作为属性的Block" class="headerlink" title="1. typedef  作为属性的Block"></a>1. typedef  作为属性的Block</h2><p><img src="http://owia6zw5f.bkt.clouddn.com/block01.png" alt="image"></p>
<h3 id="2-作为方法的参数的Block"><a href="#2-作为方法的参数的Block" class="headerlink" title="2. 作为方法的参数的Block"></a>2. 作为方法的参数的Block</h3><p><img src="http://owia6zw5f.bkt.clouddn.com/block02.png" alt="image"></p>
<h3 id="3-作为变量的Block"><a href="#3-作为变量的Block" class="headerlink" title="3. 作为变量的Block"></a>3. 作为变量的Block</h3><p><img src="http://owia6zw5f.bkt.clouddn.com/block03.png" alt="image"></p>
<h3 id="4-有时间再整理……"><a href="#4-有时间再整理……" class="headerlink" title="4.有时间再整理……"></a>4.有时间再整理……</h3><h5 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h5><ul>
<li>Block作属性时，需要使用copy进行修饰</li>
<li>循环引用问题</li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Charles初始化配置</title>
    <url>/2025/06/30/%E5%85%B3%E4%BA%8ECharles%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>最近重新配置了新电脑的Charles在此记录一下，便于后期查阅。</p>
<h2 id="电脑端Charles设置"><a href="#电脑端Charles设置" class="headerlink" title="电脑端Charles设置"></a>电脑端<code>Charles</code>设置</h2><h3 id="1-确保-Charles-已安装并运行）。"><a href="#1-确保-Charles-已安装并运行）。" class="headerlink" title="1.确保 Charles 已安装并运行）。"></a>1.确保 Charles 已安装并运行）。</h3><p>在 Charles 菜单栏选择 ​​Help → SSL Proxying → Install Charles Root Certificate​​（安装根证书到电脑钥匙串）。</p>
<h3 id="2-启用-SSL-代理："><a href="#2-启用-SSL-代理：" class="headerlink" title="2.启用 SSL 代理："></a>2.启用 SSL 代理：</h3><p>点击菜单栏 ​​Proxy → SSL Proxying Settings​​。</p>
<p>确保 ​​Enable SSL Proxying​​ 已勾选。</p>
<p>在 ​​SSL Proxying​​ 列表中添加要抓包的域名：<br>点击 ​​Add​​，输入 *（抓取所有 HTTPS 流量）或指定域名（如 *.example.com）。<br>端口填 443（HTTPS 默认端口）。</p>
<p>一般设置域名<code>*</code>，端口号<code>443</code>抓取所有https。</p>
<h2 id="手机端配置"><a href="#手机端配置" class="headerlink" title="手机端配置"></a>手机端配置</h2><h3 id="一-检查手机代理设置"><a href="#一-检查手机代理设置" class="headerlink" title="一. 检查手机代理设置"></a>一. 检查手机代理设置</h3><ol>
<li><p>进入 ​​设置 → Wi-Fi​​ → 点击当前连接的 Wi-Fi 右侧 ​​ⓘ​​。</p>
</li>
<li><p>确保 ​​HTTP 代理​​ 设置为 ​​手动​​，并填写：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器：电脑的本地 IP（如 192.168.1.100）。</span><br><span class="line">端口：8888（Charles 默认端口）</span><br></pre></td></tr></table></figure>

<h3 id="二-手机端安装证书"><a href="#二-手机端安装证书" class="headerlink" title="二. 手机端安装证书"></a>二. 手机端安装证书</h3><ol>
<li>在 iPhone 上访问 <a href="http://chls.pro/ssl%EF%BC%88%E7%94%A8">http://chls.pro/ssl（用</a> ​​Safari​​ 打开），下载 Charles 证书。</li>
<li>进入 ​​设置 → 已下载描述文件​​ → 点击安装，输入密码完成安装。</li>
</ol>
<blockquote>
<p><code>启用完全信任</code></p>
</blockquote>
<ul>
<li>进入 ​​设置 → 通用 → 关于本机 → 证书信任设置​​。</li>
<li>找到 ​​Charles Proxy CA​​ 并启用 ​​完全信任​​。</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>关于HMAC签名相关</title>
    <url>/2020/11/04/%E5%85%B3%E4%BA%8EHMAC%E7%AD%BE%E5%90%8D%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>节后有个项目使用到腾讯云的<a href="https://cloud.tencent.com/document/product/1007/35330">活体检测</a>，其实功能也不是很复杂，但在对接腾讯云的时候被他的<a href="https://cloud.tencent.com/document/api/1007/31325">签名</a>方式耽误了一些时间，但好在它的文档写的很详细，仔细地阅读了官方文档，最后也在很快的时间内对接成功。</p>
<p>这里主要记录<code>HMAC-SHA1</code>在iOS中的代码，便于后期查阅。</p>
<blockquote>
<p>引入头文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;CommonCrypto/CommonDigest.h&gt;</span><br><span class="line">#include &lt;CommonCrypto/CommonHMAC.h&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <code>HMAC-SHA1</code>算法签名,<code>Base64</code>进行编码</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (NSString *)hmacsha1:(NSString *)obj key:(NSString *)key &#123;</span><br><span class="line">    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];</span><br><span class="line">    const char *cData = [obj cStringUsingEncoding:NSASCIIStringEncoding];</span><br><span class="line">    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];</span><br><span class="line"></span><br><span class="line">    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);</span><br><span class="line">    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC</span><br><span class="line">                                          length:sizeof(cHMAC)];</span><br><span class="line"></span><br><span class="line">    NSString *hash = [HMAC base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];</span><br><span class="line"></span><br><span class="line">    return hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://baike.baidu.com/item/hmac">hmac-百度百科</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于fmt中的格式化站位符</title>
    <url>/2024/04/22/%E5%85%B3%E4%BA%8Efmt%E4%B8%AD%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%AB%99%E4%BD%8D%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>在学习Go语言的时候发现<code>fmt</code>包提供了丰富的格式化占位符，这些占位符允许我们我们使用不同的格式输出各种类型的数据。</p>
<p>为了便于记忆特在此记录，便于后期翻阅加深记忆。</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>类型</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>整数</td>
<td>十进制整数</td>
<td>fmt.Printf(“%d”, 42)</td>
</tr>
<tr>
<td>%b</td>
<td>整数</td>
<td>二进制整数</td>
<td>fmt.Printf(“%b”, 10)</td>
</tr>
<tr>
<td>%o</td>
<td>整数</td>
<td>八进制整数</td>
<td>fmt.Printf(“%o”, 8)</td>
</tr>
<tr>
<td>%x</td>
<td>整数</td>
<td>小写十六进制整数</td>
<td>fmt.Printf(“%x”, 255)</td>
</tr>
<tr>
<td>%X</td>
<td>整数</td>
<td>大写十六进制整数</td>
<td>fmt.Printf(“%X”, 255)</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数</td>
<td>小数点表示的浮点数</td>
<td>fmt.Printf(“%f”, 3.1415926)</td>
</tr>
<tr>
<td>%e</td>
<td>浮点数</td>
<td>科学计数法表示的浮点数（小写e）</td>
<td>fmt.Printf(“%e”, 123456)</td>
</tr>
<tr>
<td>%E</td>
<td>浮点数</td>
<td>科学计数法表示的浮点数（大写E）</td>
<td>fmt.Printf(“%E”, 123456)</td>
</tr>
<tr>
<td>%g</td>
<td>浮点数</td>
<td>自动选择%e或%f格式，无尾随零</td>
<td>fmt.Printf(“%g”, 123.456)</td>
</tr>
<tr>
<td>%G</td>
<td>浮点数</td>
<td>自动选择%E或%f格式，无尾随零</td>
<td>fmt.Printf(“%G”, 123.456)</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
<td>字符串本身</td>
<td>fmt.Printf(“%s”, “Hello”)</td>
</tr>
<tr>
<td>%t</td>
<td>布尔值</td>
<td>布尔值：true或false</td>
<td>fmt.Printf(“%t”, true)</td>
</tr>
<tr>
<td>%v</td>
<td>任意类型</td>
<td>值的默认格式</td>
<td>fmt.Printf(“%v”, []int{1, 2, 3})</td>
</tr>
<tr>
<td>%%</td>
<td>百分号</td>
<td>输出一个百分号</td>
<td>fmt.Printf(“%%”,)</td>
</tr>
</tbody></table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://go.dev/">go.dev</a></li>
<li><a href="https://github.com/golang/go">go</a></li>
<li><a href="https://draveness.me/golang/">Go语言设计与实现</a></li>
<li><a href="https://go.timpaik.top/directory.html">Go入门指南</a></li>
<li><a href="https://www.topgoer.com/">Go语言学习</a></li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>关于git代理设置问题记录</title>
    <url>/2025/01/22/%E5%85%B3%E4%BA%8Egit%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>需要在<code>Clash Verge</code>将代理设置成全局。然后在设置中<code>复制环境变量类型</code>。</p>
<p>打开终端设置代理即可。</p>
<blockquote>
<p>增加超时时间</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br><span class="line">git config --global http.lowSpeedLimit 0</span><br><span class="line">git config --global http.lowSpeedTime 999999</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置代理</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:7897</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:7897</span><br></pre></td></tr></table></figure>

<blockquote>
<p>取消代理</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>关于iOS &amp; iPadOS 16 beta 6相关API废弃</title>
    <url>/2022/08/19/%E5%85%B3%E4%BA%8EiOS%20&amp;%20iPadOS%2016%20beta%206%E7%9B%B8%E5%85%B3API%E5%BA%9F%E5%BC%83/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>在查看<a href="https://developer.apple.com/documentation/ios-ipados-release-notes/ios-16-release-notes/">官网发行说明</a>中发现在iOS 16 beta 6版本中将<code>shouldAutorotate</code>方法弃用。</p>
<p>在此记录一下，后面适配iOS16时看是否需要修改。</p>
<h1 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h1><p><code>UIKit</code><br><code>Deprecations</code></p>
<p><code>[UIViewController shouldAutorotate]</code>不再支持已弃用。<br>已弃用并替换为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[UIViewController attemptRotationToDeviceOrientation]</span><br><span class="line">[UIViewController setNeedsUpdateOfSupportedInterfaceOrientations]</span><br></pre></td></tr></table></figure>

<p>解决方法：如果支持的方向发生变化，可以使用下面方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[UIViewController setNeedsUpdateOfSupportedInterfaceOrientations]</span><br></pre></td></tr></table></figure>

<p>详细内容可查阅<a href="https://developer.apple.com/documentation/ios-ipados-release-notes/ios-16-release-notes/">官网发行说明</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.apple.com/documentation/ios-ipados-release-notes/ios-16-release-notes/">官网发行说明</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于iOS动态库</title>
    <url>/2020/02/28/%E5%85%B3%E4%BA%8EiOS%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h1 id="动态库概述"><a href="#动态库概述" class="headerlink" title="动态库概述"></a>动态库概述</h1><p>决定应用程序性能的两个重要因素是它们启动时间和它们的内存占用量。减少应用程序可执行文件的大小，并在启动后最大程度地减少其内存使用量，使该应用程序启动熟读更快，并在启动后使用较少的内存。使用动态库而不是静态库可减少应用程序的可执行文件大小。他们还允许应用程序仅在需要时而不是在启动时才延迟具有特殊功能的库加载。此功能进一步有助于缩短启动时间和有效使用内存。</p>
<p>本文介绍了动态库，并说明了如何使用动态库而不是静态库来减少应用程序文件大小和初始内存占用。本文还概述了应用程序在运行时用于动态库加载程序兼容性功能。</p>
<h2 id="什么是动态库？"><a href="#什么是动态库？" class="headerlink" title="什么是动态库？"></a>什么是动态库？</h2><p>应用程序的大多数功能都是在可执行代码库中实现的。使用静态连接器将应用程序与库链接后，该应用程序使用的代码将复制到生成的可执行文件中。<code>A 静态链接</code>收集编译源代码，称为目标代码和库代码成一个可执行文件在运行时加载到存储器中的全部。成为应用程序可执行文件一部分的库称为静态库。<code>静态库</code>是目标文件的集合或归档。</p>
<blockquote>
<p>Note：静态库也称为静态档案库和静态链接的共享库。</p>
</blockquote>
<p>启动应用程序是,该应用程序的代码（包括与之链接的静态库的代码）被加载到应用程序的地址空间中。将许多静态库链接到应用程序中会生成大型应用程序可执行文件。<strong>图1</strong>显示静态库中实现的功能的应用程序的内存使用情况。具有大型可执行文件的应用程序会遇到启动速度慢和内存占用大的问题。此外，更新静态库后，其客户端应用程序也不会从对其进行的改进中收益。要访问改进的功能，应用程序的开发人员必须将应用程序的目标文件与库的新版本链接。应用程序用户将不得不用最新版本替换其应用程序副本。因此，要使用程序始终具有静态库提供的最新功能，就需要开发人员和最终用户进行破坏性的工作。</p>
<p><strong>图1 使用静态库的应用</strong></p>
<p><img src="https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/art/address_space1_2x.png" alt="图1 使用静态库的应用"></p>
<p>更好的方法是让应用在启动时或运行时在实际需要时将代码加载到其地址空间中。提供这种灵活性的库的类型称为<code>动态库</code>。动态库不是静态链接到客户端应用程序中的。它们不会成为可执行文件的一部分。相反，可以在启动应用程序或运行时将动态库加载（并链接到应用程序）。</p>
<blockquote>
<p>Note: 动态库也称为动态共享库，共享对象或动态链接库。</p>
</blockquote>
<p>图2显示了如何将某些功能实现为动态库而不是静态库，以减少启动后应用程序使用的内存。</p>
<p><strong>图2 使用动态库的应用程序</strong></p>
<p><img src="https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/art/address_space2_2x.png" alt="图2 使用动态库的应用程序"></p>
<p>使用动态库，程序可以从对其自动使用的库的改进中受益，因为他们与库的链接是动态的，而不是静态的。也就是说，可以在不要求应用程序开发人员重新编译应用程序的情况下改进和扩展客户端应用程序的功能。为OS X 编写的应用程序受益于此功能，因为OS X 中的所有系统库都是动态库。这就是使用Carbon或Cocoa技术的应用程序如何从OS X的改进中受益的方法。</p>
<p>动态库提供的另一个好吃是，它们可以在加载时初始化，并且在客户端应用正常终止时可以执行清理任务。静态库没有此功能。有关详细信息，请参见<code>模块初始化器和终结器</code>。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><h2 id="Podfile-配置"><a href="#Podfile-配置" class="headerlink" title="Podfile 配置"></a>Podfile 配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">source &#x27;http://***/iOS/yryc-specs.git&#x27;</span><br><span class="line">platform :ios, &#x27;8.0&#x27;</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">workspace &#x27;MyDemo.xcworkspace&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;MyDemo&#x27; do</span><br><span class="line">	project &#x27;MyDemo.xcodeproj&#x27;</span><br><span class="line"></span><br><span class="line"> 	pod &#x27;ReactiveObjC&#x27;, &#x27;~&gt; 3.1.1&#x27;</span><br><span class="line"> 	pod &#x27;ZLPhotoBrowser&#x27;</span><br><span class="line"> 	pod &#x27;MySDK&#x27;, :git =&gt; &#x27;http://***/iOS/MySDK.git&#x27;, :branch =&gt; &#x27;master&#x27;</span><br><span class="line"> 	</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target &#x27;MySDK&#x27; do</span><br><span class="line">	project &#x27;../MySDK/MySDK.xcodeproj&#x27;</span><br><span class="line"></span><br><span class="line">	pod &#x27;ReactiveObjC&#x27;, &#x27;~&gt; 3.1.1&#x27;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 查看SDK和IPA二进制文件包含指令集</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cd 到SDK 或 IPA Mach-O二进制文件目录</span><br><span class="line"></span><br><span class="line">lipo -info MySDK</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看SDK和IPA二进制文件包含的动态库</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到SDK 或 IPA Mach-O二进制文件目录</span><br><span class="line"></span><br><span class="line">otool -L MySDK</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://tech.meituan.com/2018/07/12/mci.html">MCI：移动持续集成在大众点评的实践</a></li>
<li><a href="https://juejin.im/post/5a620cf5f265da3e36415764">蜂鸟商家版 iOS 组件化 &#x2F; 模块化实践总结</a></li>
<li><a href="https://developer.apple.com/documentation">Developer Documentation</a></li>
<li><a href="https://clang.llvm.org/docs/Modules.html#introduction">LLVM</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html#//apple_ref/doc/uid/TP40001908-SW1">Dynamic Library Programming Topics</a></li>
</ul>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>关于iOS隐私清单适配</title>
    <url>/2023/12/14/%E5%85%B3%E4%BA%8EiOS%E9%9A%90%E7%A7%81%E6%B8%85%E5%8D%95%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>在2024年5月1日之后如果项目中没添加隐私清单，应用则无法上架到AppStore，需要引起开发者的注意避免卡时间节点。</p>
<p>添加隐私清单Xcode版本最低是15，打完包需求测下iOS12的系统是否崩溃。</p>
<p>如果崩溃可以参考<a href="https://blog.csdn.net/ochenmengo/article/details/135407476">Xcode15在iOS12上崩溃的原因</a>文章中提到方式进行修复。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api">Describing use of required reason API</a></li>
<li><a href="https://github.com/flutter/flutter/issues/131494">Flutter对应issues</a></li>
<li><a href="https://github.com/flutter/engine/pull/48951/files">Flutter隐私清单位置</a></li>
<li><a href="https://developer.apple.com/news/?id=3d8a9yyh">App Store提交的隐私更新</a></li>
<li><a href="https://developer.apple.com/support/third-party-SDK-requirements/">隐私清单和签名</a></li>
<li><a href="https://developer.apple.com/support/third-party-SDK-requirements/">需要添加隐私清单的第三方列表</a></li>
<li><a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api">描述所需隐私Api原因</a></li>
<li><a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests">在隐私清单中描述数据使用情况</a></li>
<li><a href="https://developer.apple.com/news/?id=3d8a9yyh">隐私清单适配截止时间点</a></li>
<li><a href="https://juejin.cn/post/7311876701909549065">iOS 的隐私清单究竟是什么</a></li>
<li><a href="https://juejin.cn/post/7329732000087425064?searchId=2024031314123227142903067417CAB906">iOS17 隐私协议适配详解</a></li>
<li><a href="https://juejin.cn/post/7260752483054600252?searchId=2024031314123227142903067417CAB906">一文解读苹果隐私新政：提供隐私清单文件</a></li>
<li><a href="https://juejin.cn/post/7244561312709558330?searchId=2024031314123227142903067417CAB906">探索XCode15新特性</a></li>
<li><a href="https://blog.csdn.net/ochenmengo/article/details/135407476">Xcode15在iOS12上崩溃的原因</a></li>
<li><a href="https://github.com/ccgus/fmdb/blob/master/privacy/PrivacyInfo.xcprivacy">FMDB</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/blob/main/PrivacyInfo.xcprivacy">Protobuf</a></li>
<li><a href="https://github.com/SnapKit/SnapKit/blob/develop/Sources/PrivacyInfo.xcprivacy">SnapKit</a></li>
<li><a href="https://github.com/flutter/engine/blob/main/shell/platform/darwin/ios/framework/PrivacyInfo.xcprivacy">Flutter engine</a></li>
<li><a href="https://github.com/SDWebImage/SDWebImage/blob/master/SDWebImage/Resources/PrivacyInfo.xcprivacy">SDWebImage</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于使用Claude4生成页面技巧</title>
    <url>/2025/07/15/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8Claude4%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>直接丢图片给<code>Claude</code>发现生成的代码运行起来跟图片差别很大。</p>
<p>可以使用下方提示词先将图片生成design.json，然后让其按照该<code>design.json</code>生成代码，效果会好很多，基本上稍微改改就可以使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Create a JSON-formatted design system profile. This profile should extract relevant visual</span><br><span class="line">design information from the provided screenshots. The JSON output must specifically include:</span><br><span class="line">The overarching design style (e.g., color palette, typography, spacing, visual hierarchy).</span><br><span class="line">The structural elements and layout principles.</span><br><span class="line">Any other attributes crucial for an Al to consistently replicate these design systems</span><br><span class="line">Crucially, do not include the specific content or data present within the images, focusing solely</span><br></pre></td></tr></table></figure>

<p>相应地我们也可以在项目根创建或生成个<code>CLAUDE.md</code>,固定代码规则，让Ai根据<code>CLAUDE.md</code>的规则生成代码。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.anthropic.com/engineering/claude-code-best-practices">claude-code-best-practices</a></li>
</ul>
]]></content>
      <categories>
        <category>Ai</category>
      </categories>
  </entry>
  <entry>
    <title>关于判断App是否运行在Mac上和常用软件整理</title>
    <url>/2021/03/15/%E5%85%B3%E4%BA%8E%E5%88%A4%E6%96%ADApp%E6%98%AF%E5%90%A6%E8%BF%90%E8%A1%8C%E5%9C%A8Mac%E4%B8%8A%E5%92%8C%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>在<a href="https://zh.wikipedia.org/wiki/Apple_M1">苹果M1芯片</a>的Mac上可以运行iOS App，而在Mac的<code>~/Library/Container</code>可以看到沙盒的内容。有时并不需要普通用户看到，所以需要做一些防护。</p>
<blockquote>
<p>注：刚重新在新电脑中配置了博客环境，这篇主要是测试博客是否有问题。其内容也很浅显，在网上应该很容易找到。</p>
<p>重新配置博客环境的时候，想着要不要将博客的主题<code>next</code>更换掉，但是找了一圈，发现并没有合适的,发现还是<code>next</code>比较简洁。</p>
<p>而且<code>next</code>也有很多人在用，也不太担心后期维护的问题，所以也就保持不变吧。</p>
</blockquote>
<h2 id="关于判断应用是否在Mac上运行"><a href="#关于判断应用是否在Mac上运行" class="headerlink" title="关于判断应用是否在Mac上运行"></a>关于判断应用是否在Mac上运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：Swift的API相同。</span><br><span class="line">- (BOOL)isiOSAppOnMac &#123;</span><br><span class="line">    BOOL isiOSAppOnMac = NO;</span><br><span class="line">    if (@available(iOS 14.0, *)) &#123;</span><br><span class="line">        isiOSAppOnMac = [NSProcessInfo processInfo].isiOSAppOnMac;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="关于如何将App运行到Mac上"><a href="#关于如何将App运行到Mac上" class="headerlink" title="关于如何将App运行到Mac上"></a>关于如何将App运行到Mac上</h2><blockquote>
<p>1、导出.app文件。</p>
</blockquote>
<p>这里我们可以使用<a href="https://imazing.com/">iMazing</a>导出。</p>
<p>当然也可以使用<code>Apple Configurator 2</code>这个软件,不过个人认为这个软件并没有<a href="https://imazing.com/">iMazing</a>好用。</p>
<blockquote>
<p>2、将.app文件拖到应用程序</p>
</blockquote>
<p>将.app拖到应用程序中，此时双击并不能打开，需要执行下方命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：*** 为app名称</span><br><span class="line">sudo xattr -rd com.apple.quarantine /Applications/***.app</span><br></pre></td></tr></table></figure>

<p>然后双击即可打开app。</p>
<blockquote>
<p>3、查看沙盒目录。</p>
</blockquote>
<p>原有的沙盒内容目前在资源库中，可以打开查看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/Library/Container</span><br></pre></td></tr></table></figure>

<p>感觉这点做的不太好，毕竟沙盒机制很安全，目前相当于所有沙盒内容到暴露在用户面前了。</p>
<hr>
<h2 id="常用软件记录"><a href="#常用软件记录" class="headerlink" title="常用软件记录"></a>常用软件记录</h2><p>这里主要整理一下常用的软件，不想再重新开文了，就都放到一篇文章中了。</p>
<h3 id="iMazing"><a href="#iMazing" class="headerlink" title="iMazing"></a><a href="https://imazing.com/">iMazing</a></h3><p><code>iMazing</code>类似于苹果端的手机助手，目前主要使用他导出手机上的IPA文件。还有就是安装IPA。</p>
<p>其实还有像<code>爱思助手</code>之类的软件，但感觉并不是很友好。</p>
<h3 id="checkra1n"><a href="#checkra1n" class="headerlink" title="checkra1n"></a><a href="https://checkra.in/">checkra1n</a></h3><p><code>checkra1n</code> 可以在iPhone X，iOS 12.0及更高版本的iPhone 5s上进行越狱。</p>
<p>一个很厉害的软件。我这边只测试过<code>iPhone 6s</code>，可以稳定的越狱。至于<code>iPhone X</code>及以上设备，这边并没有测试过，不过在推特上看到有人测试过，也是可以稳定越狱。</p>
<h3 id="Hopper-Disassemble"><a href="#Hopper-Disassemble" class="headerlink" title="Hopper Disassemble"></a><a href="https://www.hopperapp.com/">Hopper Disassemble</a></h3><p>逆向工程工具，可让您反汇编，反编译和调试应用程序。可以跟<a href="https://www.hex-rays.com/products/ida/support/download_freeware/">IDA</a>配合使用。</p>
<h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a><a href="https://www.hex-rays.com/products/ida/support/download_freeware/">IDA</a></h3><p>逆向工程工具。</p>
<h3 id="charles"><a href="#charles" class="headerlink" title="charles"></a><a href="https://www.charlesproxy.com/">charles</a></h3><p>抓包工具。</p>
<h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a><a href="https://apps.apple.com/cn/app/stream/id1312141691">stream</a></h3><p>手机端、IPA端的抓包工具，使用比较方便。</p>
<h3 id="Reveal"><a href="#Reveal" class="headerlink" title="Reveal"></a><a href="https://revealapp.com/">Reveal</a></h3><p>UI检查工具。</p>
<h3 id="postman"><a href="#postman" class="headerlink" title="postman"></a><a href="https://www.postman.com/downloads/">postman</a></h3><p>接口调试工具。</p>
<h3 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a><a href="https://www.sourcetreeapp.com/">Sourcetree</a></h3><p>git管理工具。</p>
<h3 id="SmartSVN"><a href="#SmartSVN" class="headerlink" title="SmartSVN"></a><a href="https://www.smartsvn.com/">SmartSVN</a></h3><p>SVN管理工具。</p>
<h3 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a><a href="https://github.com/JimLee1996/TrojanX">Trojan</a></h3><p><a href="https://github.com/trojan-gfw/trojan">Trojan</a>的macOS客户端。</p>
<h3 id="关于VPN"><a href="#关于VPN" class="headerlink" title="关于VPN"></a>关于VPN</h3><p>如果使用<a href="https://order.yizhihongxing.network/aff.php?aff=4651">VPN</a>个人推荐<a href="https://order.yizhihongxing.network/aff.php?aff=4651">一支红杏</a>，因为这个用了很多年，还是比较稳定的。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://imazing.com/">iMazing</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于多线程编程与GCD相关知识点整理</title>
    <url>/2020/12/02/%E5%85%B3%E4%BA%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E4%B8%8EGCD%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近重新阅读了<a href="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8BiOS%E4%B8%8EOS%20X%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%20iOS%E4%B8%8EOS%20X%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.pdf">《Objective-C高级编程iOS与OS X 多线程和内存管理》</a>，于是决定将<code>GCD</code>相关知识整理下，便于后期查阅。</p>
<blockquote>
<p>本文主要内容来源于<a href="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8BiOS%E4%B8%8EOS%20X%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%20iOS%E4%B8%8EOS%20X%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.pdf">《Objective-C高级编程iOS与OS X 多线程和内存管理》</a>和网络。</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8BiOS%E4%B8%8EOS%20X%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/GCD/GCD.png" alt="GCD"></p>
<h1 id="Grand-Central-Dispatch-GCD-概要"><a href="#Grand-Central-Dispatch-GCD-概要" class="headerlink" title="Grand Central Dispatch (GCD)概要"></a>Grand Central Dispatch (GCD)概要</h1><h2 id="什么是GCD"><a href="#什么是GCD" class="headerlink" title="什么是GCD"></a>什么是GCD</h2><p><code>Grand Central Dispatch(GCD)</code>是异步执行任务的技术之一。一般将应用程序中记述的线程管理用的代码在系统级中实现。开发者只需要定义想执行的任务并追加到适当的<code>Dispatch Queue</code>中，<code>GCD</code>就能生成必要的线程并计划执行任务。由于线程管理是作为系统的一部分来实现的，因此可统一管理，也可执行任务，这样比以前的线程更有效率。</p>
<p>下面为简单使用<code>GCD</code>的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^&#123;</span><br><span class="line">    /*</span><br><span class="line">     异步执行长时间操作</span><br><span class="line">     例如：数据库访问等</span><br><span class="line"></span><br><span class="line">     长时间处理结束，主线程使用处理结果</span><br><span class="line">     */</span><br><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        /*</span><br><span class="line">         只在主线程可以执行的处理</span><br><span class="line">         例如：页面刷新</span><br><span class="line">         */</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在使用<code>GCD</code>之前，<code>Cocoa</code>框架提供了<code>NSObject</code>类的<code>performSelectorInBackground:withObject:</code>、<code>performSelectorOnMainThread:withObject:waitUntilDone:</code>实例方法等简单的多线程编程技术。</p>
<p>例如上方的示例可以写成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)performFunction&#123;</span><br><span class="line">    [self performSelectorInBackground:@selector(doWork) withObject:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)doWork&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        /*</span><br><span class="line">        异步执行长时间操作</span><br><span class="line">        例如：数据库访问等</span><br><span class="line"></span><br><span class="line">        长时间处理结束，主线程使用处理结果</span><br><span class="line">        */</span><br><span class="line">        [self performSelectorOnMainThread:@selector(doneWork) withObject:nil waitUntilDone:NO];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)doneWork&#123;</span><br><span class="line">    /*</span><br><span class="line">    只在主线程可以执行的处理</span><br><span class="line">    例如：页面刷新</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h2><p>由于一个CPU一次只能执行一个命令，不能执行某处分来的并列的两个命令，因此通过CPU执行的CPU命令就好比一条无分叉的大道，其执行不会出现分歧。</p>
<p>这里所说的“<code>1个CPU执行的CPU命令列为一条无分叉路径</code>”即为“<code>线程</code>”。</p>
<p>现在一个物理的CPU芯片实际上有64个（64核）CPU，如果1个CPU核虚拟为两个CPU核工作，那么一台计算机上使用多个CPU核就是理所当然的事了。尽管如此，“<code>1个CPU核执行的CPU命令列为一条无分叉路径</code>”仍然不变。</p>
<p>这种无分叉路径不只1条，存在有多条时即为“<code>多线程</code>”。在多线程中，1个CPU核执行多条不同路径上的不同命令。</p>
<p><code>OS X</code>和<code>iOS</code>的核心<code>XNU</code>内核再发生操作系统事件时（如每隔一定事件，换起系统调用等情况）会切换执行路径。执行中路径的状态，例如CPU的寄存器等信息保存到各自路径专用的内存块中，从切换目标路径专用的内存块中，复原CPU寄存器等信息，继续执行切换路径的CPU命令序列。这杯称为<code>上下文切换</code>。</p>
<p>由于使用多线程的程序可以再某个线程和其他线程之间反复多次进行上下文切换，因此看上去就好笑1个CPU核能够并列执行多个线程一样。而且在具有多个CPU核的情况下，就不是“看上去像”了，而是真的提供了多个CPU核并行执行多个线程技术。</p>
<p>这种利用多线程编程的技术就被称为“&#96;多线程编程</p>
<p>但是，多线程编程实际上是一种易发生各种问题的编程技术。比如多个线程更新相同的资源会导致数据的不一致（数据竞争）、停止等待事件的线程会导致多个线程相互持续等待（死锁）、使用太多线程会消耗大量内存等。</p>
<p>尽管极易发生各种问题，也应当使用多线程编程。因为使用多线程编程可保证应用程序的响应性能。</p>
<h1 id="GCD的API"><a href="#GCD的API" class="headerlink" title="GCD的API"></a>GCD的API</h1><h2 id="Dispatch-Queue"><a href="#Dispatch-Queue" class="headerlink" title="Dispatch Queue"></a>Dispatch Queue</h2><p>“<code>Dispatch Queue</code>”如其名称所示，是执行处理的等待队列。应用程序编程人员通过<code>dispatch_async</code>函数等API，在Block语法中记述想执行的处理并将其追加到<code>Dispatch Queue</code>中。<code>Dispatch Queue</code>按照追加的顺序（先进先出FIFO,First-In-First-Out）执行处理。</p>
<p>另外在执行处理时存在两种<code>Dispatch Queue</code>,一种是等待现在执行中处理的<code>Serial Dispatch Queue（串行调度队列）</code>,另一种是不等待现在执行中处理的<code>Concurrent Dispatch Queue（并发调度队列）</code>。</p>
<table>
<thead>
<tr>
<th>Dispatch Queue种类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Serial Dispatch Queue(串行调度队列)</td>
<td>等待现在执行中处理结束</td>
</tr>
<tr>
<td>Concurrent Dispatch Queue(并发调度队列)</td>
<td>不等待现在执行中处理结束</td>
</tr>
</tbody></table>
<h2 id="dispatch-queue-create"><a href="#dispatch-queue-create" class="headerlink" title="dispatch_queue_create"></a>dispatch_queue_create</h2><p>通过<code>didpatch_queue_create</code>函数可生成<code>Dispatch Queue</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 串行队列的创建方法</span><br><span class="line">dispatch_queue_t serialDispatchQueue = dispatch_queue_create(&quot;com.example.gcd.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">// 并发队列的创建方法</span><br><span class="line">dispatch_queue_t concurrentDispatchQueue = dispatch_queue_create(&quot;com.example.gcd.concurrent&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure>

<h2 id="Main-Dispatch-Queue-x2F-Global-Dispatch-Queue"><a href="#Main-Dispatch-Queue-x2F-Global-Dispatch-Queue" class="headerlink" title="Main Dispatch Queue&#x2F;Global Dispatch Queue"></a>Main Dispatch Queue&#x2F;Global Dispatch Queue</h2><p>第二种方法是获取系统标准提供的<code>Dispatch Queue</code>。</p>
<p>实际上不用特意生成<code>Dispatch Queue</code>系统也会给我们提供几个。那就是<code>Main Dispatch Queue</code>和<code>Global Dispatch Queue</code>。</p>
<p><code>Main Dispatch Queue</code>正如其名称中含有的<code>Main</code>一样，是在主线程中执行的<code>Dispatch Queue</code>。因为主线程只有1个，所以<code>Main Dispatch Queue</code>自然就是<code>Serial Dispatch Queue</code>。</p>
<p>追加到<code>Main Dispatch Queue</code>的处理在主线程的<code>RunLoop</code>中执行。由于再主线程中执行，因此要哦将用户界面的界面更新等一些必须在主线程中执行的处理追加到<code>Main Dispatch Queue</code>使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//主线程队列获取</span><br><span class="line">dispatch_queue_t mainDispatchQueue = dispatch_get_main_queue();</span><br></pre></td></tr></table></figure>

<p><code>Global Dispatch queue(全局并发队列)</code>是所有程序都能够使用的<code>concurrent Dispatch Queue(并发队列)</code>。没有必要通过<code>dispatch_queue_create</code>函数逐个生成<code>Concurrent Dispatch Queue</code>。只要获取<code>Global Dispatch Queue</code>使用即可。</p>
<p>另外，<code>Global Dispatch Queue</code>有4个执行优先级，分别是高优先级(High Priority)、默认优先级(Default Priority)、低优先级(Low Priority)和后台优先级(Background Priority)。通过XNU内核管理用于<code>Global Dispatch Queue</code>的线程，将各自使用的<code>Global Dispatch Queue</code>的执行优先级作为线程的执行优先级使用。在向<code>Global Dispatch Queue</code>追加处理时，应选择与处理内容对应的执行优先级的<code>Global Dispatch Queue</code>。</p>
<p>但通过XNU内核用于<code>Global Dispatch Queue</code>的线程并不能保证实时性，因此执行优先级只是大致的判断。例如再处理内容的执行可有可无时，使用后台优先级的<code>Global Dispatch Queue</code>等，只能进行这种程度的区分。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>Dispatch Queue的种类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Main Dispatch Queue</td>
<td>Serial Dispatch Queue</td>
<td>主线程执行</td>
</tr>
<tr>
<td>Global Dispatch Queue(High Priority)</td>
<td>Concurrent Dispatch Queue</td>
<td>执行优先级：高(最高优先)</td>
</tr>
<tr>
<td>Global Dispatch Queue(Default Priority)</td>
<td>Concurrent Dispatch Queue</td>
<td>执行优先级:默认</td>
</tr>
<tr>
<td>Global Dispatch Queue(Low Priority)</td>
<td>Concurrent Dispatch Queue</td>
<td>执行优先级:低</td>
</tr>
<tr>
<td>Global Dispatch Queue(Background Priority)</td>
<td>Concurrent Dispatch Queue</td>
<td>执行优先级：后台</td>
</tr>
</tbody></table>
<blockquote>
<p>各种 Dispatch Queue的获取方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Main Dispatch Queue 的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t mainDispatchQueue = dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (高优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueHigh = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (默认优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (低优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueLow = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Global Dispatch Queue (后台优先级)的获取方法</span><br><span class="line"> */</span><br><span class="line">dispatch_queue_t globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);</span><br></pre></td></tr></table></figure>

<h2 id="dispatch-set-target-queue"><a href="#dispatch-set-target-queue" class="headerlink" title="dispatch_set_target_queue"></a>dispatch_set_target_queue</h2><p><code>dispatch_queue_create</code>函数生成的<code>Dispatch Queue</code>不管是<code>Serial Dispatch Queue(串行队列)</code>还是<code>Concurrent Dispatch Queue（并行队列）</code>都使用默认优先级<code>Global Dispatch Queue</code>相同执行优先级的线程。而变更生成的<code>Dispatch Queue</code>的执行优先级要使用<code>dispatch_set_target_queue</code>函数。在后台执行动作处理的<code>Serial Dispatch Queue</code>的生成方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t mySerialDispatchQueue = dispatch_queue_create(&quot;com.example.gcd.mySerialDispatchQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">dispatch_queue_t globalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);</span><br><span class="line">dispatch_set_target_queue(mySerialDispatchQueue, globalDispatchQueueBackground);</span><br></pre></td></tr></table></figure>

<p>指定要变更执行优先级的<code>Dispatch Queue</code>为<code>dispatch_set_target_queue</code>函数的第一个参数，指定与要使用的优先级相同优先级的<code>Global Dispatch Queue</code>为第二个参数(目标)。 第一个参数如果指定系统提供的<code>Main Dispatch Queue</code>和<code>Global Dispatch Queue</code>则不知道会出现什么状况，因此这些均不可指定。</p>
<p>将<code>Dispatch Queue</code>指定为<code>dispatch_set_target_queue</code>函数的参数，不仅可以变更<code>Dispatch Queue</code>的执行优先级，还可以作为<code>Dispatch Queue</code>的执行阶层。如果在多个<code>Serial Dispatch Queue</code>中用<code>dispatch_set_target_queue</code>函数指定目标为某一个<code>Serial Dispatch Queue</code>，那么原先本应并行执行的多个<code>Serial Dispatch Queue</code>，在目标<code>Serial Dispatch Queue</code>上只能同时执行一个处理。</p>
<p>在必须将不可并行执行的处理追加到多个<code>Serial Dispatch Queue</code>中时，如果使用<code>dispatch_set_target_queue</code>函数将目标指定为某一个<code>Serial Dispatch Queue</code>，即可防止处理并执行。</p>
<h2 id="dispatch-after"><a href="#dispatch-after" class="headerlink" title="dispatch_after"></a>dispatch_after</h2><p>如果想在指定时间后执行某操作，可以使用<code>dispatch_after</code>函数来实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;--- 延迟3秒后执行的操作 ---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//或</span><br><span class="line"></span><br><span class="line">dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.f * NSEC_PER_SEC));</span><br><span class="line">dispatch_after(time, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;--- 延迟3秒后执行的操作 ---&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>需要注意的是，<code>dispatch_after</code>函数并不是在指定时间后执行处理，而只是在指定时间追加处理到<code>Dispatch Queue</code>。此源代码与再3秒后用<code>dispatch_async</code>函数追加<code>Block</code>到<code>Main Dispatch Queue</code>相同。</p>
<h2 id="Dispatch-Group"><a href="#Dispatch-Group" class="headerlink" title="Dispatch_Group"></a>Dispatch_Group</h2><p>在追加到<code>Dispatch Queue</code>中的多个处理全部结束后想执行结束处理，这种情况会经常出现。只使用一个<code>Serial Dispatch Queue(串行调度队列)</code>时，只要将想执行的处理全部追加到该<code>Serial Dispatch Queue</code>中并在最后追加结束处理，即可实现。但是在使用<code>Concurrent Dispatch Queue（并发调度队列）</code>时或同时使用多个<code>Dispatch Queue</code>时，源代码就会变得颇为复杂。</p>
<p>在此种情况下使用<code>Dispatch Group</code>。例如下面的源代码为：追加3个Block到<code>Global Dispatch Queue(全局调度队列)</code>,这些Block如果全部执行完毕，就会执行<code>Main Dispatch Queue</code>中结束处理用的Block.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;---blk1---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;---blk2---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;---blk3---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@&quot;---done---&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因为向<code>Global Dispatch Queue(全局调度队列)</code>即<code>Concurrent Dispatch Queue（并发调度队列）</code>追加处理，多个线程并行执行，所以追加处理的执行顺序不定。执行时会发生变化，但是此执行结果的done一定是最后输出的。</p>
<p>另外，在<code>Dispatch Group</code>中也可以使用<code>dispatch_group_wait</code>函数仅等待全部处理结束。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">dispatch_group_t group = dispatch_group_create();</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;---blk1---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;---blk2---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_async(group, queue, ^&#123;</span><br><span class="line">    NSLog(@&quot;---blk3---&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br></pre></td></tr></table></figure>

<p><code>dispatch_group_wait</code>函数的第二个参数指定为等待的时间(超时)。它属于<code>dispatch_time_t</code>类型的值。该源代码使用<code>DISPATCH_TIME_FOREVER</code>，意味着永远等待。</p>
<p>如果需要指定等待事件，则需要如下处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t)1 * NSEC_PER_SEC);</span><br><span class="line">long result = dispatch_group_wait(group, time);</span><br><span class="line">if (result == 0) &#123;</span><br><span class="line">    //属于 Dispatch Group 的全部处理执行结束</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //属于 Dispatch Group 的某一个处理还在执行中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定<code>DISPATCH_TIME_NOW</code>,则代表不用任何等待即判断<code>Dispatch Group</code>是否处理完。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_group_wait(group, DISPATCH_TIME_NOW);</span><br></pre></td></tr></table></figure>

<h2 id="dispatch-barrier-async"><a href="#dispatch-barrier-async" class="headerlink" title="dispatch_barrier_async"></a>dispatch_barrier_async</h2><p>在访问数据库或文件时，使用<code>Serial Dispatch Queue(串行队列)</code>可避免数据竞争的问题。</p>
<p>写入处理确实不可与其他的写入处理以及包含数据处理的其他某些处理并行执行。但是如果读取处理只与读取处理并行执行，那么多个并行执行就不会发生问题。</p>
<p>也就是说，为了高效率地进行访问，读取处理追加到<code>Concurrent Dispatch Queue（并发调度队列）</code>中，写入处理在任一个读取处理没有执行的状态下，追加到<code>Serial Dispatch Queue(串行队列)</code>中即可（在写入处理结束之前，读取处理不可执行）。</p>
<p>虽然利用<code>Dispatch Group</code>和<code>dispatch_set_target_queue</code>函数也可实现，但是源代码会很复杂。</p>
<p>GCD为我们提供了更为聪明的解决方法——<code>dispatch_barrier_async</code>函数。该函数同<code>dispatch_queue_create</code>函数生成的<code>Concurrent Dispatch Queue</code>一起使用。</p>
<p><code>dispatch_barrier_async</code>可以简单的理解为用于等待前面的任务执行完毕后自己才执行，而它后面的任务需等待它完成之后才执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd.barrier&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        [NSThread sleepForTimeInterval:2];</span><br><span class="line">        NSLog(@&quot;dispatch_async1&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        [NSThread sleepForTimeInterval:1];</span><br><span class="line">        NSLog(@&quot;dispatch_async2&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    //等待前面的任务执行完毕后自己才执行，后面的任务需等待它完成之后才执行</span><br><span class="line">    dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;dispatch_barrier_async&quot;);</span><br><span class="line">        [NSThread sleepForTimeInterval:4];</span><br><span class="line">        NSLog(@&quot;四秒后：dispatch_barrier_async&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        [NSThread sleepForTimeInterval:1];</span><br><span class="line">        NSLog(@&quot;dispatch_async3&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;dispatch_async4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">打印结果：</span><br><span class="line">dispatch_async2</span><br><span class="line">dispatch_async1</span><br><span class="line">dispatch_barrier_async</span><br><span class="line">四秒后：dispatch_barrier_async</span><br><span class="line">dispatch_async4</span><br><span class="line">dispatch_async3</span><br></pre></td></tr></table></figure>


<h2 id="dispatch-sync"><a href="#dispatch-sync" class="headerlink" title="dispatch_sync"></a>dispatch_sync</h2><p><code>dispatch_async</code>函数的<code>async</code>意味着“非同步”(asynchronous),就是将指定的Block“非同步”地追加到指定的<code>Dispatch Queue</code>中。<code>dispatch_async</code>函数不做任何等待。</p>
<p>既然有“async”,当然也就有“sync”，即<code>dispatch_sync</code>函数。它意味着“同步”（synchronous）,也就是将指定的Block“同步”追加到指定的<code>Dispatch Queue</code>中。在追加Block结束之前，<code>dispatch_sync</code>函数会一直等待。</p>
<h2 id="dispatch-apply"><a href="#dispatch-apply" class="headerlink" title="dispatch_apply"></a>dispatch_apply</h2><p><code>dispatch_apply</code>函数是<code>dispatch_sync</code>函数和<code>Dispatch Group</code>的关联API。该函数按指定的次数将指定的Block追加到指定的<code>Dispatch Queue</code>中，并等待全部处理执行结束。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">dispatch_apply(10, queue, ^(size_t index) &#123;</span><br><span class="line">    NSLog(@&quot;---%zu---&quot;,index);</span><br><span class="line">&#125;);</span><br><span class="line">NSLog(@&quot;---done---&quot;);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">日志打印结果：</span><br><span class="line">---0---</span><br><span class="line">---1---</span><br><span class="line">---2---</span><br><span class="line">---3---</span><br><span class="line">---4---</span><br><span class="line">---5---</span><br><span class="line">---6---</span><br><span class="line">---7---</span><br><span class="line">---8---</span><br><span class="line">---9---</span><br><span class="line">---done---</span><br></pre></td></tr></table></figure>


<h2 id="dispatch-suspend-x2F-dispatch-resume"><a href="#dispatch-suspend-x2F-dispatch-resume" class="headerlink" title="dispatch_suspend&#x2F;dispatch_resume"></a>dispatch_suspend&#x2F;dispatch_resume</h2><p>当追加大量处理到<code>Dispatch Queue</code>时，在追加处理的过程中，有时希望不执行已追加的处理。例如演算结果被Block截获时，一些处理会对这个演算结果造成影响。</p>
<p>在这种情况下，只要挂起<code>Dispatch Queue</code>即可。当可以执行时再恢复。</p>
<p><code>dispatch_suspend</code>函数挂起指定的<code>Dispatch Queue</code>.</p>
<p><code>dispatch_resume</code>函数恢复指定的<code>Dispatch Queue</code>。</p>
<p>这些函数对已经执行的处理没有影响。挂起后，追加到<code>Dispatch Queue</code>中但尚未执行的处理再此之后停止执行。而恢复则使得这些处理能够继续执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd.suspend&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    dispatch_suspend(queue);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_apply(5, queue, ^(size_t index) &#123;</span><br><span class="line">            NSLog(@&quot;---%ld---1----&quot;,index);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    sleep(1);</span><br><span class="line">    NSLog(@&quot;---2---&quot;);</span><br><span class="line">    dispatch_resume(queue);</span><br><span class="line"></span><br><span class="line">日志打印：</span><br><span class="line">---2---</span><br><span class="line">---0---1----</span><br><span class="line">---1---1----</span><br><span class="line">---2---1----</span><br><span class="line">---3---1----</span><br><span class="line">---4---1----</span><br></pre></td></tr></table></figure>

<h2 id="Dispatch-Semaphore"><a href="#Dispatch-Semaphore" class="headerlink" title="Dispatch Semaphore"></a>Dispatch Semaphore</h2><p>当并行执行的处理更新数据时，会产生数据不一致的情况，有时应用程序还会异常结束。虽然用<code>Serial Dispatch Queue</code>和<code>dispatch_barrier_async</code>函数可避免这类问题，但有必要进行更细粒度的排他控制。在此就可以使用信号量。</p>
<p><code>Dispatch Semaphore(信号量)</code>是持有计数的信号，该计数是多线程编程中的计数类型信号。所谓信号，类似于过马路时常用的手旗。可以通过时举起手旗，不可通过时放下手旗。而在<code>Dispatch Semaphore</code>中，使用计数来实现该功能。计数为0时等待，计数为1或大于1时，减去1而不等待。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(intptr_t value); // 创建信号量</span><br><span class="line">dispatch_semaphore_signal(dispatch_semaphore_t  _Nonnull dsema); // 发送信号量</span><br><span class="line">dispatch_semaphore_wait(dispatch_semaphore_t  _Nonnull dsema, dispatch_time_t timeout) // 等待信号量</span><br></pre></td></tr></table></figure>

<p>用法示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</span><br><span class="line"></span><br><span class="line">dispatch_async(dispatch_queue_create(&quot;com.example.gcd.queue&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">    sleep(1);</span><br><span class="line">    NSLog(@&quot;---1---&quot;);</span><br><span class="line">    dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">NSLog(@&quot;---done---&quot;);</span><br></pre></td></tr></table></figure>

<p><code>dispatch_semaphore_wait</code>函数的返回值也与<code>dispatch_group_wait</code>函数相同。可像以下源代码这样，通过返回值进行分支处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</span><br><span class="line"></span><br><span class="line">    dispatch_async(dispatch_queue_create(&quot;com.example.gcd.queue&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">        sleep(2);</span><br><span class="line">        NSLog(@&quot;---1---&quot;);</span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t) 1 * NSEC_PER_SEC);</span><br><span class="line">    long result = dispatch_semaphore_wait(semaphore, time);</span><br><span class="line">    if (result == 0) &#123;</span><br><span class="line">        /*</span><br><span class="line">         * 由于Dispatch Semaphore 的计数值达到大于等于1</span><br><span class="line">         * 或者在待机中的指定时间内</span><br><span class="line">         * Dispatch Semaphore 的计数值达到大于等于1</span><br><span class="line">         *</span><br><span class="line">         * 可执行需要进行排他控制的处理</span><br><span class="line">         */</span><br><span class="line">        NSLog(@&quot;---2---&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        /*</span><br><span class="line">         * 由于 Dispatch Semaphore 的计数值为0</span><br><span class="line">         * 因此再达到指定时间为止待机</span><br><span class="line">         */</span><br><span class="line">        NSLog(@&quot;---3---&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">日志打印：</span><br><span class="line"></span><br><span class="line">---3---</span><br><span class="line">---1---</span><br></pre></td></tr></table></figure>

<p>在没有<code>Serial Dispatch Queue</code>和<code>dispatch_barrier_async</code>函数那么大粒度且一部分处理需要进行排他控制的情况下，<code>Dispatch Semaphore</code>便可发挥威力。</p>
<h2 id="dispatch-once"><a href="#dispatch-once" class="headerlink" title="dispatch_once"></a>dispatch_once</h2><p><code>dispatch_once</code>函数是保证再应用程序中共只执行一次指定处理的API。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    //初始化</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Dispatch-I-x2F-O"><a href="#Dispatch-I-x2F-O" class="headerlink" title="Dispatch I&#x2F;O"></a>Dispatch I&#x2F;O</h2><p>在读取较大文件时，如果将文件分成合适的大小并使用<code>Global Dispatch Queue</code>并列读取的话，应该会比一般的读取快很多。现今的输入&#x2F;输出硬件已经可以做到一次使用多个线程更快地并列读取了。能实现这一功能的就是<code>Dispatch I/O</code>和<code>Dispatch Data</code>。</p>
<p>通过<code>Dispatch I/O</code>读取文件时，使用<code>Global Dispatch Queue</code>将1个文件按某个大小<code>read/write</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dispatch_async(queue, ^&#123; /* 读取  0     ～ 8080  字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  8081  ～ 16383 字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  16384 ～ 24575 字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  24576 ～ 32767 字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  32768 ～ 40959 字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  40960 ～ 49191 字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  49192 ～ 57343 字节*/ &#125;);</span><br><span class="line">dispatch_async(queue, ^&#123; /* 读取  57344 ～ 65535 字节*/ &#125;);</span><br></pre></td></tr></table></figure>

<p>可以像上方这样，将文件分割为一块一块地进行读取处理。分割读取的数据通过使用<code>Dispatch Data</code>可更为简单低进行结合和分割。</p>
<blockquote>
<p>异步串行读取文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSString *path = [[[NSBundle bundleForClass:[self class]] bundlePath] stringByAppendingPathComponent:@&quot;/test/Linux Shell脚本攻略.pdf&quot;];</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;com.example.gcd.serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"></span><br><span class="line">/** 文件描述符 */</span><br><span class="line">dispatch_fd_t fd = open(path.UTF8String, O_RDONLY, 0);</span><br><span class="line">/** 创建一个调度I/O通道，并将其与指定的文件描述符关联 */</span><br><span class="line">dispatch_io_t io_t = dispatch_io_create(DISPATCH_IO_RANDOM, fd, queue, ^(int error) &#123;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;);</span><br><span class="line">size_t water = 1024*1024;</span><br><span class="line">/** 设置一次读取的最小字节大小 */</span><br><span class="line">dispatch_io_set_low_water(io_t, water);</span><br><span class="line">/** 设置一次读取的最大字节 */</span><br><span class="line">dispatch_io_set_high_water(io_t, water);</span><br><span class="line">long long fileSize = [[NSFileManager defaultManager] attributesOfItemAtPath:path error:nil].fileSize;</span><br><span class="line">NSMutableData *totalData = [[NSMutableData alloc] init];</span><br><span class="line">/** 进行文件读取 */</span><br><span class="line">dispatch_io_read(io_t, 0, fileSize, queue, ^(bool done, dispatch_data_t  _Nullable data, int error) &#123;</span><br><span class="line">    if (error == 0) &#123;</span><br><span class="line">        size_t len = dispatch_data_get_size(data);</span><br><span class="line">        if (len &gt; 0) &#123;</span><br><span class="line">            [totalData appendData:(NSData *)data];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (done) &#123;</span><br><span class="line">        //将读取的文件存到沙盒中</span><br><span class="line">        NSString *filePath = [NSHomeDirectory() stringByAppendingPathComponent:@&quot;Documents/shell.pdf&quot;];</span><br><span class="line">        [[NSFileManager defaultManager] createFileAtPath:filePath contents:totalData attributes:nil];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h1 id="GCD实现"><a href="#GCD实现" class="headerlink" title="GCD实现"></a>GCD实现</h1><h2 id="Dispatch-Queue-1"><a href="#Dispatch-Queue-1" class="headerlink" title="Dispatch Queue"></a>Dispatch Queue</h2><p>GCD的<code>Dispatch Queue</code>非常方便，那么它究竟是如何实现的呢？</p>
<ul>
<li>用于管理追加的Block的C语言层实现的<code>FIFO</code>队列</li>
<li><code>Atomic</code>函数中实现的用于排他控制的轻量级信号</li>
<li>用于管理线程的C语言层实现的一些容器</li>
</ul>
<blockquote>
<p>通常，应用程序中编写的线程管理用的代码要再系统级实现。</p>
</blockquote>
<p>实际上正如这句话所说，在系统级即<code>iOS</code>和<code>OS X</code>的核心<code>XNU</code>内核级上实现。</p>
<p>因此，无论编程人员入户努力编写管理线程的代码，在性能方面也不可能胜过XNU内核级所实现的GCD。</p>
<p>所以使用GCD要比使用<code>pthreads</code>和<code>NSThread</code>这些一般的多线程编程API更好。并且，如果使用GCD就不必编写为操作线程反复出现的类似的源代码（这被称为固定源代码片段），而可以在线程中集中实现处理内容。所以我们尽量使用GCD或者使用了Cocoa框架GCD的NSOperationQueue类等API。</p>
<hr>
<p>用于实现Dispatch Queue而使用的软件组件</p>
<table>
<thead>
<tr>
<th>组件名称</th>
<th>提供技术</th>
</tr>
</thead>
<tbody><tr>
<td>libdispatch</td>
<td>Dispatch Queue</td>
</tr>
<tr>
<td>Libc(pthreads)</td>
<td>pthread_workqueue</td>
</tr>
<tr>
<td>XNU内核</td>
<td>workqueue</td>
</tr>
</tbody></table>
<p>编程人员所使用GCD的API全部为包含在<a href="https://apple.github.io/swift-corelibs-libdispatch/tutorial/">libdispatch</a>库中的C语言函数。 <code>Dispatch Queue</code>通过结构体和链表，被实现为<code>FIFO</code>队列。<code>FIFO</code>队列管理是通过<code>dispatch_async</code>等函数所追加的Block。</p>
<p>Block 并不是直接加入<code>FIFO</code>队列，而是先加入<code>Dispatch Continuation</code>这个一<code>dispatch_continuation_t</code>类型结构体中，然后再加入<code>FIFO</code>队列。该<code>Dispatch Continuation</code>用于记忆Block所属的<code>Dispatch Group</code>和其他一些信息，相当于一般常说的执行上下文。</p>
<p><code>Dispatch Queue</code>可通过<code>dispatch_set_target_queue</code>函数设定，可以设定执行该<code>Dispatch Queue</code>处理的<code>Dispatch Queue</code>为目标。该目标可像串珠子一样，设定多个连接再一起的<code>Dispatch Queue</code>。但是在连接串的最后必须设定为<code>Main Dispatch Queue</code>,或各种优先级的<code>Global Dispatch Queue</code>,或是准备用于<code>serial Dispatch Queue</code>的各种优先级的<code>Global Dispatch Queue</code>。</p>
<h2 id="Dispatch-Source"><a href="#Dispatch-Source" class="headerlink" title="Dispatch Source"></a>Dispatch Source</h2><p>GCD中除了主要的<code>Dispatch Queue</code>外，还有不太引人注目的<code>Dispatch Source</code>。它是BSD系内核惯有功能<code>kqueue</code>的包装。</p>
<p><code>kqueue</code>是在XNU内核中共发生各种事件时，在应用程序编程方执行处理的技术。其CPU负荷非常小，尽量不占用资源。<code>kqueue</code>可以说是应用程序处理XNU内核中发生的各种事件的方法中最优秀的一种。</p>
<p><code>Dispatch Source</code>可处理以下事件。</p>
<hr>
<p>Dispatch Source的种类</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>
<td>变量 增加</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_DATA_OR</td>
<td>变量 OR</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_MACH_SEND</td>
<td>MACH端口发送</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_MACH_RECV</td>
<td>MACH端口接收</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_PROC</td>
<td>检测到与进程相关的事件</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_READ</td>
<td>可读取文件映像</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_SIGNAL</td>
<td>接收信号</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_TIMER</td>
<td>定时器</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_VNODE</td>
<td>文件系统有变更</td>
</tr>
<tr>
<td>DISPATCH_SOURCE_TYPE_WRITE</td>
<td>可写入文件映像</td>
</tr>
</tbody></table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://opensource.apple.com/source/libdispatch/">GCD源码</a></li>
<li><a href="https://apple.github.io/swift-corelibs-libdispatch/tutorial/">libdispatch</a></li>
<li><a href="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8BiOS%E4%B8%8EOS%20X%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/Objective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%20iOS%E4%B8%8EOS%20X%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.pdf">《Objective-C高级编程iOS与OS X 多线程和内存管理》</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大屏设备应用适配</title>
    <url>/2025/05/13/%E5%85%B3%E4%BA%8E%E5%A4%A7%E5%B1%8F%E8%AE%BE%E5%A4%87%E5%BA%94%E7%94%A8%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<p>最近收到国内安卓市场关于大屏设备应用适配的邮件，具体内容大致如下方所示。</p>
<p>考虑到最近科技圈爆料的的2026年苹果将推出折叠屏,消息来源于郭明錤,可信度极高。</p>
<p>所以需要在空闲时间将手中的项目适配大屏。具体经验可以参考适配iPad的过程。</p>
<p>有时间可以看下移动智能终端生态联盟的<a href="https://www.itgsa.com/documents/5242001394058240">《ITGSA大屏设备应用适配白皮书2.0》</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ITGSA | 大屏设备应用适配白皮书2.0发布</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">尊敬的开发者：</span><br><span class="line"></span><br><span class="line">您好！</span><br><span class="line"></span><br><span class="line">为助力开发者高效实现多场景大屏适配，打造跨品牌一致流畅的优质用户体验，金标联盟成员vivo、OPPO、小米、联想联合发布《ITGSA大屏设备应用适配白皮书2.0》（以下简称《白皮书》），本白皮书聚焦折叠屏手机、平板、车机等大屏设备的适配优化，涵盖显示适配、界面布局指南、开发指导等内容，为开发者提供全链路适配支持。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们诚挚邀请广大开发者积极参与大屏适配，携手共建更智能、更统一的大屏生态。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">《ITGSA大屏设备应用适配白皮书2.0》 完整内容见链接：https://www.itgsa.com/documents/5242001394058240</span><br></pre></td></tr></table></figure>

<p>网上爆料的2026年苹果将推出的5款新机型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">年初：iPhone 17e（经济型号）</span><br><span class="line">秋季：iPhone 18 Air</span><br><span class="line">秋季：iPhone 18 Pro（角落打孔，告别刘海屏）</span><br><span class="line">秋季：iPhone 18 Pro Max（设计同上）</span><br><span class="line">秋季：iPhone 18 Fold（苹果首款折叠屏手机）</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.itgsa.com/documents/5242001394058240">《ITGSA大屏设备应用适配白皮书2.0》</a></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
  </entry>
  <entry>
    <title>关于小米《位置权限申请标准》的公告</title>
    <url>/2024/04/03/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%B1%B3%E3%80%8A%E4%BD%8D%E7%BD%AE%E6%9D%83%E9%99%90%E7%94%B3%E8%AF%B7%E6%A0%87%E5%87%86%E3%80%8B%E7%9A%84%E5%85%AC%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>小米在2024年6月6日正式施行《位置权限申请标准》,后面要准备相关资料，因为时间跨度比较长，为避免后面忘记特在次进行记录。</p>
<p>记录备份：</p>
<blockquote>
<p>备份一：如何提交&#x2F;填写审核材料，有指南吗？</p>
</blockquote>
<p>A：预计4月底，小米应用商店将会同步审核材料提交入口以及填写指南，届时，将会及时通知大家。</p>
<blockquote>
<p>备份二：什么时候需要按照“审核材料要求”提交材料？</p>
</blockquote>
<p>A：5月6日起。自2024年5月6日起至2024年6月5日，将设定为材料提交的适应期。在此期间，若您的应用已申请位置权限并计划于适应期内进行上架或更新，您需依照既定要求提交相应的审核材料。然而，适应期内，相关审核工作将仅针对解决在审核材料提交过程中所遇到的问题，并不根据“位置权限”申请的标准进行审核。自2024年6月6日起，将进入审核执行期。届时，小米应用商店将正式启动上述审核标准。一旦发现存在风险问题的应用，将依照规定进行违规处理。</p>
<blockquote>
<p>相关链接：</p>
</blockquote>
<p><a href="https://dev.mi.com/distribute/doc/details?pId=1809">https://dev.mi.com/distribute/doc/details?pId=1809</a><br><a href="https://dev.mi.com/distribute/doc/details?pId=1816">https://dev.mi.com/distribute/doc/details?pId=1816</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">尊敬的开发者：</span><br><span class="line">您好！</span><br><span class="line">为了更好地平衡用户的隐私权益和应用的功能需求，小米应用商店新增位置权限申请标准，以下是标准的具体内容：https://dev.mi.com/distribute/doc/details?pId=1809</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一、本标准修订案已于2024年4月1日予以发布，并设定公示期为30天，2024年5月6日至6月5日为材料提交适应期。在公示期及材料提交适应期内，将不会进行任何审核工作。</span><br><span class="line">二、本标准将于2024年6月6日正式施行，故敬请广大开发者及时关注并充分了解相关内容。</span><br><span class="line">三、公示期间，若您发现有任何位置权限申请场景未被本标准所涵盖，或在执行标准过程中遇到任何疑问，可通过开发者站客服入口，与我们取得联系，我们将认真评估您的反馈意见。感谢您对我们工作的支持与配合！</span><br><span class="line">在线客服反馈地址：https://www.sobot.com/chat/pc/v2/index.html?sysnum=5d7e332c4f994cf295cbfb0e81851038</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">小米应用商店</span><br><span class="line">2024年4月1日</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>关于小米设备隐私收集获取</title>
    <url>/2024/04/28/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%B1%B3%E8%AE%BE%E5%A4%87%E9%9A%90%E7%A7%81%E6%94%B6%E9%9B%86%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>自2024年7月起，在架应用不再允许boot_id、ApplicationInfo.sourceDir、prop_persist_info、prop_bluetooth_name_info设备隐私信息的收集获取。</p>
<p>而在2024年4月,小米将不再允许获取<code>boot_id</code>的应用在小米应用商店发布和更新。</p>
<p>具体内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【重要】关于2024年7月起，在架应用不再允许boot_id、ApplicationInfo.sourceDir、prop_persist_info、prop_bluetooth_name_info设备隐私信息的收集获取通知</span><br><span class="line">尊敬的开发者，您好</span><br><span class="line"></span><br><span class="line">一直以来，小米始终坚持践行分发平台主体责任，保障用户权益和数据安全；2023年11月20日，依照相关政策法规要求，制定《设备隐私信息采集规范标准》 并完成公示。</span><br><span class="line"></span><br><span class="line">具体要求：</span><br><span class="line">2024年4月起，将不再允许违规获取 boot_id 的应用在小米应用商店「发布和更新」；</span><br><span class="line">2024年7月起，针对违规获取 应用安装路径（ApplicationInfo.sourceDir）、设备名称（prop_persist_info）、蓝牙名称（prop_bluetooth_name_info） 的应用将无法在小米应用商店「发布和更新」；</span><br><span class="line"></span><br><span class="line">为保障您的应用正常经营和运转，请广大开发者关注相关节点，尽快完成应用的适配升级，避免影响应用后续的经营发布和用户体验。</span><br><span class="line"></span><br><span class="line">如果您在适配升级的过程中有任何疑问，您可通过 联系在线客服 或通过邮箱 developer@xiaomi.com 与我们取得联系，感谢您理解与支持。</span><br><span class="line"></span><br><span class="line">小米应用商店</span><br><span class="line">2024年4月26日</span><br></pre></td></tr></table></figure>

<blockquote>
<p>针对小米的邮件我们可以全局搜索对应Api，如果项目中使用了相关Api需要移除或替换。</p>
</blockquote>
<h3 id="获取boot-id相关Api"><a href="#获取boot-id相关Api" class="headerlink" title="获取boot_id相关Api"></a>获取<code>boot_id</code>相关Api</h3><p>在Android开发中，获取<code>boot_id</code>通常指的是获取设备自启动以来的唯一标识符。这个标识符可以通过调用<code>Settings.Secure</code>类中的<code>getStringForUser</code>方法来获取，该方法读取<code>secure settings</code>值。<br>以下是一个简单的方法，用于获取当前设备的<code>boot_id</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import android.content.ContentResolver;</span><br><span class="line">import android.provider.Settings.Secure;</span><br><span class="line">import android.os.UserHandle;</span><br><span class="line"> </span><br><span class="line">public long getBootId() &#123;</span><br><span class="line">    ContentResolver resolver = getContentResolver();</span><br><span class="line">    long bootId = Secure.getStringForUser(resolver, Secure.ANDROID_ID, UserHandle.myUserId());</span><br><span class="line">    return bootId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="获取应用安装路径ApplicationInfo-sourceDir"><a href="#获取应用安装路径ApplicationInfo-sourceDir" class="headerlink" title="获取应用安装路径ApplicationInfo.sourceDir"></a>获取应用安装路径ApplicationInfo.sourceDir</h3><p>在Android开发中，要获取应用的安装路径，可以使用PackageManager类来获取ApplicationInfo对象，然后访问其sourceDir字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import android.content.Context;  </span><br><span class="line">import android.content.pm.ApplicationInfo;  </span><br><span class="line">import android.content.pm.PackageManager;  </span><br><span class="line">import android.util.Log;  </span><br><span class="line">  </span><br><span class="line">public class AppPathExample &#123;  </span><br><span class="line">  </span><br><span class="line">    private Context context;  </span><br><span class="line">  </span><br><span class="line">    public AppPathExample(Context context) &#123;  </span><br><span class="line">        this.context = context;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public String getAppInstallPath() &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            PackageManager packageManager = context.getPackageManager();  </span><br><span class="line">            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context.getPackageName(), 0);  </span><br><span class="line">            return applicationInfo.sourceDir;  </span><br><span class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            return null;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="获取设备名称prop-persist-info"><a href="#获取设备名称prop-persist-info" class="headerlink" title="获取设备名称prop_persist_info"></a>获取设备名称prop_persist_info</h3><p>获取设备名称<code>prop_persist_info</code>一般开发中不太会用到，问了<code>gpt</code>以下是获取方式，可以逐一排查。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Android开发中，要获取设备名称或其他系统属性，如prop_persist_info，通常涉及到读取Android系统属性。这通常是通过System.getProperty()或读取/system/build.prop文件来完成的。但是，prop_persist_info这样的属性通常不是通过标准的System.getProperty()方法直接可访问的，因为这些属性可能存储在系统分区的其他位置或用于特定的系统配置。</span><br><span class="line"></span><br><span class="line">要获取prop_persist_info或其他非标准系统属性，你可能需要：</span><br><span class="line"></span><br><span class="line">- 使用Build类：首先，检查Android的Build类是否提供了你需要的任何信息。这个类包含了一些关于设备构建信息的静态字段，比如MODEL、MANUFACTURER、PRODUCT等。</span><br><span class="line"></span><br><span class="line">- 读取/system分区下的属性文件：对于prop_persist_info这样的属性，你可能需要直接读取/system分区下的某个属性文件。这通常涉及到使用FileInputStream或RandomAccessFile来读取文件内容。</span><br><span class="line"></span><br><span class="line">- 使用Settings.Secure或Settings.Global：某些设备特定的设置或属性可能存储在Settings.Secure或Settings.Global中。你可以使用ContentResolver来查询这些设置。</span><br><span class="line"></span><br><span class="line">- 使用反射或JNI：在某些情况下，可能需要使用Java反射来访问内部API，或者使用JNI（Java Native Interface）来调用本地代码获取这些信息。</span><br><span class="line"></span><br><span class="line">- Root权限：如果你尝试访问需要root权限才能读取的文件或属性，那么你的应用将需要root权限。在大多数用户设备上，这是不可能的，除非设备已经被root。</span><br><span class="line"></span><br><span class="line">- 使用ADB shell命令：在开发或调试过程中，你可以通过ADB（Android Debug Bridge）执行shell命令来获取这些属性。但这并不适用于常规的用户应用。</span><br><span class="line"></span><br><span class="line">请注意，直接读取系统文件或执行需要特定权限的操作可能会违反Google Play的政策，导致你的应用被拒绝上架。此外，这些方法可能因设备制造商和Android版本的不同而有所差异。</span><br><span class="line"></span><br><span class="line">如果你只是想要获取设备的名称或型号，通常可以通过Build.MODEL和Build.MANUFACTURER等字段来获取。如果你需要访问特定的非标准属性，你可能需要更深入地了解你的目标设备或Android版本，并可能需要与设备制造商合作以获取正确的访问方法。</span><br></pre></td></tr></table></figure>

<h3 id="获取蓝牙名称prop-bluetooth-name-info"><a href="#获取蓝牙名称prop-bluetooth-name-info" class="headerlink" title="获取蓝牙名称prop_bluetooth_name_info"></a>获取蓝牙名称prop_bluetooth_name_info</h3><p>在开发中获取蓝牙名称通常不是通过读取<code>prop_bluetooth_name_info</code>这样的系统属性来实现的。Android提供了标准的API来管理蓝牙设备的名称和配置。</p>
<p>可以在项目中全局搜索<code>prop_bluetooth_name_info</code>字段。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>关于私有仓库</title>
    <url>/2020/09/01/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>截止目前在我的有道云笔记里已经躺了好几篇文章没写完，目前写了一半或者刚开头的有<code>App启动优化:二进制文件重排</code>、<code>iOS逆向工程及防御</code>、<code>iOS知识点梳理</code>。</p>
<p>时间还是不太够用啊，而且八月份已经过去，八月份的文章还没放到博客上。除去功能增加以外，还有就是自己有些懈怠了。</p>
<p>除了已经写个开头的文章，还有些东西需要整理，比如Swift、Runtime、算法之类的。这些东西也不能只仅限于会用，还要知其原理并将其整理出来写成文章，避免后期的遗忘。</p>
<p>希望今年将这些东西都整理完吧！</p>
<p>而这篇文章主要整理私有仓库的创建，便于后期查阅。</p>
<hr>
<p>ps:截止这次更新，上面提到的几篇博客还没写完。</p>
<h1 id="私有仓库相关"><a href="#私有仓库相关" class="headerlink" title="私有仓库相关"></a>私有仓库相关</h1><h2 id="创建私有仓库"><a href="#创建私有仓库" class="headerlink" title="创建私有仓库"></a>创建私有仓库</h2><p>一般创建私有仓库会创建到公司搭建的gitlab上，因为目前只是做演示，所以本博客的私有仓库、私有组件都创建在GitHub上，以供后期下载。</p>
<blockquote>
<p>在git中创建私有仓库</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93.png" alt="私有仓库"></p>
<h2 id="添加私有仓库到本地"><a href="#添加私有仓库到本地" class="headerlink" title="添加私有仓库到本地"></a>添加私有仓库到本地</h2><p>在将私有仓库添加到本地之前，我们可以通过<code>pod repo list</code>指令查看本地有哪些仓库，同时可以查看本地仓库存放地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo list</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看本地仓库列表</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%931.png" alt="查看本地仓库"></p>
<blockquote>
<p>使用<code>pod repo add ZVTestPrivateSpecs https://github.com/xnxy/ZVTestPrivateSpecs.git</code>指定将私有仓库添加到本地。</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="私有仓库添加到本地"></p>
<blockquote>
<p>添加完成后可以使用<code>pod repo list</code>指令查看本地仓库列表，查看是否已经添加成功，同时也可以<code>open</code>相应目录查看。</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%932.png" alt="查看本地仓库列表"></p>
<h2 id="添加Podspec到私有仓库"><a href="#添加Podspec到私有仓库" class="headerlink" title="添加Podspec到私有仓库"></a>添加Podspec到私有仓库</h2><h3 id="创建私有组件"><a href="#创建私有组件" class="headerlink" title="创建私有组件"></a>创建私有组件</h3><blockquote>
<p>git中创建私有组件</p>
</blockquote>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E7%BB%84%E4%BB%B6.png" alt="创建私有组件"></p>
<p>编写组件内容，创建测试Demo等相关内容。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%88%9B%E5%BB%BADemo%E7%9B%B8%E5%85%B3.png" alt="创建Demo相关"></p>
<p>使用<code>pod spec creat ZVTestPod</code>指令来创建<code>podspec</code>文件，并编写相关内容。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%88%9B%E5%BB%BApodspec%E6%96%87%E4%BB%B6.png" alt="创建podspec文件"></p>
<p>编写完成后，将编写好的<code>podspec</code>推送到<code>git</code>，并打<code>tag</code>。</p>
<p>然后使用<code>pod lib lint</code>来验证<code>podspec</code>文件，如果出现下方图片中的<code>passed validation</code>则代表验证通过。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E9%AA%8C%E8%AF%81podspec%E6%96%87%E4%BB%B6.png" alt="验证podspec文件"></p>
<p>私有组件验证通过后，我们需要使用<code>pod repo push ZVTestPrivateSpecs ZVTestPod.podspec</code>指定将私有组件的<code>podspec</code>文件推送到私有仓库中。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E6%8E%A8%E9%80%81%E7%A7%81%E6%9C%89%E7%BB%84%E4%BB%B6%E5%88%B0%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E4%B8%AD.png" alt="推送私有组件到私有仓库"></p>
<p>推送成功后，我们可以在私有仓库中查看私有组件的位置,当然我们也可以在本地中查看</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E7%A7%81%E6%9C%89%E7%BB%84%E4%BB%B6%E5%9C%A8git%E4%B8%AD%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="私有组件在私有仓库的位置"></p>
<h2 id="将私有仓库中的库集成到项目中"><a href="#将私有仓库中的库集成到项目中" class="headerlink" title="将私有仓库中的库集成到项目中"></a>将私有仓库中的库集成到项目中</h2><p>走到这一步，私有仓库、私有组件的的流程都已经介绍完了，如果想使用私有仓库中的私有组件时，直接集成项目即。跟集成开源框架类似。</p>
<p>其中<code>Podfile</code>的编写如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &#x27;https://github.com/xnxy/ZVTestPrivateSpecs.git&#x27;</span><br><span class="line">#source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line"></span><br><span class="line">use_frameworks!</span><br><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line">target &#x27;ZVTestExample&#x27; do</span><br><span class="line">    </span><br><span class="line">    pod &#x27;ZVTestPod&#x27;, &#x27;~&gt; 0.0.1&#x27;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E9%9B%86%E6%88%90%E7%A7%81%E6%9C%89%E7%BB%84%E4%BB%B6.png" alt="集成私有组件到项目中"></p>
<h2 id="Swift和OC混编仓库"><a href="#Swift和OC混编仓库" class="headerlink" title="Swift和OC混编仓库"></a>Swift和OC混编仓库</h2><p>关于Swift和OC混编的仓库可以参考<a href="https://github.com/xnxy/ZVTestSwiftPod">我再GitHub中创建的Demo</a></p>
<blockquote>
<p>OC调用Swift方法</p>
</blockquote>
<p>在Framework中OC调用Swift需要引入<code>#import &lt;**/**-Swift.h&gt;</code>头文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">//  ZVOCApi.m</span><br><span class="line">//  ZVTestSwiftPod</span><br><span class="line">//</span><br><span class="line">//  Created by CNTP on 2020/12/7.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#import &quot;ZVOCApi.h&quot;</span><br><span class="line">#import &lt;ZVTestSwiftPod/ZVTestSwiftPod-Swift.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation ZVOCApi</span><br><span class="line"></span><br><span class="line">- (void)test&#123;</span><br><span class="line">    NSLog(@&quot;---OC调Swift---&quot;);</span><br><span class="line">    ZVSwiftApi *header = [ZVSwiftApi new];</span><br><span class="line">    [header function];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)swiftTest&#123;</span><br><span class="line">    NSLog(@&quot;---swift调OC---&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相应的在<code>Build Settings</code>中可以查看相应头文件配置（Xcode会自动生成）。<br><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%A4%B4%E6%96%87%E4%BB%B6.jpg" alt="OC调Swift"></p>
<blockquote>
<p>Swift调用OC方法</p>
</blockquote>
<p>在Framework中Swift调用OC需要先创建<code>module.modulemap</code>文件将相应的头文件添加进去。</p>
<p>关于<code>modulemap</code>文件，可以参看简书的的文章<a href="https://www.jianshu.com/p/ce49d8f32f77">《Swift 关于 module.modulemap 使用》</a>，介绍的很详细。</p>
<p>内容大致如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//modele.modulemap文件内容</span><br><span class="line"></span><br><span class="line">module BridgeFiles [system] &#123;</span><br><span class="line">    header &quot;ZVFileTransferHeader.h&quot;</span><br><span class="line">    export *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ZVFileTransferHeader.h</code>文件中存放<code>Swift</code>需要调用的OC类。</p>
<p>同时需要在<code>Build Settings</code>手动添加配置，入下图所示。</p>
<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/blog/%E5%85%B3%E4%BA%8E%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8CMCI%E7%A7%BB%E5%8A%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/%E5%A4%B4%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5.jpg" alt="Swift调用OC配置"></p>
<p>添加进配置中的目录为<code>module.modulemap</code>所在的目录。</p>
<p>相应的在需要调用的类中引入<code>BridgeFiles</code>，然后即可调用。</p>
<p>如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">//  ZVSwiftApi.swift</span><br><span class="line">//  ZVTestSwiftPod</span><br><span class="line">//</span><br><span class="line">//  Created by CNTP on 2020/12/7.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line">import BridgeFiles</span><br><span class="line"></span><br><span class="line">@objc public class ZVSwiftApi: NSObject &#123;</span><br><span class="line"></span><br><span class="line">    @objc public func function() -&gt; Int &#123;</span><br><span class="line">        let obj = ZVOCApi.init()</span><br><span class="line">        obj.swiftTest()</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要添加<code>@objc</code>和<code>public</code>，或者无法调用。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://guides.cocoapods.org/making/private-cocoapods.html">private-cocoapods</a></li>
<li><a href="https://tech.meituan.com/2018/07/12/mci.html">MCI:移动持续集成在大众点评的实践</a></li>
<li><a href="https://tech.meituan.com/2019/08/08/the-things-behind-the-ios-project-zsource-command.html">美团iOS工程zsource 命令背后的那些事儿</a></li>
<li><a href="https://github.com/casatwy/CTMediator">CTMediator</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>国际化中常用BCP-47 Code和语言对照表</title>
    <url>/2024/06/11/%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%AD%E5%B8%B8%E7%94%A8BCP-47%20Code%E5%92%8C%E8%AF%AD%E8%A8%80%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="BCP-47-Code"><a href="#BCP-47-Code" class="headerlink" title="BCP-47 Code"></a>BCP-47 Code</h2><table>
<thead>
<tr>
<th>BCP-47 Code</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td>af</td>
<td>南非荷兰语</td>
</tr>
<tr>
<td>ar</td>
<td>阿拉伯语</td>
</tr>
<tr>
<td>be</td>
<td>白俄罗斯语</td>
</tr>
<tr>
<td>bg</td>
<td>保加利亚语</td>
</tr>
<tr>
<td>bn</td>
<td>孟加拉语</td>
</tr>
<tr>
<td>ca</td>
<td>加泰罗尼亚语</td>
</tr>
<tr>
<td>cs</td>
<td>捷克语</td>
</tr>
<tr>
<td>cy</td>
<td>威尔士语</td>
</tr>
<tr>
<td>da</td>
<td>丹麦语</td>
</tr>
<tr>
<td>de</td>
<td>德语</td>
</tr>
<tr>
<td>el</td>
<td>希腊语</td>
</tr>
<tr>
<td>en</td>
<td>英语</td>
</tr>
<tr>
<td>eo</td>
<td>世界语</td>
</tr>
<tr>
<td>es</td>
<td>西班牙语</td>
</tr>
<tr>
<td>es-419</td>
<td>西班牙语</td>
</tr>
<tr>
<td>et</td>
<td>爱沙尼亚语</td>
</tr>
<tr>
<td>fa</td>
<td>波斯语</td>
</tr>
<tr>
<td>fi</td>
<td>芬兰语</td>
</tr>
<tr>
<td>fr</td>
<td>法语</td>
</tr>
<tr>
<td>fr-CA</td>
<td>法语</td>
</tr>
<tr>
<td>ga</td>
<td>爱尔兰语</td>
</tr>
<tr>
<td>gl</td>
<td>加利西亚语</td>
</tr>
<tr>
<td>gu</td>
<td>古吉拉特语</td>
</tr>
<tr>
<td>he</td>
<td>希伯来语</td>
</tr>
<tr>
<td>hi</td>
<td>北印度语</td>
</tr>
<tr>
<td>hr</td>
<td>克罗地亚语</td>
</tr>
<tr>
<td>ht</td>
<td>海地语</td>
</tr>
<tr>
<td>hu</td>
<td>匈牙利语</td>
</tr>
<tr>
<td>id</td>
<td>印度尼西亚语</td>
</tr>
<tr>
<td>is</td>
<td>冰岛语</td>
</tr>
<tr>
<td>it</td>
<td>意大利语</td>
</tr>
<tr>
<td>ja</td>
<td>日语</td>
</tr>
<tr>
<td>ka</td>
<td>格鲁吉亚语</td>
</tr>
<tr>
<td>kn</td>
<td>卡纳达语</td>
</tr>
<tr>
<td>ko</td>
<td>韩语</td>
</tr>
<tr>
<td>lt</td>
<td>立陶宛语</td>
</tr>
<tr>
<td>lv</td>
<td>拉脱维亚语</td>
</tr>
<tr>
<td>mk</td>
<td>马其顿语</td>
</tr>
<tr>
<td>mr</td>
<td>马拉地语</td>
</tr>
<tr>
<td>ms</td>
<td>马来语</td>
</tr>
<tr>
<td>mt</td>
<td>马耳他语</td>
</tr>
<tr>
<td>nl</td>
<td>荷兰语</td>
</tr>
<tr>
<td>no</td>
<td>挪威语</td>
</tr>
<tr>
<td>pl</td>
<td>波兰语</td>
</tr>
<tr>
<td>pt</td>
<td>葡萄牙语</td>
</tr>
<tr>
<td>pt-BR</td>
<td>葡萄牙语</td>
</tr>
<tr>
<td>pt-PT</td>
<td>葡萄牙语</td>
</tr>
<tr>
<td>ro</td>
<td>罗马尼亚语</td>
</tr>
<tr>
<td>ru</td>
<td>俄语</td>
</tr>
<tr>
<td>sk</td>
<td>斯洛伐克语</td>
</tr>
<tr>
<td>sl</td>
<td>斯洛文尼亚语</td>
</tr>
<tr>
<td>sq</td>
<td>阿尔巴尼亚语</td>
</tr>
<tr>
<td>sv</td>
<td>瑞典语</td>
</tr>
<tr>
<td>sw</td>
<td>斯瓦希里语</td>
</tr>
<tr>
<td>ta</td>
<td>泰米尔语</td>
</tr>
<tr>
<td>te</td>
<td>泰卢固语</td>
</tr>
<tr>
<td>th</td>
<td>泰语</td>
</tr>
<tr>
<td>tl</td>
<td>塔加路语</td>
</tr>
<tr>
<td>tr</td>
<td>土耳其语</td>
</tr>
<tr>
<td>uk</td>
<td>乌克兰语</td>
</tr>
<tr>
<td>ur</td>
<td>乌尔都语</td>
</tr>
<tr>
<td>vi</td>
<td>越南语</td>
</tr>
<tr>
<td>zh</td>
<td>中文</td>
</tr>
<tr>
<td>zh-CN</td>
<td>中文</td>
</tr>
<tr>
<td>zh-TW</td>
<td>繁体中文</td>
</tr>
<tr>
<td>zh-HK</td>
<td>繁体中文</td>
</tr>
<tr>
<td>zh-Hans</td>
<td>繁体中文</td>
</tr>
<tr>
<td>zh-Hant</td>
<td>繁体中文</td>
</tr>
</tbody></table>
<h2 id="ISO-639-1语言列表"><a href="#ISO-639-1语言列表" class="headerlink" title="ISO 639-1语言列表"></a>ISO 639-1语言列表</h2><table>
<thead>
<tr>
<th>code</th>
<th>语言</th>
<th>code</th>
<th>语言</th>
<th>code</th>
<th>语言</th>
<th>code</th>
<th>语言</th>
</tr>
</thead>
<tbody><tr>
<td>aa</td>
<td>阿法尔语</td>
<td>fr</td>
<td>法语</td>
<td>li</td>
<td>林堡语</td>
<td>se</td>
<td>北萨米语</td>
</tr>
<tr>
<td>ab</td>
<td>阿布哈兹语</td>
<td>fy</td>
<td>弗里西亚语</td>
<td>ln</td>
<td>林加拉语</td>
<td>sg</td>
<td>桑戈语</td>
</tr>
<tr>
<td>ae</td>
<td>阿维斯陀语</td>
<td>ga</td>
<td>爱尔兰语</td>
<td>lo</td>
<td>老挝语</td>
<td>sh</td>
<td>塞尔维亚-克罗地亚语</td>
</tr>
<tr>
<td>af</td>
<td>南非语</td>
<td>gd</td>
<td>苏格兰盖尔语</td>
<td>lt</td>
<td>立陶宛语</td>
<td>si</td>
<td>僧伽罗语</td>
</tr>
<tr>
<td>ak</td>
<td>阿坎语</td>
<td>gl</td>
<td>加利西亚语</td>
<td>lu</td>
<td>卢巴语</td>
<td>sk</td>
<td>斯洛伐克语</td>
</tr>
<tr>
<td>am</td>
<td>阿姆哈拉语</td>
<td>gn</td>
<td>瓜拉尼语</td>
<td>lv</td>
<td>拉脱维亚语</td>
<td>sl</td>
<td>斯洛文尼亚语</td>
</tr>
<tr>
<td>an</td>
<td>阿拉贡语</td>
<td>gu</td>
<td>古吉拉特语</td>
<td>mg</td>
<td>马达加斯加语</td>
<td>sm</td>
<td>萨摩亚语</td>
</tr>
<tr>
<td>ar</td>
<td>阿拉伯语</td>
<td>gv</td>
<td>马恩岛语</td>
<td>mh</td>
<td>马绍尔语</td>
<td>sn</td>
<td>修纳语</td>
</tr>
<tr>
<td>as</td>
<td>阿萨姆语</td>
<td>ha</td>
<td>豪萨语</td>
<td>mi</td>
<td>毛利语</td>
<td>so</td>
<td>索马里语</td>
</tr>
<tr>
<td>av</td>
<td>阿瓦尔语</td>
<td>he</td>
<td>希伯来语</td>
<td>mk</td>
<td>马其顿语</td>
<td>sq</td>
<td>阿尔巴尼亚语</td>
</tr>
<tr>
<td>ay</td>
<td>艾马拉语</td>
<td>hi</td>
<td>印地语</td>
<td>ml</td>
<td>马拉雅拉姆语</td>
<td>sr</td>
<td>塞尔维亚语</td>
</tr>
<tr>
<td>az</td>
<td>阿塞拜疆语</td>
<td>ho</td>
<td>希里莫图语</td>
<td>mn</td>
<td>蒙古语</td>
<td>ss</td>
<td>斯威士语</td>
</tr>
<tr>
<td>ba</td>
<td>巴什基尔语</td>
<td>hr</td>
<td>克罗地亚语</td>
<td>mo</td>
<td>摩尔达维亚语</td>
<td>st</td>
<td>塞索托语</td>
</tr>
<tr>
<td>be</td>
<td>白俄罗斯语</td>
<td>ht</td>
<td>海地克里奥尔语</td>
<td>mr</td>
<td>马拉地语</td>
<td>su</td>
<td>巽他语</td>
</tr>
<tr>
<td>bg</td>
<td>保加利亚语</td>
<td>hu</td>
<td>匈牙利语</td>
<td>ms</td>
<td>马来语</td>
<td>sv</td>
<td>瑞典语</td>
</tr>
<tr>
<td>bh</td>
<td>比哈尔语</td>
<td>hy</td>
<td>亚美尼亚语</td>
<td>mt</td>
<td>马耳他语</td>
<td>sw</td>
<td>斯瓦希里语</td>
</tr>
<tr>
<td>bi</td>
<td>比斯拉马语</td>
<td>hz</td>
<td>赫雷罗语</td>
<td>my</td>
<td>缅甸语</td>
<td>ta</td>
<td>泰米尔语</td>
</tr>
<tr>
<td>bm</td>
<td>班巴拉语</td>
<td>ia</td>
<td>因特语</td>
<td>na</td>
<td>瑙鲁语</td>
<td>te</td>
<td>泰卢固语</td>
</tr>
<tr>
<td>bn</td>
<td>孟加拉语</td>
<td>id</td>
<td>印尼语</td>
<td>nb</td>
<td>书面挪威语</td>
<td>tg</td>
<td>塔吉克语</td>
</tr>
<tr>
<td>bo</td>
<td>藏语</td>
<td>ie</td>
<td>西方国际语</td>
<td>nd</td>
<td>北恩德贝莱语</td>
<td>th</td>
<td>泰语</td>
</tr>
<tr>
<td>br</td>
<td>布列塔尼语</td>
<td>ig</td>
<td>伊博语</td>
<td>ne</td>
<td>尼泊尔语</td>
<td>ti</td>
<td>提格雷尼亚语</td>
</tr>
<tr>
<td>bs</td>
<td>波斯尼亚语</td>
<td>ii</td>
<td>四川彝语（诺苏语）</td>
<td>ng</td>
<td>恩敦加语</td>
<td>tk</td>
<td>土库曼语</td>
</tr>
<tr>
<td>ca</td>
<td>加泰隆语</td>
<td>ik</td>
<td>伊努皮克语</td>
<td>nl</td>
<td>荷兰语</td>
<td>tl</td>
<td>他加禄语</td>
</tr>
<tr>
<td>ce</td>
<td>车臣语</td>
<td>io</td>
<td>伊多语</td>
<td>nn</td>
<td>新挪威语</td>
<td>tn</td>
<td>茨瓦纳语</td>
</tr>
<tr>
<td>ch</td>
<td>查莫罗语</td>
<td>is</td>
<td>冰岛语</td>
<td>no</td>
<td>挪威语</td>
<td>to</td>
<td>汤加语</td>
</tr>
<tr>
<td>co</td>
<td>科西嘉语</td>
<td>it</td>
<td>意大利语</td>
<td>nr</td>
<td>南恩德贝莱语</td>
<td>tr</td>
<td>土耳其语</td>
</tr>
<tr>
<td>cr</td>
<td>克里语</td>
<td>iu</td>
<td>因纽特语</td>
<td>nv</td>
<td>纳瓦霍语</td>
<td>ts</td>
<td>宗加语</td>
</tr>
<tr>
<td>cs</td>
<td>捷克语</td>
<td>ja</td>
<td>日语</td>
<td>ny</td>
<td>尼扬贾语</td>
<td>tt</td>
<td>塔塔尔语</td>
</tr>
<tr>
<td>cu</td>
<td>古教会斯拉夫语</td>
<td>jv</td>
<td>爪哇语</td>
<td>oc</td>
<td>奥克语</td>
<td>tw</td>
<td>特威语</td>
</tr>
<tr>
<td>cv</td>
<td>楚瓦什语</td>
<td>ka</td>
<td>格鲁吉亚语</td>
<td>oj</td>
<td>奥杰布瓦语</td>
<td>ty</td>
<td>塔希提语</td>
</tr>
<tr>
<td>cy</td>
<td>威尔士语</td>
<td>kg</td>
<td>刚果语</td>
<td>om</td>
<td>奥罗莫语</td>
<td>ug</td>
<td>维吾尔语</td>
</tr>
<tr>
<td>da</td>
<td>丹麦语</td>
<td>ki</td>
<td>基库尤语</td>
<td>or</td>
<td>奥里亚语</td>
<td>uk</td>
<td>乌克兰语</td>
</tr>
<tr>
<td>de</td>
<td>德语</td>
<td>kj</td>
<td>宽亚玛语</td>
<td>os</td>
<td>奥塞梯语</td>
<td>ur</td>
<td>乌尔都语</td>
</tr>
<tr>
<td>dv</td>
<td>迪维西语</td>
<td>kk</td>
<td>哈萨克语</td>
<td>pa</td>
<td>旁遮普语</td>
<td>uz</td>
<td>乌兹别克语</td>
</tr>
<tr>
<td>dz</td>
<td>不丹语</td>
<td>kl</td>
<td>格陵兰语</td>
<td>pi</td>
<td>巴利语</td>
<td>ve</td>
<td>文达语</td>
</tr>
<tr>
<td>ee</td>
<td>埃维语</td>
<td>km</td>
<td>高棉语</td>
<td>pl</td>
<td>波兰语</td>
<td>vi</td>
<td>越南语</td>
</tr>
<tr>
<td>el</td>
<td>现代希腊语</td>
<td>kn</td>
<td>卡纳达语</td>
<td>ps</td>
<td>普什图语</td>
<td>vo</td>
<td>沃拉普克语</td>
</tr>
<tr>
<td>en</td>
<td>英语</td>
<td>ko</td>
<td>朝鲜语、韩语</td>
<td>pt</td>
<td>葡萄牙语</td>
<td>wa</td>
<td>瓦隆语</td>
</tr>
<tr>
<td>eo</td>
<td>世界语</td>
<td>kr</td>
<td>卡努里语</td>
<td>qu</td>
<td>克丘亚语</td>
<td>wo</td>
<td>沃洛夫语</td>
</tr>
<tr>
<td>es</td>
<td>西班牙语</td>
<td>ks</td>
<td>克什米尔语</td>
<td>rm</td>
<td>罗曼什语</td>
<td>xh</td>
<td>科萨语</td>
</tr>
<tr>
<td>et</td>
<td>爱沙尼亚语</td>
<td>ku</td>
<td>库尔德语</td>
<td>rn</td>
<td>基隆迪语</td>
<td>yi</td>
<td>依地语</td>
</tr>
<tr>
<td>eu</td>
<td>巴斯克语</td>
<td>kv</td>
<td>科米语</td>
<td>ro</td>
<td>罗马尼亚语</td>
<td>yo</td>
<td>约鲁巴语</td>
</tr>
<tr>
<td>fa</td>
<td>波斯语</td>
<td>kw</td>
<td>康沃尔语</td>
<td>ru</td>
<td>俄语</td>
<td>za</td>
<td>壮语</td>
</tr>
<tr>
<td>ff</td>
<td>富拉语</td>
<td>ky</td>
<td>吉尔吉斯语</td>
<td>rw</td>
<td>卢旺达语</td>
<td>zh</td>
<td>汉语（中文）</td>
</tr>
<tr>
<td>fi</td>
<td>芬兰语</td>
<td>la</td>
<td>拉丁语</td>
<td>sa</td>
<td>梵语</td>
<td>zu</td>
<td>祖鲁语</td>
</tr>
<tr>
<td>fj</td>
<td>斐济语</td>
<td>lb</td>
<td>卢森堡语</td>
<td>sc</td>
<td>撒丁语</td>
<td></td>
<td></td>
</tr>
<tr>
<td>fo</td>
<td>法罗语</td>
<td>lg</td>
<td>卢干达语</td>
<td>sd</td>
<td>信德语</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/ISO_639-1%E4%BB%A3%E7%A0%81%E5%88%97%E8%A1%A8">ISO 639-1代码列表</a></li>
<li><a href="https://zh.wikipedia.org/wiki/IETF%E8%AA%9E%E8%A8%80%E6%A8%99%E7%B1%A4">IETF语言标签</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE">区域设置</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%AA%9E%E8%A8%80%E4%BB%A3%E7%A2%BC">语言代码</a></li>
</ul>
]]></content>
      <categories>
        <category>App开发</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>基于HTML设计稿的Flutter界面布局描述文档生成提示词</title>
    <url>/2025/08/12/%E5%9F%BA%E4%BA%8EHTML%E8%AE%BE%E8%AE%A1%E7%A8%BF%E7%9A%84Flutter%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80%E6%8F%8F%E8%BF%B0%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E6%8F%90%E7%A4%BA%E8%AF%8D/</url>
    <content><![CDATA[<p>根据上个版本的提示词进行了调整，目前准确度大大提升。</p>
<blockquote>
<p>提示词如下：</p>
</blockquote>
<h1 id="基于HTML设计稿的Flutter界面布局描述文档生成提示词"><a href="#基于HTML设计稿的Flutter界面布局描述文档生成提示词" class="headerlink" title="基于HTML设计稿的Flutter界面布局描述文档生成提示词"></a>基于HTML设计稿的Flutter界面布局描述文档生成提示词</h1><p>请基于提供的HTML设计稿文件，生成一个极其详细的Flutter界面布局描述文档，用于指导AI准确生成Flutter Widget代码。描述需要包含以下具体内容：</p>
<h2 id="1-HTML设计稿分析"><a href="#1-HTML设计稿分析" class="headerlink" title="1. HTML设计稿分析"></a>1. HTML设计稿分析</h2><h3 id="页面结构解析"><a href="#页面结构解析" class="headerlink" title="页面结构解析"></a>页面结构解析</h3><ul>
<li>分析HTML的DOM结构和层级关系</li>
<li>识别主要的布局容器（div、section、header、main、footer等）</li>
<li>解析CSS样式表中的布局属性（display、position、flex、grid等）</li>
<li>提取响应式设计的断点和媒体查询</li>
</ul>
<h3 id="视觉元素提取"><a href="#视觉元素提取" class="headerlink" title="视觉元素提取"></a>视觉元素提取</h3><ul>
<li>颜色方案（background-color、color、border-color等）</li>
<li>字体样式（font-family、font-size、font-weight、line-height等）</li>
<li>间距规范（margin、padding、gap等）</li>
<li>尺寸规格（width、height、min&#x2F;max尺寸等）</li>
<li>边框和圆角（border、border-radius等）</li>
<li>阴影效果（box-shadow、text-shadow等）</li>
</ul>
<h2 id="2-Flutter-Scaffold架构映射"><a href="#2-Flutter-Scaffold架构映射" class="headerlink" title="2. Flutter Scaffold架构映射"></a>2. Flutter Scaffold架构映射</h2><h3 id="整体页面结构"><a href="#整体页面结构" class="headerlink" title="整体页面结构"></a>整体页面结构</h3><ul>
<li>将HTML的页面布局映射到Flutter的Scaffold结构</li>
<li>AppBar配置（基于HTML的header或导航栏）</li>
<li>Body布局模式（根据HTML的主要内容区域确定Column、Row、Stack、ListView等）</li>
<li>BottomNavigationBar或FloatingActionButton（基于HTML的底部导航或悬浮按钮）</li>
<li>Drawer或EndDrawer侧边栏（基于HTML的侧边菜单）</li>
</ul>
<h3 id="布局容器转换"><a href="#布局容器转换" class="headerlink" title="布局容器转换"></a>布局容器转换</h3><ul>
<li>HTML的div容器 → Flutter的Container&#x2F;Column&#x2F;Row</li>
<li>CSS Flexbox → Flutter的Flex&#x2F;Column&#x2F;Row</li>
<li>CSS Grid → Flutter的GridView</li>
<li>CSS Position → Flutter的Stack&#x2F;Positioned</li>
<li>HTML列表元素 → Flutter的ListView&#x2F;GridView</li>
</ul>
<h2 id="3-Widget层级和嵌套关系"><a href="#3-Widget层级和嵌套关系" class="headerlink" title="3. Widget层级和嵌套关系"></a>3. Widget层级和嵌套关系</h2><h3 id="DOM到Widget树的映射"><a href="#DOM到Widget树的映射" class="headerlink" title="DOM到Widget树的映射"></a>DOM到Widget树的映射</h3><ul>
<li>从HTML的根元素到具体UI元素的完整Widget树</li>
<li>基于CSS的盒模型确定Container、Padding、Margin的具体数值</li>
<li>根据CSS的flex属性设置Expanded、Flexible的flex比例</li>
<li>识别需要SafeArea、SingleChildScrollView等包装Widget的场景</li>
</ul>
<h3 id="布局Widget配置"><a href="#布局Widget配置" class="headerlink" title="布局Widget配置"></a>布局Widget配置</h3><ul>
<li>基于CSS的justify-content映射Column&#x2F;Row的mainAxisAlignment</li>
<li>基于CSS的align-items映射Column&#x2F;Row的crossAxisAlignment</li>
<li>根据CSS的z-index和position确定Stack的alignment和positioning</li>
<li>基于CSS Grid的grid-template-columns确定GridView的crossAxisCount和spacing</li>
</ul>
<h2 id="4-具体UI元素规格转换"><a href="#4-具体UI元素规格转换" class="headerlink" title="4. 具体UI元素规格转换"></a>4. 具体UI元素规格转换</h2><h3 id="文本组件映射"><a href="#文本组件映射" class="headerlink" title="文本组件映射"></a>文本组件映射</h3><ul>
<li>HTML文本元素（h1-h6、p、span等）→ Flutter Text Widget</li>
<li>CSS字体样式 → TextStyle配置（fontSize、fontWeight、color等）</li>
<li>CSS文本对齐 → textAlign属性</li>
<li>CSS文本溢出处理 → overflow、maxLines等属性</li>
</ul>
<h3 id="按钮组件转换"><a href="#按钮组件转换" class="headerlink" title="按钮组件转换"></a>按钮组件转换</h3><ul>
<li>HTML按钮元素（button、input[type&#x3D;”button”]等）→ Flutter按钮组件</li>
<li>CSS按钮样式 → ButtonStyle配置（backgroundColor、foregroundColor、elevation）</li>
<li>CSS尺寸属性 → 按钮的minimumSize、padding</li>
<li>HTML事件处理 → onPressed回调函数说明</li>
</ul>
<h3 id="输入组件映射"><a href="#输入组件映射" class="headerlink" title="输入组件映射"></a>输入组件映射</h3><ul>
<li>HTML表单元素（input、textarea、select等）→ Flutter输入组件</li>
<li>HTML属性（placeholder、required等）→ InputDecoration配置</li>
<li>CSS样式 → TextField的decoration属性</li>
<li>HTML表单验证 → Flutter验证逻辑</li>
</ul>
<h3 id="图片和图标转换"><a href="#图片和图标转换" class="headerlink" title="图片和图标转换"></a>图片和图标转换</h3><ul>
<li>HTML img元素 → Flutter Image Widget</li>
<li>CSS background-image → Container的decoration</li>
<li>HTML图标字体或SVG → Flutter Icon或自定义图标</li>
<li>CSS图片样式（object-fit等）→ Flutter的fit、alignment属性</li>
</ul>
<h3 id="卡片和容器映射"><a href="#卡片和容器映射" class="headerlink" title="卡片和容器映射"></a>卡片和容器映射</h3><ul>
<li>HTML卡片式布局 → Flutter Card组件</li>
<li>CSS盒模型 → Container的decoration（BoxDecoration配置）</li>
<li>CSS颜色值 → Flutter颜色（Colors.xxx或Color(0xFFxxxxxx)）</li>
<li>CSS边框样式 → Border.all、BorderRadius.circular</li>
<li>CSS阴影效果 → boxShadow配置</li>
</ul>
<h3 id="列表和网格转换"><a href="#列表和网格转换" class="headerlink" title="列表和网格转换"></a>列表和网格转换</h3><ul>
<li>HTML列表元素（ul、ol、li）→ Flutter ListView</li>
<li>CSS Grid布局 → Flutter GridView</li>
<li>HTML表格 → Flutter Table或DataTable</li>
<li>CSS列表样式 → ListTile配置</li>
</ul>
<h2 id="5-主题和样式系统"><a href="#5-主题和样式系统" class="headerlink" title="5. 主题和样式系统"></a>5. 主题和样式系统</h2><h3 id="CSS变量到Flutter主题"><a href="#CSS变量到Flutter主题" class="headerlink" title="CSS变量到Flutter主题"></a>CSS变量到Flutter主题</h3><ul>
<li>CSS自定义属性（–primary-color等）→ Flutter ThemeData</li>
<li>CSS颜色方案 → Flutter ColorScheme</li>
<li>CSS字体系统 → Flutter TextTheme</li>
<li>CSS间距系统 → Flutter标准间距值</li>
</ul>
<h3 id="响应式设计转换"><a href="#响应式设计转换" class="headerlink" title="响应式设计转换"></a>响应式设计转换</h3><ul>
<li>CSS媒体查询 → Flutter MediaQuery和LayoutBuilder</li>
<li>CSS断点 → Flutter屏幕尺寸适配</li>
<li>CSS Flexbox的响应式 → Flutter Expanded和Flexible</li>
<li>CSS Grid的响应式 → Flutter GridView的动态配置</li>
</ul>
<h2 id="6-交互和状态管理"><a href="#6-交互和状态管理" class="headerlink" title="6. 交互和状态管理"></a>6. 交互和状态管理</h2><h3 id="HTML事件到Flutter手势"><a href="#HTML事件到Flutter手势" class="headerlink" title="HTML事件到Flutter手势"></a>HTML事件到Flutter手势</h3><ul>
<li>HTML点击事件 → Flutter GestureDetector的onTap</li>
<li>HTML悬停效果 → Flutter InkWell的点击效果</li>
<li>HTML表单交互 → Flutter状态管理</li>
<li>CSS伪类（:hover、:active等）→ Flutter交互状态</li>
</ul>
<h3 id="动态内容处理"><a href="#动态内容处理" class="headerlink" title="动态内容处理"></a>动态内容处理</h3><ul>
<li>HTML动态内容 → Flutter StatefulWidget</li>
<li>JavaScript状态管理 → Flutter setState或状态管理方案</li>
<li>HTML表单验证 → Flutter表单验证逻辑</li>
</ul>
<h2 id="7-性能和优化考虑"><a href="#7-性能和优化考虑" class="headerlink" title="7. 性能和优化考虑"></a>7. 性能和优化考虑</h2><h3 id="HTML到Flutter的性能映射"><a href="#HTML到Flutter的性能映射" class="headerlink" title="HTML到Flutter的性能映射"></a>HTML到Flutter的性能映射</h3><ul>
<li>CSS动画 → Flutter Animation系统</li>
<li>HTML懒加载 → Flutter ListView.builder</li>
<li>CSS优化 → Flutter Widget优化（const构造函数等）</li>
<li>HTML缓存策略 → Flutter图片缓存和Widget复用</li>
</ul>
<h2 id="描述要求"><a href="#描述要求" class="headerlink" title="描述要求"></a>描述要求</h2><p>描述要足够详细和准确，使得Flutter开发者仅凭HTML设计稿分析和文字描述就能完全还原界面设计。请按照以下顺序组织内容：</p>
<ol>
<li><strong>HTML结构分析</strong>：先分析HTML的整体结构和CSS样式</li>
<li><strong>Flutter架构映射</strong>：将HTML结构映射到Flutter的Widget体系</li>
<li><strong>详细组件转换</strong>：逐个分析HTML元素到Flutter Widget的转换</li>
<li><strong>样式和主题</strong>：将CSS样式系统转换为Flutter主题系统</li>
<li><strong>交互和状态</strong>：分析HTML&#x2F;JavaScript交互并转换为Flutter状态管理</li>
<li><strong>响应式适配</strong>：将CSS响应式设计转换为Flutter适配方案</li>
</ol>
<h2 id="代码组织建议"><a href="#代码组织建议" class="headerlink" title="代码组织建议"></a>代码组织建议</h2><h3 id="文件结构规划"><a href="#文件结构规划" class="headerlink" title="文件结构规划"></a>文件结构规划</h3><ul>
<li>基于HTML页面结构规划Flutter文件组织</li>
<li>根据CSS模块化程度确定Widget拆分策略</li>
<li>样式常量和主题的统一管理</li>
</ul>
<h3 id="开发优先级"><a href="#开发优先级" class="headerlink" title="开发优先级"></a>开发优先级</h3><ul>
<li>先实现静态布局，再添加交互功能</li>
<li>优先完成核心页面结构，再优化细节样式</li>
<li>分阶段实现响应式适配</li>
</ul>
<h3 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h3><ul>
<li>像素级还原HTML设计稿的视觉效果</li>
<li>保持与原HTML相同的交互体验</li>
<li>确保Flutter代码的性能和可维护性</li>
</ul>
<p>通过以上详细的HTML到Flutter转换分析，开发者可以准确理解设计稿意图，并使用Flutter框架高效实现界面效果。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>如何判断设备是否为iPhone X,iOS获取设备型号的方法。</title>
    <url>/2018/03/20/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%AE%BE%E5%A4%87%E6%98%AF%E5%90%A6%E4%B8%BAiPhone%20X,iOS%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%9E%8B%E5%8F%B7%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>因为本公司的项目一直是竖屏，所以一开始的思路是根据屏幕上方的状态栏的高度进行判断，但最后考虑到手机开启WiFi共享、或者有地图类软件打开时上方会有蓝条，根据导航栏判断是否为刘海屏就不准确了。</p>
<p>所以说起来最准确的就是根据设备的型号进行判断，因为苹果不同设备的型号不同，而我们可以获取到设备的型号，所以根据型号进行判断是最准确的。</p>
<p>但这样判断还是有缺点的，就是如果苹果出了新的手机时，我们需要重新将刘海屏的设备型号添加进去。</p>
<p>还有一点就是在模拟器上，获取的设备型号是i386和x86_64，所以在模拟器中我们可以根据屏幕宽高或者屏幕下方安全区域进行判断。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ (BOOL)isIphoneX&#123;</span><br><span class="line">    struct utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    NSString *platform = [NSString stringWithCString:systemInfo.machine encoding:NSASCIIStringEncoding];</span><br><span class="line">    if ([platform isEqualToString:@&quot;i386&quot;] || [platform isEqualToString:@&quot;x86_64&quot;]) &#123;</span><br><span class="line">        UIWindow *keyWindow = [[[UIApplication sharedApplication] delegate] window];</span><br><span class="line">        // 获取底部安全区域高度，iPhone X 竖屏下为 34.0，横屏下为 21.0，其他类型设备都为 0</span><br><span class="line">        BOOL haveSafeInset;</span><br><span class="line">        if (@available(iOS 11.0, *)) &#123;</span><br><span class="line">            CGFloat bottomSafeInset = keyWindow.safeAreaInsets.bottom;</span><br><span class="line">            haveSafeInset = (bottomSafeInset == 34.0f || bottomSafeInset == 21.0f);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            haveSafeInset = NO;</span><br><span class="line">        &#125;</span><br><span class="line">        return haveSafeInset;</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL isIPhoneX = [platform isEqualToString:@&quot;iPhone10,3&quot;] || [platform isEqualToString:@&quot;iPhone10,6&quot;] || [platform isEqualToString:@&quot;iPhone11,8&quot;] || [platform isEqualToString:@&quot;iPhone11,2&quot;] || [platform isEqualToString:@&quot;iPhone11,6&quot;] || [platform isEqualToString:@&quot;iPhone11,4&quot;];</span><br><span class="line">    return isIPhoneX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于设备的型号，我有大致写一下，不过具体的还是建议从<a href="https://www.theiphonewiki.com/wiki/Models">苹果设备类型说明</a>里面进行查看，然后当需要更新相应设备的时候可以直接在自己代码中添加。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1388397-f3be3dce72ee1e16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".m中的代码"></p>
<hr>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://www.theiphonewiki.com/wiki/Models">苹果设备类型说明</a></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提交takedown,删除泄漏源码的仓库和Fork</title>
    <url>/2019/04/27/%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4takedown,%E5%88%A0%E9%99%A4%E6%B3%84%E6%BC%8F%E6%BA%90%E7%A0%81%E7%9A%84%E4%BB%93%E5%BA%93%E5%92%8CFork/</url>
    <content><![CDATA[<h3 id="1、-GitHub-Submit-a-DMCA-takedown-notice"><a href="#1、-GitHub-Submit-a-DMCA-takedown-notice" class="headerlink" title="1、 GitHub: Submit a DMCA takedown notice"></a>1、 GitHub: Submit a DMCA takedown notice</h3><p>在昨天听到某网站后台源码泄露后，除了感到不可思议外，同时也在思考：如果自己公司的源码被恶意地泄漏到GitHub，我们应该怎么做才能及时止损？</p>
<p>说到这里，我们脑海中冒出的第一个词就是<code>takedown</code>.</p>
<p>为了保护机构、公司代码资产，如果我们公司代码出现了泄漏，我们可以提交<code>takedown</code>来申请删除泄漏的代码。</p>
<p>然而，对于这种特殊事件，时间极其宝贵(毕竟对于平常的我们来说，谁没事会提takedown呢)。如何快速进入相应网页入口，提交takedown就成为了重中之重。</p>
<h5 id="1-1、第一步：进入提交页面"><a href="#1-1、第一步：进入提交页面" class="headerlink" title="1.1、第一步：进入提交页面"></a>1.1、第一步：进入提交页面</h5><p>从<a href="https://help.github.com/en">帮助页面</a>进入<a href="https://github.com/contact/dmca">提交takedown页面</a>,选择左侧的<code>Copyright claims(DMCA)</code>,然后点击<code>Submit a takedown notice</code>按钮即可跳转到提交页面。</p>
<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4takedown%2C%E5%88%A0%E9%99%A4%E6%B3%84%E6%BC%8F%E6%BA%90%E7%A0%81%E7%9A%84%E4%BB%93%E5%BA%93%E5%92%8CFork/dmca.jpg" alt="dmca"></p>
<h5 id="1-2、第二步：提交相应信息"><a href="#1-2、第二步：提交相应信息" class="headerlink" title="1.2、第二步：提交相应信息"></a>1.2、第二步：提交相应信息</h5><p>填写相应信息Name、Email、Subject,同时要回答相应问题（回答的问题中包含：泄漏代码仓库的URL、Fork分支的URL、想要的解决方法、还有个人声明、联系方式等）。<br><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E5%A6%82%E4%BD%95%E6%8F%90%E4%BA%A4takedown%2C%E5%88%A0%E9%99%A4%E6%B3%84%E6%BC%8F%E6%BA%90%E7%A0%81%E7%9A%84%E4%BB%93%E5%BA%93%E5%92%8CFork/dmca-notice.jpg" alt="dmca-notice"></p>
<p>需要提交的信息包含以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//**您是版权所有者还是被授权代表版权所有者行事？**</span><br><span class="line">**Are you the copyright owner or authorized to act on the copyright owner’s behalf?**</span><br><span class="line">//**请提供据称被侵权的原始版权作品的详细说明。如果可能，请提供在线发布地址的URL。**</span><br><span class="line">**Please provide a detailed description of the original copyrighted work that has allegedly been infringed. If possible, include a URL to where it is posted online.**</span><br><span class="line">//**应删除哪些文件？请为每个文件提供URL，或者如果是整个存储库，则提供存储库的URL：**</span><br><span class="line">**What files should be taken down? Please provide URLs for each file, or if the entire repository, the repository’s URL:**</span><br><span class="line">//**您是否搜索过涉嫌侵权的文件或存储库的任何分支？每个分支都是一个独立的存储库，如果您认为它是侵权并希望将其删除，则必须单独识别。**</span><br><span class="line">**Have you searched for any forks of the allegedly infringing files or repositories? Each fork is a distinct repository and must be identified separately if you believe it is infringing and wish to have it taken down.**</span><br><span class="line">//**作品是否根据开源许可证获得许可？如果是这样，哪个开源许可证？涉嫌侵权的文件是否在开源许可下使用，或者是否违反了许可？**</span><br><span class="line">**Is the work licensed under an open source license? If so, which open source license? Are the allegedly infringing files being used under the open source license, or are they in violation of the license?**</span><br><span class="line">//**涉嫌侵权的最佳解决方案是什么？除了删除之外，其他人是否可以进行具体更改？可以将存储库设为私有吗？**</span><br><span class="line">**What would be the best solution for the alleged infringement? Are there specific changes the other person can make other than removal? Can the repository be made private?**</span><br><span class="line">//**您是否拥有涉嫌侵权人的联系信息？如果是，请提供：**</span><br><span class="line">**Do you have the alleged infringer’s contact information? If so, please provide it:**</span><br><span class="line">//**输入（或复制并粘贴）以下声明：“我确信在侵权网页上使用上述受版权保护的材料未经版权所有者或其代理人或法律授权。我考虑到合理使用。“**</span><br><span class="line">**Type (or copy and paste) the following statement: &quot;I have a good faith belief that use of the copyrighted materials described above on the infringing web pages is not authorized by the copyright owner, or its agent, or the law. I have taken fair use into consideration.&quot;**</span><br><span class="line">//**输入（或复制并粘贴）以下声明：“我发誓，根据伪证处罚，本通知中的信息准确无误，且我是版权所有者，或有权代表所有者行事，涉嫌侵权的专有权。“**</span><br><span class="line">**Type (or copy and paste) the following statement: &quot;I swear, under penalty of perjury, that the information in this notification is accurate and that I am the copyright owner, or am authorized to act on behalf of the owner, of an exclusive right that is allegedly infringed.&quot;**</span><br><span class="line">//**请确认您已阅读我们的提交DMCA删除通知指南：https：//help.github.com/articles/guide-to-submitting-a-dmca-takedown-notice/**</span><br><span class="line">**Please confirm that you have you have read our Guide to Submitting a DMCA Takedown Notice: https://help.github.com/articles/guide-to-submitting-a-dmca-takedown-notice/**</span><br><span class="line">//**我们可以回复您，请提供您的电话号码或实际地址：**</span><br><span class="line">**So that we can get back to you, please provide either your telephone number or physical address:**</span><br><span class="line">//**请在下面输入您的完整法定名称以签署此请求：**</span><br><span class="line">**Please type your full legal name below to sign this request:**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1.3 参考范文</p>
<p>关于书写格式我们可以到<a href="https://github.com/github/dmca">GitHub的dmcak仓库</a>进行查看别的公司是如何写的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Dear Github:</span><br><span class="line"></span><br><span class="line">We Are:</span><br><span class="line"></span><br><span class="line">Bilibili Security Group.It is nice to be able to yse Github such a professional and effcient platform,and mpw we have a need to be very hopefully able to get Github&#x27;s support and resolution.I sent the mail yesterday and the mail attachments is the my signature!!</span><br><span class="line"></span><br><span class="line">We have read and understand GitHub&#x27;s Guide to Filling a DMCA Notice</span><br><span class="line"></span><br><span class="line">Some one created a Repository called &#x27;openbilibili/go-common&#x27; two hours ago and many people forked it or clone it and reupload the repository,which contained too much sensitive information,such as secret key,database address,very important api key and so on.If these information are found by other people in Github,our company will be left out of pocket.</span><br><span class="line"></span><br><span class="line">The following is Github&#x27;s URL and Screenshots about this Repository:</span><br><span class="line"></span><br><span class="line">[private]</span><br><span class="line"></span><br><span class="line">Since the reupload repositories and the contains our company&#x27;s important source code,algorithm and system configuration,,so we hope Giuhub as soon as possible to help us completely remove the reupload repositories and thank you very much</span><br><span class="line"></span><br><span class="line">The following is our contact information:</span><br><span class="line"></span><br><span class="line">Company Name : Bilibili</span><br><span class="line">My e-mail Address: [private]</span><br><span class="line">Cellphone: [private]</span><br><span class="line">Company Address: [private]</span><br><span class="line">Website: https://www.bilibili.com/</span><br><span class="line">I have a good faith belief that use of the copyrighted materials described above on the infringing web pages is not authorized by the copyright owner, or its agent, or the law. I have taken fair use into consideration.</span><br><span class="line"></span><br><span class="line">I swear, under penalty of perjury, that the information in this notification is accurate and that I am the copyright owner, or am authorized to act on behalf of the owner, of an exclusive right that is allegedly infringed.</span><br><span class="line"></span><br><span class="line">Hoping for your response and thanks again.</span><br><span class="line">Please help us!!!</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://github.com/contact/dmca">提交takedown</a></li>
<li><a href="https://github.com/github/dmca">github&#x2F;dmca</a></li>
<li><a href="https://help.github.com/en/articles/dmca-takedown-policy">DMCA takedown policy</a></li>
<li><a href="https://github.com/github/dmca/blob/master/2019/04/2019-04-23-bilibili.md">BiliBili-dmca-2019&#x2F;04&#x2F;23</a></li>
<li><a href="https://linux.cn/article-9374-1.html">你的 Github 仓库被 DMCA Takedown 后怎么办？</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编译iOS版OpenCV动态库</title>
    <url>/2020/05/11/%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91iOS%E7%89%88OpenCV%E5%8A%A8%E6%80%81%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>将<code>OpenCV</code>的编译动态库单独拎出来写这篇博客，主要是因为根据官方的教程编译出来的动态库将可执行程序内部的<code>install Name</code>写死了，导致动态库无法链接到，报<code>dyld: Library not loaded:</code>错误。</p>
<p>在<code>GitHub</code>上<code>OpenCV</code>库的<code>issues</code>上也有人提，但并没有得到解决。</p>
<p>而它打包用的是<code>cmake</code>,自己也不想去修改他的<code>Python脚本</code>和<code>cmake文件</code>,于是使用了<code>install_name_tool</code>工具修改<code>OpenCV</code>二进制文件中的链接路径，完美地解决了该问题。</p>
<p>于是将其记录下来，以便后期查阅。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用脚本直接打包OpenCV动态库，添加到项目中会报下方错误：</span><br><span class="line"></span><br><span class="line">dyld: Library not loaded: /Users/cntp/Documents/opencv-4.1.0/platforms/ios/ios/build/build-iphonesimulator/lib/Release/opencv2.framework/opencv2</span><br><span class="line"></span><br><span class="line">  Referenced from: /private/var/containers/Bundle/Application/UUID/MyApp.app/Frameworks/MyApp.framework/MyApp</span><br><span class="line">  Reason: image not found</span><br><span class="line"></span><br><span class="line">使用otool工具查看，会发现二进制文件中将链接路径写成固定路径：</span><br><span class="line"></span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro opencv2.framework % otool -L opencv2</span><br><span class="line">opencv2:</span><br><span class="line">	/Users/cntp/Documents/opencv-4.1.0/platforms/ios/ios/build/build-iphonesimulator/lib/Release/opencv2.framework/opencv2 (compatibility version 4.1.0, current version 4.1.0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="关于Opencv"><a href="#关于Opencv" class="headerlink" title="关于Opencv"></a>关于<code>Opencv</code></h2><p><a href="https://zh.wikipedia.org/wiki/OpenCV">OpenCV</a>的全称是Open Source Computer Vision Library，是一个跨平台的计算机视觉库。OpenCV是由英特尔公司发起并参与开发，以BSD许可证授权发行，可以在商业和研究领域中免费使用。OpenCV可用于开发实时的图像处理、计算机视觉以及模式识别程序。该程序库也可以使用英特尔公司的IPP进行加速处理。</p>
<blockquote>
<p>主要模块分为以下几种：</p>
</blockquote>
<ul>
<li>core：简洁核心模块，基本函数，基本数据结构；</li>
<li>imgproc：图像处理模块，线性和非线性图像滤波，几何图像转换，颜色空间转换，直方图等；</li>
<li>video：视频分析模块，运动估计，背景消除，物体跟踪算法；</li>
<li>calib3d：基本多视角几何算法，单体和立体相机的标定，对象姿势估计，双目立体匹配算法和元素的三维重建；</li>
<li>features2d：包含了显著特征检测算法，描述算子和算子匹配算法；</li>
<li>objdetect：物体检测和一些预定义的物体的检测（如人脸，眼睛，杯子，人，汽车等）；</li>
<li>ml：多种机器学习算法，如K均值，支持向量机和神经网络；</li>
<li>highgui：简单易用接口，有视频捕捉，图像和视频编码功能，简单UI接口，iOS的是其中一个子集；</li>
<li>gpu：GPU加速算法，iOS不可用；</li>
<li>ocl：OpenCL通用算法，iOS不可用；</li>
<li>其它，辅助、算法等。</li>
</ul>
<blockquote>
<p>OpenCV可用于解决如下领域问题：</p>
</blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%93%B4%E5%A2%9E%E5%AF%A6%E5%A2%83">增强现实</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB">人脸识别</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB">手势识别</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92">人机交互</a></li>
<li>动作识别</li>
<li>运动跟踪</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E4%BD%93%E8%AF%86%E5%88%AB">物体识别</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2">图像分割</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E4%BA%BA">机器人</a></li>
</ul>
<h2 id="关于Cmake"><a href="#关于Cmake" class="headerlink" title="关于Cmake"></a>关于<code>Cmake</code></h2><p><code>OpenCV</code>使用<code>Cmake</code>工具进行编译的，所以在打包Framework之前我们也需要了解<code>Cmake</code>。</p>
<p><code>CMake</code>是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。具体内容可以查看<a href="https://baike.baidu.com/item/cmake/7138032?fr=aladdin">百度百科关于Cmake的介绍</a></p>
<p>同时也可以查看<a href="https://cmake.org/">CMake官网</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMake是旨在构建，测试和打包软件的开源，跨平台工具系列。</span><br><span class="line">CMake用于使用简单平台和独立于编译器的配置文件来控制软件编译过程，并生成可在您选择的编译器环境中使用的本机makefile和工作区。</span><br><span class="line">CMake工具套件是由Kitware创建的，旨在满足ITK和VTK等开源项目对功能强大的跨平台构建环境的需求。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">CMake is an open-source, cross-platform family of tools designed to build, test and package software. </span><br><span class="line">CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.</span><br><span class="line">The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="第一步：查看是否安装Cmake"><a href="#第一步：查看是否安装Cmake" class="headerlink" title="第一步：查看是否安装Cmake"></a>第一步：查看是否安装<code>Cmake</code></h3><p>如果想在Mac上编译OpenCV，需要检测Mac中是否安装过<code>Cmake</code>。</p>
<p>对于如何查看，我们可以直接在终端输入<code>cmake --version</code>,如果有相应版本会出现下方内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cntp@TPL-0000-161520deMacBook-Pro ~ % Cmake --version</span><br><span class="line">cmake version 3.17.1</span><br><span class="line"></span><br><span class="line">CMake suite maintained and supported by Kitware (kitware.com/cmake).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果出现<code>-bash: cmake: command not found</code>则代表电脑中并没有安装<code>Cmake</code>。</p>
<p>如果没有安装<code>Cmake</code>可以通过<code>Homebrew</code>进行安装，具体命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install cmake</span><br></pre></td></tr></table></figure>
<p>其中<code>Homebrew</code>是Mac OS平台下的软件包管理工具，大家应该都不陌生，具体的使用可以查看<a href="https://brew.sh/index_zh-cn">Homebrew官网</a>。</p>
<p>安装完成后即可编译OpenCV动态库</p>
<h3 id="第二步：编译OpenCV动态库"><a href="#第二步：编译OpenCV动态库" class="headerlink" title="第二步：编译OpenCV动态库"></a>第二步：编译<code>OpenCV</code>动态库</h3><p>下载相应版本的<code>OpenCV</code>，<code>cd</code>到<code>~/platforms/ios</code>目录，我们可以看到其打包的脚本<code>build_framework.py</code>，语言是<code>Python</code>并不是常用的<code>Shell</code>脚本,不过语言很简单。</p>
<p>如果项目中需要静态库，可以直接到<a href="https://opencv.org/">opencv官网</a>下载，或者直接使用<code>python build_framework.py ios</code>，其中<code>ios</code>为编译文件的路径，最后会在<code>ios</code>下看到<code>opencv2.framework</code>。</p>
<p>如果需要编译动态库需要在后面添加<code>--dynamic</code>，或者到<code>python</code>脚本中将<code>parser.add_argument(&#39;--dynamic&#39;, default=False, action=&#39;store_true&#39;, help=&#39;build dynamic framework (default is &quot;False&quot; - builds static framework)&#39;)</code>中的<code>default</code>改为<code>true</code>。</p>
<p>打包动态库的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /Users/cntp/Documents/opencv-4.1.0/platforms/ios </span><br><span class="line"></span><br><span class="line">python build_framework.py ios --dynamic</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>编译时间会比较长，结束后会在<code>/Users/cntp/Documents/opencv-4.1.0/platforms/ios/ios</code>目录下得到相应的<code>opencv2.framework</code>。</p>
<p>ps:不用吐槽<code>ios</code>不是<code>iOS</code>,它那边文档就是这样写的，也就这样用了。</p>
<h3 id="第三步：修改OpenCV二进制文件中的链接地址"><a href="#第三步：修改OpenCV二进制文件中的链接地址" class="headerlink" title="第三步：修改OpenCV二进制文件中的链接地址"></a>第三步：修改<code>OpenCV</code>二进制文件中的链接地址</h3><p>理论上到这一步就可以了，直接将<code>opencv2.framework</code>添加到外面工程中，修改<code>Embed</code>为<code>Embed&amp;Sign</code>就可以。</p>
<p>但当在运行时加载<code>opencv.framework</code>时，它会直接报错，由终端的打印日志可以看出app链接的路径为打包存放的默认路径，也就是<code>/Users/cntp/Documents/opencv-4.1.0/platforms/ios/ios</code>。</p>
<p>我们可以使用<code>otool</code>工具进行查看,命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cntp@TPL-0000-161520deMacBook-Pro opencv2.framework % otool -L opencv2</span><br><span class="line">opencv2:</span><br><span class="line">	/Users/cntp/Documents/opencv-4.1.0/platforms/ios/ios/build/build-iphonesimulator/lib/Release/opencv2.framework/opencv2 (compatibility version 4.1.0, current version 4.1.0)</span><br><span class="line">	/System/Library/Frameworks/Accelerate.framework/Accelerate (compatibility version 1.0.0, current version 4.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics (compatibility version 64.0.0, current version 1251.12.0)</span><br><span class="line">	/System/Library/Frameworks/QuartzCore.framework/QuartzCore (compatibility version 1.2.0, current version 1.11.0)</span><br><span class="line">	/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	/System/Library/Frameworks/UIKit.framework/UIKit (compatibility version 1.0.0, current version 61000.0.0)</span><br><span class="line">	/System/Library/Frameworks/AVFoundation.framework/AVFoundation (compatibility version 1.0.0, current version 2.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreImage.framework/CoreImage (compatibility version 1.0.0, current version 5.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreMedia.framework/CoreMedia (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreVideo.framework/CoreVideo (compatibility version 1.2.0, current version 1.5.0)</span><br><span class="line">	/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1570.15.0)</span><br><span class="line">	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)</span><br><span class="line">	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 400.9.4)</span><br><span class="line">	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1)</span><br><span class="line">	/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation (compatibility version 150.0.0, current version 1570.15.0)</span><br><span class="line">	/usr/lib/libc++abi.dylib (compatibility version 1.0.0, current version 400.17.0)</span><br></pre></td></tr></table></figure>
<p>我们可以看到链接<code>opencv2.framework/opencv2</code>的路径(install Name)是写死的。</p>
<p>而正确的动态库的链接路径(install Name)应该是<code>@rpath/opencv2.framework/opencv2</code>。</p>
<p>知道这一点后我们使用<code>install_name_tool</code>工具修改它的链接路径即可，我们可以将它写死的链接路径(install Name)修改成<code>@rpath/opencv2.framework/opencv2</code>，具体操作如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cntp@TPL-0000-161520deMacBook-Pro opencv2.framework % install_name_tool h</span><br><span class="line">Usage: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/install_name_tool [-change old new] ... [-rpath old new] ... [-add_rpath new] ... [-delete_rpath old] ... [-id name] input</span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro opencv2.framework % install_name_tool -id @rpath/opencv2.framework/opencv2 opencv2</span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro opencv2.framework % otool -L opencv2</span><br><span class="line">opencv2:</span><br><span class="line">	@rpath/opencv2.framework/opencv2 (compatibility version 4.1.0, current version 4.1.0)</span><br><span class="line">	/System/Library/Frameworks/Accelerate.framework/Accelerate (compatibility version 1.0.0, current version 4.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics (compatibility version 64.0.0, current version 1251.12.0)</span><br><span class="line">	/System/Library/Frameworks/QuartzCore.framework/QuartzCore (compatibility version 1.2.0, current version 1.11.0)</span><br><span class="line">	/System/Library/Frameworks/AssetsLibrary.framework/AssetsLibrary (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	/System/Library/Frameworks/UIKit.framework/UIKit (compatibility version 1.0.0, current version 61000.0.0)</span><br><span class="line">	/System/Library/Frameworks/AVFoundation.framework/AVFoundation (compatibility version 1.0.0, current version 2.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreImage.framework/CoreImage (compatibility version 1.0.0, current version 5.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreMedia.framework/CoreMedia (compatibility version 1.0.0, current version 1.0.0)</span><br><span class="line">	/System/Library/Frameworks/CoreVideo.framework/CoreVideo (compatibility version 1.2.0, current version 1.5.0)</span><br><span class="line">	/System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 1570.15.0)</span><br><span class="line">	/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)</span><br><span class="line">	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 400.9.4)</span><br><span class="line">	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1)</span><br><span class="line">	/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation (compatibility version 150.0.0, current version 1570.15.0)</span><br><span class="line">	/usr/lib/libc++abi.dylib (compatibility version 1.0.0, current version 400.17.0)</span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro opencv2.framework % </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用<code>install_name_tool h</code>查看所有指令，根据提示使用<code>install_name_tool -id @rpath/opencv2.framework/opencv2 opencv2</code>修改其链接路径(install Name)。</p>
<p>可以再使用<code>otool</code>工具验证一下,发现没有问题，然后再将其添加到项目中，因为是动态库，修改<code>Embed</code>为<code>Embed&amp;Sign</code>运行、使用同样没有问题。</p>
<p>至此问题完美解决。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><h2 id="关于-rpath、-loader-path、-executable-path"><a href="#关于-rpath、-loader-path、-executable-path" class="headerlink" title="关于@rpath、@loader_path、@executable_path"></a>关于@rpath、@loader_path、@executable_path</h2><p>在<code>Framework</code>工程的<code>TARGETS</code>-&gt;<code>Build Settings</code>中的<code>Linking</code>可以看到<code>Dynamic Library Install Name</code>、<code>Dynamic Library Install Name Base</code>、<code>Runpath Search Paths</code>等配置，根据其名称可以大致了解其含义。</p>
<p>这里先梳理下几个单词的概念。</p>
<h3 id="install-Name"><a href="#install-Name" class="headerlink" title="install Name"></a>install Name</h3><p><code>install Name</code>可以理解为安装名称，本质上是一个相对路径，主要是告诉链接器(linker synthesized)在运行时从哪调用需要的库。</p>
<p>就比如刚刚编译的动态库<code>opencv2.framework</code>，在编译的时候会被拷贝到应用程序（**.app）下的<code>Frameworks</code>目录下，其二进制文件的绝对路径地址大致为<code>~/-.app/Frameworks/opencv2.framework/opencv2</code>，其中<code>install Name</code>就是<code>@rpath/opencv2.framework/opencv2</code>。</p>
<p>当动态链接器需要<code>opencv2.framework</code>的时候，它就会从应用程序中根据<code>install Name</code>找到<code>opencv2.framework</code>。</p>
<h3 id="rpath"><a href="#rpath" class="headerlink" title="@rpath"></a>@rpath</h3><p>在维基百科中有关于<a href="https://en.wikipedia.org/wiki/Rpath">rpath</a>的介绍:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In computing, rpath designates the run-time search path hard-coded in an executable file or library. Dynamic linking loaders use the rpath to find required libraries.</span><br><span class="line"></span><br><span class="line">Specifically, it encodes a path to shared libraries into the header of an executable (or another shared library). This RPATH header value (so named in the Executable and Linkable Format header standards) may either override or supplement the system default dynamic linking search paths.</span><br></pre></td></tr></table></figure>
<p>翻译过来就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在计算中 rpath指定在可执行文件或库中硬编码的运行时 搜索路径。动态链接加载程序时使用rpath查找所需的库。</span><br><span class="line"></span><br><span class="line">具体来说，它将共享库的路径编码为可执行文件（或另一个共享库）的标头。此RPATH标头值（在“ 可执行文件和链接格式”标头标准中如此命名）可以替代或补充系统默认的动态链接搜索路径。</span><br></pre></td></tr></table></figure>
<p>其解释已经十分详细了，我们可以理解为<code>@rpath</code>就是一个相对路径。</p>
<p>其中<code>@rpath/opencv2.framework/opencv2</code>就相当于我们项目下动态库所在的位置<code>~/**.app/Frameworks/opencv2.framework/opencv2</code>。</p>
<h3 id="loader-path"><a href="#loader-path" class="headerlink" title="@loader_path"></a>@loader_path</h3><p><code>@loader_path</code>是<code>Framework</code>工程中<code>TARGETS -&gt; Build Settings -&gt; Linking -&gt; Runpath Search Paths</code>的一项配置,字面上的意思是加载路径。</p>
<p>其实也就是<code>Framework</code>加载的路径，比如<code>app</code>下的动态库<code>opencv2.framework</code>其<code>@loader_path</code>则相当于<code>~/**.app/Frameworks/opencv2.framework</code>。</p>
<h3 id="executable-path"><a href="#executable-path" class="headerlink" title="@executable_path"></a>@executable_path</h3><p><code>@executable_path</code>是<code>Framework</code>工程中<code>TARGETS -&gt; Build Settings -&gt; Linking -&gt; Runpath Search Paths</code>的一项配置,字面上的意思是可执行文件路径。</p>
<p>跟<code>@loader_path</code>不同的是<code>@executable_path</code>代表的是可执行文件(mach-o)的路径。还以<code>app</code>下加载动态库<code>opencv2.framework</code>为例，其<code>@executable_path</code>则相当于<code>~/**.app/Frameworks/opencv2.framework/opencv2</code></p>
<p>ps：写完<code>关于@rpath、@loader_path、@executable_path</code>本来还想将程序如何链接动态库、静态库写一下，最后还是决定单独拎出来写。</p>
<p>同时准备将动、静态库相互依赖；编译打包动、静态库；等注意事项整理下。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://github.com/opencv/opencv">opencv源码</a></li>
<li><a href="https://opencv.org/">opencv官网</a></li>
<li><a href="https://zh.wikipedia.org/wiki/OpenCV">OpenCV-维基百科</a></li>
<li><a href="https://docs.opencv.org/2.4/doc/tutorials/introduction/ios_install/ios_install.html#ios-installation">Installation in iOS</a></li>
<li><a href="https://baike.baidu.com/item/cmake/7138032?fr=aladdin">关于Cmake</a></li>
<li><a href="https://cmake.org/">CMake官网</a></li>
<li><a href="https://brew.sh/index_zh-cn">Homebrew官网</a></li>
<li><a href="https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fdebug-prefix-map">Clang命令行参数参考</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rpath">rpath</a></li>
<li><a href="https://matthew-brett.github.io/docosx/mac_runtime_link.html">Runtime linking on Mac</a></li>
<li><a href="https://www.jianshu.com/p/cd614e080078">Xcode中的链接路径问题</a></li>
<li><a href="https://developer.apple.com/documentation/">Apple Developer Documentation</a></li>
<li><a href="https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html#//apple_ref/doc/uid/TP40001908-SW1">Dynamic Library Programming Topics</a></li>
<li><a href="https://developer.apple.com/library/archive/navigation/">Documentation Archive</a></li>
</ul>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>如果获取项目的工程结构</title>
    <url>/2023/06/08/%E5%A6%82%E6%9E%9C%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>接收新项目的时候，我们需要快速搭建相关开发环境外也需要快速了解项目的工程结构，熟悉代码逻辑，所以我们就需要用到<code>tree</code>，使工程结构一目了然。</p>
<h2 id="1-安装tree"><a href="#1-安装tree" class="headerlink" title="1.安装tree"></a>1.安装tree</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure>

<h2 id="2-执行下方命令"><a href="#2-执行下方命令" class="headerlink" title="2.执行下方命令"></a>2.执行下方命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -I &#x27;test|build|Pods|fastlane/*|*.framework/*|bean/*.dart|*.ttf|*.txt|*.xcodeproj|*.xcworkspace|*.lproj|*.zip|*.ipa|*.lock|*.md|*.png|*.xml|*.mp3|*.jpg|*.gif|*.plist|*.xcconfig|*.sh|*.json&#x27; 项目文件夹</span><br></pre></td></tr></table></figure>

<p>最后关于<code>tree</code>常用命令如下所示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a 显示所有文件和目录。</span><br><span class="line">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">-d 显示目录名称而非内容。</span><br><span class="line">-D 列出文件或目录的更改时间。</span><br><span class="line">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class="line">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot;号。</span><br><span class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class="line">-i 不以阶梯状列出文件或目录名称。</span><br><span class="line">-I 不显示符合范本样式的文件或目录名称。</span><br><span class="line">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class="line">-n 不在文件和目录清单加上色彩。</span><br><span class="line">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class="line">-p 列出权限标示。</span><br><span class="line">-P 只显示符合范本样式的文件或目录名称。</span><br><span class="line">-q 用&quot;?&quot;号取代控制字符，列出文件和目录名称。</span><br><span class="line">-s 列出文件或目录大小。</span><br><span class="line">-t 用文件和目录的更改时间排序。</span><br><span class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令整理</title>
    <url>/2020/06/16/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>这篇文章主要是将常用的指令整理一下，便于后期的查阅。</p>
<p>这篇文章会不定时更新……</p>
<h2 id="部署Framework到cocoapods"><a href="#部署Framework到cocoapods" class="headerlink" title="部署Framework到cocoapods"></a>部署Framework到cocoapods</h2><blockquote>
<p>创建podsepc文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &lt;工程目录&gt;</span><br><span class="line"></span><br><span class="line">pod spec create MyFramework</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写podsepc文件</p>
</blockquote>
<p>可以参考<a href="https://xnxy.github.io/xnxy.github.io/2020/05/29/Podspec%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83(%E7%BF%BB%E8%AF%91)/">Podspec语法</a>进行编写。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pod::Spec.new do |spec|</span><br><span class="line"></span><br><span class="line">  spec.name         = &quot;ZVDynamicClipImage&quot;</span><br><span class="line">  spec.version      = &quot;0.0.1&quot;</span><br><span class="line">  spec.summary      = &quot;动态区域裁剪图片的iOS库&quot;</span><br><span class="line">  spec.homepage     = &quot;https://github.com/xnxy/ZVDynamicClipImage.git&quot;</span><br><span class="line">  spec.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</span><br><span class="line">  spec.author             = &#123; &quot;拿根针尖对麦芒&quot; =&gt; &quot;1661583063@qq.com&quot; &#125;</span><br><span class="line">  spec.social_media_url   = &quot;https://xnxy.github.io&quot;</span><br><span class="line">  spec.platform     = :ios, &quot;8.0&quot;</span><br><span class="line">  spec.source       = &#123; :git =&gt; &quot;https://github.com/xnxy/ZVDynamicClipImage.git&quot;, :tag =&gt; &quot;#&#123;spec.version&#125;&quot; &#125;</span><br><span class="line">  spec.source_files  = &quot;ZVDynamicClipImage/ZVDynamicClipImage/ZVDynamicClipImage.h&quot;</span><br><span class="line"></span><br><span class="line">  spec.subspec &#x27;Private&#x27; do |specB|</span><br><span class="line">    specB.source_files = &quot;ZVDynamicClipImage/ZVDynamicClipImage/Private/*&quot;</span><br><span class="line">  end</span><br><span class="line">  </span><br><span class="line">  spec.subspec &#x27;Public&#x27; do |specC|</span><br><span class="line">    specC.source_files = &quot;ZVDynamicClipImage/ZVDynamicClipImage/Public/*&quot;</span><br><span class="line">    specC.dependency &#x27;ZVDynamicClipImage/Private&#x27;</span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>验证<code>podspec</code>格式是否正确</p>
</blockquote>
<p>使用<code>pod lib lint</code>验证<code>podspec</code>文件格式是否正确。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod lib lint MyFramework.podspec --verbose --allow-warnings</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提交<code>podspec</code>文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push MyFramework.podspec</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="管理trunk账号"><a href="#管理trunk账号" class="headerlink" title="管理trunk账号"></a>管理trunk账号</h2><blockquote>
<p>注册trunk账号</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk register 你的邮箱 &#x27;用户名&#x27; --description=&#x27;描述内容&#x27; （邮箱参数是必须的，用户名和--description参数可省略）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看注册信息</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提交podspec文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk push 文件名.podspec</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将公共库的podspec文件部署到自己的私有库中</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod repo push REPO 文件名.podspec # REPO 私有索引库名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加他人共同维护某库</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk add-owner 公共库名 已注册trunk的邮箱地址</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移除某个维护人员</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk remove-owner 公共库名 已注册trunk的邮箱地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除已发的某个版本对应的工程信息</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod trunk delete 工程名 版本号</span><br></pre></td></tr></table></figure>

<h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><blockquote>
<p>查看pod版本及环境信息</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod env</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用某个私有库</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line">source &#x27;https://gitee.com/xnxyonly1/ZVPrivate.git&#x27;</span><br><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line">target &#x27;ZVPrivateDemo&#x27; do</span><br><span class="line"></span><br><span class="line"> 	pod &#x27;ZVPrivate&#x27;, :git =&gt; &#x27;https://gitee.com/xnxyonly1/ZVPrivate.git&#x27;, :tag =&gt; &#x27;0.0.1&#x27;</span><br><span class="line"> 	</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新本地缓存</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod cache clean --all</span><br><span class="line">rm -rf ~/Library/Caches/CocoaPods</span><br><span class="line">pod repo update</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Mac软件无法安装时，可以对其重签名</p>
</blockquote>
<p>有的软件安装到电脑上时会提示“……将对您的电脑造成伤害，您应该将它移到废纸篓”的提示。</p>
<p>可以对其进行重签名，先判断是否安装命令行工具<code>xcode-select --version</code></p>
<p>如果未安装，使用<code>xcode-select --install</code>指令进行安装，安装成功后执行下方指令对其进行重签名。</p>
<p>签名成功后重新打开即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codesign -f -s - --deep /Applications/软件名.app</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装与卸载cocoapods</p>
</blockquote>
<p>VPN如果自动模式不行的话，切换都全局模式，选择美国的节点。</p>
<p>安装cocoapods：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>

<p>指定安装cocoapods:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods -v 1.6.1</span><br></pre></td></tr></table></figure>

<p>查看当前cocoapods版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pod --version</span><br><span class="line">或</span><br><span class="line">gem list</span><br></pre></td></tr></table></figure>

<p>移除程序包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br><span class="line">或指定某版本：</span><br><span class="line">sudo gem uninstall cocoapods -v 1.9.1</span><br></pre></td></tr></table></figure>


<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.cocoapods.org/CocoaPods-Trunk/">CocoaPods Trunk</a></li>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html">Podspec Syntax Reference v1.9.0</a></li>
<li><a href="https://guides.cocoapods.org/syntax/podfile.html">Podfile Syntax Reference</a></li>
<li><a href="https://guides.cocoapods.org/terminal/commands.html">Command-line Reference</a></li>
</ul>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>批量更改文件名</title>
    <url>/2024/04/06/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近下了一些学习的教学视频，但教学视频中加了很多前缀导致文件名会比较长，每次用播放器选择视频的时候都看不太清。</p>
<p>所以写了个脚本方便更改文件名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 指定要替换的字符串</span><br><span class="line">search_string=&quot;要替换的字符串&quot;</span><br><span class="line"># 要替换成的字符串</span><br><span class="line">replace_string=&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 循环处理当前文件夹下的所有文件</span><br><span class="line">for file in *; do</span><br><span class="line">    # 检查文件是否是普通文件</span><br><span class="line">    if [ -f &quot;$file&quot; ]; then</span><br><span class="line">        # 获取文件名</span><br><span class="line">        filename=$(basename &quot;$file&quot;)</span><br><span class="line">        # 进行字符串替换</span><br><span class="line">        new_filename=&quot;$&#123;filename//$search_string/$replace_string&#125;&quot;</span><br><span class="line">        # 如果文件名有变化，则重命名文件</span><br><span class="line">        if [ &quot;$filename&quot; != &quot;$new_filename&quot; ]; then</span><br><span class="line">            mv &quot;$filename&quot; &quot;$new_filename&quot;</span><br><span class="line">            echo &quot;已将文件 &#x27;$filename&#x27; 重命名为 &#x27;$new_filename&#x27;&quot;</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;替换完成！&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>文字内容生成精美网页信息风格提示词</title>
    <url>/2025/08/14/%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E7%94%9F%E6%88%90%E7%B2%BE%E7%BE%8E%E7%BD%91%E9%A1%B5%E4%BF%A1%E6%81%AF%E9%A3%8E%E6%A0%BC%E6%8F%90%E7%A4%BA%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="文字内容生成精美网页信息风格-便当、科技风、杂志等"><a href="#文字内容生成精美网页信息风格-便当、科技风、杂志等" class="headerlink" title="文字内容生成精美网页信息风格(便当、科技风、杂志等)"></a>文字内容生成精美网页信息风格(便当、科技风、杂志等)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请为以下内容生成一个HTML网页，具体要求如下：</span><br><span class="line">视觉设计：</span><br><span class="line">    采用&#123;布局样式&#125;风格，&#123;设计颜色&#125;主题，营造现代高端氛围。</span><br><span class="line">字体与排版：</span><br><span class="line">    使用超大字体或数字突出核心要点，中文采用大号粗体，强调视觉冲击力。英文使用小号字体作为点缀，与中文形成比例反差，提升设计层次感。</span><br><span class="line">视觉元素：</span><br><span class="line">    融入超大视觉元素（如标题、背景图或装饰）以突出重点，与小型元素形成强烈对比。使用简洁的勾线风格图形作为数据可视化或配图元素，保持现代感和清晰度。</span><br><span class="line">色彩与效果：</span><br><span class="line">    运用高亮色（单色透明度渐变）营造科技感，每种高亮色独立使用，避免不同高亮色之间的渐变混杂。</span><br><span class="line">技术要求：</span><br><span class="line">    引入专业图标库（如Font Awesome或Material Icons，通过CDN加载），避免使用emoji作为主要图标。</span><br><span class="line">内容要求：</span><br><span class="line">    &#123;完整呈现所有内容要点，不省略任何信息 or 可精简内容&#125;尺寸：内容在&#123;宽高比和宽高尺寸&#125;内完成展示（不需要滚动也能完整展示），内容以中文为主展示。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例如下：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请为以下内容生成一个HTML网页，具体要求如下：</span><br><span class="line">视觉设计：</span><br><span class="line">    采用&#123;Magazine Layout&#125;风格，&#123;浅色，类似发黄的信纸色&#125;主题，营造现代高端氛围。</span><br><span class="line">字体与排版：</span><br><span class="line">    使用超大字体或数字突出核心要点，中文采用大号粗体，强调视觉冲击力。英文使用小号字体作为点缀，与中文形成比例反差，提升设计层次感。</span><br><span class="line">视觉元素：</span><br><span class="line">    融入超大视觉元素（如标题、背景图或装饰）以突出重点，与小型元素形成强烈对比。使用简洁的勾线风格图形作为数据可视化或配图元素，保持现代感和清晰度。</span><br><span class="line">色彩与效果：</span><br><span class="line">    运用高亮色（单色透明度渐变）营造科技感，每种高亮色独立使用，避免不同高亮色之间的渐变混杂。</span><br><span class="line">技术要求：</span><br><span class="line">    引入专业图标库（如Font Awesome或Material Icons，通过CDN加载），避免使用emoji作为主要图标。</span><br><span class="line">内容要求：</span><br><span class="line">    &#123;完整呈现所有内容要点，不省略任何信息&#125;尺寸：内容在&#123;1200*1800&#125;区域内完成完整展示（不需要滚动也能完整展示），内容以中文为主展示。</span><br></pre></td></tr></table></figure>


<h1 id="封面提示词"><a href="#封面提示词" class="headerlink" title="封面提示词"></a>封面提示词</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请为以上文字生成一个 HTML </span><br><span class="line">网页作为封面展示，浅色、类似信纸色的风格</span><br><span class="line">要求文字足够大足够醒目、有高亮、下划线和马克笔等丰富效果</span><br><span class="line">周边可以加入点缀提升美观度和视觉效果 </span><br><span class="line">2.3：1 的宽高比，但要保证中间或左边或右边有一个1:1 的区域，单独有效</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>新服务器部署开发环境</title>
    <url>/2024/04/18/%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="部署LAMP开发环境"><a href="#部署LAMP开发环境" class="headerlink" title="部署LAMP开发环境"></a>部署LAMP开发环境</h1><h2 id="安装Apache服务"><a href="#安装Apache服务" class="headerlink" title="安装Apache服务"></a>安装Apache服务</h2><blockquote>
<p>1.执行命令安装Apache及其扩展包。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install httpd httpd-manual mod_ssl mod_perl</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.依次执行命令启动Apache并设置自启动。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start httpd</span><br><span class="line">systemctl enable httpd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.执行命令查看Apache运行状态。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status httpd</span><br></pre></td></tr></table></figure>

<h2 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h2><blockquote>
<p>1.下载并安装MySQL。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm &amp;&amp;</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm &amp;&amp;</span><br><span class="line">yum install -y mysql-community-server --nogpgcheck</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.启动MySQL数据库。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.查看MySQL初始密码。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.登录数据库。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.修改MySQL默认密码。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=0;  #修改密码安全策略为低（只校验密码长度，至少8位）。</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.授予root用户远程管理权限。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;12345678&#x27;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>7.输入<code>exit</code>退出数据库。</p>
</blockquote>
<h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><blockquote>
<p>1.安装PHP环境。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.创建PHP测试页面。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt; /var/www/html/phpinfo.php</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.重启Apache服务。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.打开浏览器，访问<code>http://&lt;ECS公网IP&gt;/phpinfo.php</code>判断<code>PHP</code>是否安装成功</p>
</blockquote>
<h2 id="部署Node-js开发环境"><a href="#部署Node-js开发环境" class="headerlink" title="部署Node.js开发环境"></a>部署<code>Node.js</code>开发环境</h2><p>使用<code>NVM</code>安装多个<code>Node.js</code>版本</p>
<blockquote>
<p>1.安装分布式版本管理系统Git。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.克隆NVM源码到本地<code>~/.num</code>目录</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/mirrors/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`</span><br></pre></td></tr></table></figure>

<blockquote>
<p>3.配置NVM的环境变量。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;. ~/.nvm/nvm.sh&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.修改npm镜像源为阿里云镜像，以加快Node.js下载速度。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.查看Node.js版本。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list-remote</span><br></pre></td></tr></table></figure>

<blockquote>
<p>6.安装多个Node.js版本。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装v21.7.3版本。</span><br><span class="line">nvm install v21.7.3</span><br><span class="line">#安装v16.0.0版本。</span><br><span class="line">nvm install v16.0.0</span><br><span class="line">#查看已安装的Node.js版本。</span><br><span class="line">nvm ls</span><br></pre></td></tr></table></figure>

<p>部署测试项目</p>
<blockquote>
<p>7.返回<code>/root</code>路径。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>8.创建测试项目文件example.js。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch example.js</span><br></pre></td></tr></table></figure>

<blockquote>
<p>9.打开example.js</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim example.js</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="10">
<li>按i键进入编辑模式，并将以下内容添加至example.js文件中。</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">const hostname = &#x27;0.0.0.0&#x27;;</span><br><span class="line">const port = 3000;</span><br><span class="line">const server = http.createServer((req, res) =&gt; &#123; </span><br><span class="line">    res.statusCode = 200;</span><br><span class="line">    res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;);</span><br><span class="line">    res.end(&#x27;Hello World\n&#x27;);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, () =&gt; &#123; </span><br><span class="line">    console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>11.运行项目并得到项目的端口号。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node ~/example.js &amp;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>12.运行以下命令，列入系统已在监听的端口信息。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tpln</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="13">
<li>在ECS实例的安全组中，添加入方向规则，放行项目中配置的端口号。</li>
</ol>
</blockquote>
<blockquote>
<p>14.打开浏览器并访问http:&#x2F;&#x2F;&lt;ECS实例公网IP地址&gt;:&lt;项目端口号&gt;</p>
</blockquote>
<h2 id="部署Go开发环境"><a href="#部署Go开发环境" class="headerlink" title="部署Go开发环境"></a>部署<code>Go</code>开发环境</h2><blockquote>
<p>1.下载Go安装包</p>
</blockquote>
<p>访问<a href="">Go语言官网</a>或中国区的镜像网站，下载对应架构的<code>Go安装包</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看服务器架构</span><br><span class="line">uname -m</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.上传<code>tar.gz</code>类型的安装包到服务器</p>
</blockquote>
<blockquote>
<p>3.解压安装包到<code>/usr/local</code>位置</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -C /usr/local/ -zxf go1.22.0.linux-amd64.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>4.配置环境变量</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">#在.bash_profile中添加下方环境配置</span><br><span class="line">export GOROOT=/usr/local/go  </span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br><span class="line">#保存.bash_profile后执行下方命令生效</span><br><span class="line">source ~/.bash_profile  #或者您编辑的相应配置文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>5.验证安装</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>service</category>
      </categories>
      <tags>
        <tag>service</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器如何设置网站目录访问限制</title>
    <url>/2024/11/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>在弄隐私协议的时候，发现放到服务器上后用浏览器打开竟然可以访问到隐私协议index.html文件的上层目录，这就有点搞了。</p>
<p>因为个人的服务器部署的是LAMP开发环境，网上查了下，修改Apache配置解决了该问题。特在此记录，便于后期查看。</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>要在 Apache 服务器上设置禁止访问某个目录，同时允许访问该目录下的特定格式文件，可以通过 <code>.htaccess</code> 文件或在 Apache配置文件中进行设置。以下是两种方法的示例：</p>
<h3 id="方法一：使用-htaccess-文件"><a href="#方法一：使用-htaccess-文件" class="headerlink" title="方法一：使用 .htaccess 文件"></a>方法一：使用 <code>.htaccess</code> 文件</h3><ol>
<li><p><strong>创建或编辑 <code>.htaccess</code> 文件</strong>：<br>在你想要控制访问的目录下创建或编辑 <code>.htaccess</code> 文件。</p>
</li>
<li><p><strong>添加以下内容</strong>：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁止访问目录</span></span><br><span class="line"><span class="attribute">Options</span> -Indexes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止所有文件访问</span></span><br><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;.*&quot;</span>&gt;</span></span><br><span class="line">  <span class="attribute">Order</span> <span class="literal">Deny</span>,<span class="literal">Allow</span></span><br><span class="line">  <span class="attribute">Deny</span> from <span class="literal">all</span></span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许特定格式的文件访问</span></span><br><span class="line"><span class="section">&lt;FilesMatch <span class="string">&quot;\.(txt|html|jpg|png)$&quot;</span>&gt;</span></span><br><span class="line">  <span class="attribute">Order</span> <span class="literal">Allow</span>,<span class="literal">Deny</span></span><br><span class="line">  <span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line"><span class="section">&lt;/FilesMatch&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>解释：</p>
</blockquote>
<ul>
<li><code>Options -Indexes</code>：禁止目录列表。</li>
<li><code>&lt;FilesMatch &quot;.*&quot;&gt;</code>：匹配所有文件，禁止访问。</li>
<li><code>&lt;FilesMatch &quot;\.(txt|html|jpg|png)$&quot;&gt;</code>：匹配特定格式的文件（例如 <code>.txt</code>, <code>.html</code>, <code>.jpg</code>, <code>.png</code>），允许访问。</li>
</ul>
<h3 id="方法二：在-Apache-配置文件中设置"><a href="#方法二：在-Apache-配置文件中设置" class="headerlink" title="方法二：在 Apache 配置文件中设置"></a>方法二：在 Apache 配置文件中设置</h3><ol>
<li><strong>编辑 Apache 配置文件</strong>：</li>
</ol>
<p>可以使用<code>find / -name httpd.conf</code>查找对应目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find / -name httpd.conf</span><br></pre></td></tr></table></figure>
<p>然后使用vim 修改</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>添加以下内容</strong>：</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;Directory /path/to/your/directory&gt;</span></span><br><span class="line">  <span class="attribute">Options</span> -Indexes</span><br><span class="line">  <span class="section">&lt;FilesMatch <span class="string">&quot;.*&quot;</span>&gt;</span></span><br><span class="line">    <span class="attribute">Order</span> <span class="literal">Deny</span>,<span class="literal">Allow</span></span><br><span class="line">    <span class="attribute">Deny</span> from <span class="literal">all</span></span><br><span class="line">  <span class="section">&lt;/FilesMatch&gt;</span></span><br><span class="line">  <span class="section">&lt;FilesMatch <span class="string">&quot;\.(txt|html|jpg|png)$&quot;</span>&gt;</span></span><br><span class="line">    <span class="attribute">Order</span> <span class="literal">Allow</span>,<span class="literal">Deny</span></span><br><span class="line">    <span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line">  <span class="section">&lt;/FilesMatch&gt;</span></span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>

<p>   解释：</p>
<ul>
<li><code>&lt;Directory /path/to/your/directory&gt;</code>：指定你要控制访问的目录路径。</li>
<li>其他配置项与 <code>.htaccess</code> 文件中的相同。</li>
</ul>
<ol start="3">
<li><strong>重启 Apache 服务</strong>：<br>保存配置文件后，重启 Apache 服务以使更改生效。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>

<p>通过以上方法，你可以有效地禁止访问目录，同时允许访问目录下的特定格式文件。</p>
]]></content>
      <categories>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>web服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>根据TextEditingController实现原理定制响应式控制的Widget</title>
    <url>/2025/05/21/%E6%A0%B9%E6%8D%AETextEditingController%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%AE%9A%E5%88%B6%E5%93%8D%E5%BA%94%E5%BC%8F%E6%8E%A7%E5%88%B6%E7%9A%84Widget/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近在适配iPad和安卓大屏时，发现项目中有个页面在滚动时频繁build，codeReview代码发现是该页面需要监听页面滚动更改顶部tabbar的颜色。</p>
<p>而在每次滚动的时候都会调用<code>setState(() &#123;&#125;);</code>,导致整个页面频繁刷新。</p>
<p>于是根据TextEditingController实现原理定制响应式控制的Widget来解决该问题，记录一下。</p>
<p>同时让AI生成了示例，便于理解，示例也在文档中。</p>
<h2 id="TextEditingController-实现原理"><a href="#TextEditingController-实现原理" class="headerlink" title="TextEditingController 实现原理"></a>TextEditingController 实现原理</h2><p>TextEditingController 是 Flutter 中用于控制文本输入框内容的类，其核心原理如下：</p>
<ol>
<li><p><strong>ValueNotifier 基础</strong>：继承自 <code>ValueNotifier&lt;TextEditingValue&gt;</code>，这意味着它是一个可观察的值，当值变化时会通知所有监听器。</p>
</li>
<li><p><strong>文本状态管理</strong>：维护一个 <code>TextEditingValue</code> 对象，包含：</p>
<ul>
<li><code>text</code>：当前文本内容</li>
<li><code>selection</code>：文本选择范围</li>
<li><code>composing</code>：输入法组合文本范围</li>
</ul>
</li>
<li><p><strong>双向绑定</strong>：</p>
<ul>
<li>当用户在 TextField 中输入时，会更新 controller 的值</li>
<li>当通过代码修改 controller 的值时，会同步更新 TextField 显示</li>
</ul>
</li>
<li><p><strong>监听机制</strong>：通过 <code>addListener</code> 可以注册回调，当文本变化时执行相应操作</p>
</li>
</ol>
<h2 id="实现根据-alpha-参数显隐的-Widget"><a href="#实现根据-alpha-参数显隐的-Widget" class="headerlink" title="实现根据 alpha 参数显隐的 Widget"></a>实现根据 alpha 参数显隐的 Widget</h2><p>我们可以仿照 TextField 的实现原理，创建一个基于 ValueNotifier 的可观察 Widget：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlphaController</span> <span class="keyword">extends</span> <span class="title">ValueNotifier</span>&lt;<span class="title">double</span>&gt; </span>&#123;</span><br><span class="line">  AlphaController(&#123;<span class="built_in">double</span> alpha = <span class="number">1.0</span>&#125;) : <span class="keyword">super</span>(alpha.clamp(<span class="number">0.0</span>, <span class="number">1.0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> alpha =&gt; value;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">set</span> alpha(<span class="built_in">double</span> newAlpha) &#123;</span><br><span class="line">    value = newAlpha.clamp(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlphaControlledWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> AlphaController controller;</span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> AlphaControlledWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.controller,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AlphaControlledWidgetState createState() =&gt; _AlphaControlledWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AlphaControlledWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AlphaControlledWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    widget.controller.addListener(_handleAlphaChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(AlphaControlledWidget oldWidget) &#123;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">    <span class="keyword">if</span> (oldWidget.controller != widget.controller) &#123;</span><br><span class="line">      oldWidget.controller.removeListener(_handleAlphaChange);</span><br><span class="line">      widget.controller.addListener(_handleAlphaChange);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    widget.controller.removeListener(_handleAlphaChange);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleAlphaChange() &#123;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Opacity(</span><br><span class="line">      opacity: widget.controller.alpha,</span><br><span class="line">      child: widget.child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlphaDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AlphaDemoState createState() =&gt; _AlphaDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AlphaDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AlphaDemo</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> AlphaController _controller = AlphaController(alpha: <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Slider(</span><br><span class="line">          value: _controller.alpha,</span><br><span class="line">          onChanged: (value) &#123;</span><br><span class="line">            _controller.alpha = value;</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        AlphaControlledWidget(</span><br><span class="line">          controller: _controller,</span><br><span class="line">          child: Container(</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">200</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            child: Center(</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">&#x27;透明度控制&#x27;</span>,</span><br><span class="line">                style: TextStyle(color: Colors.white, fontSize: <span class="number">24</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现原理分析"><a href="#实现原理分析" class="headerlink" title="实现原理分析"></a>实现原理分析</h2><ol>
<li><strong>AlphaController</strong>：类似于 TextEditingController，继承自 ValueNotifier，负责管理 alpha 值</li>
<li><strong>AlphaControlledWidget</strong>：类似于 TextField，监听 controller 的变化并更新 UI</li>
<li><strong>响应式更新</strong>：当 controller 的值变化时，通过 setState 触发 Widget 重建</li>
<li><strong>生命周期管理</strong>：正确处理了 controller 的监听器添加和移除</li>
</ol>
<p>这种模式可以扩展到其他需要响应式控制的 Widget 属性，如大小、位置、颜色等。</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
  </entry>
  <entry>
    <title>根据字号对字符串进行等宽切割</title>
    <url>/2019/09/09/%E6%A0%B9%E6%8D%AE%E5%AD%97%E5%8F%B7%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E7%AD%89%E5%AE%BD%E5%88%87%E5%89%B2/</url>
    <content><![CDATA[<figure class="highlight obj-c"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)getArrayOfString:(<span class="built_in">NSString</span> *)string font:(<span class="built_in">UIFont</span> *)font width:(<span class="built_in">CGFloat</span>)width&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CTFontRef</span> myFont = <span class="built_in">CTFontCreateWithName</span>(( <span class="built_in">CFStringRef</span>)([font fontName]), [font pointSize], <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">NSMutableAttributedString</span> *attStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:string];</span><br><span class="line">    </span><br><span class="line">    [attStr addAttribute:(<span class="built_in">NSString</span> *)kCTFontAttributeName value:(__bridge  <span class="type">id</span>)myFont range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attStr.length)];</span><br><span class="line">    <span class="built_in">CFRelease</span>(myFont);</span><br><span class="line">    <span class="built_in">CTFramesetterRef</span> frameSetter = <span class="built_in">CTFramesetterCreateWithAttributedString</span>(( <span class="built_in">CFAttributedStringRef</span>)attStr);</span><br><span class="line">    <span class="built_in">CGMutablePathRef</span> path = <span class="built_in">CGPathCreateMutable</span>();</span><br><span class="line">    <span class="built_in">CGPathAddRect</span>(path, <span class="literal">NULL</span>, <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,width,<span class="number">100000</span>));</span><br><span class="line">    <span class="built_in">CTFrameRef</span> frame = <span class="built_in">CTFramesetterCreateFrame</span>(frameSetter, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="number">0</span>), path, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">NSArray</span> *lines = ( <span class="built_in">NSArray</span> *)<span class="built_in">CTFrameGetLines</span>(frame);</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *linesArray = [[<span class="built_in">NSMutableArray</span> alloc]init];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">id</span> line <span class="keyword">in</span> lines) &#123;</span><br><span class="line">        <span class="built_in">CTLineRef</span> lineRef = (__bridge  <span class="built_in">CTLineRef</span> )line;</span><br><span class="line">        <span class="built_in">CFRange</span> lineRange = <span class="built_in">CTLineGetStringRange</span>(lineRef);</span><br><span class="line">        <span class="built_in">NSRange</span> range = <span class="built_in">NSMakeRange</span>(lineRange.location, lineRange.length);</span><br><span class="line">        <span class="built_in">NSString</span> *lineString = [string substringWithRange:range];</span><br><span class="line">        <span class="built_in">CFAttributedStringSetAttribute</span>((<span class="built_in">CFMutableAttributedStringRef</span>)attStr, lineRange, kCTKernAttributeName, (<span class="built_in">CFTypeRef</span>)([<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.0</span>]));</span><br><span class="line">        <span class="built_in">CFAttributedStringSetAttribute</span>((<span class="built_in">CFMutableAttributedStringRef</span>)attStr, lineRange, kCTKernAttributeName, (<span class="built_in">CFTypeRef</span>)([<span class="built_in">NSNumber</span> numberWithInt:<span class="number">0.0</span>]));</span><br><span class="line">        [linesArray addObject:lineString];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPathRelease</span>(path);</span><br><span class="line">    <span class="built_in">CFRelease</span>( frame );</span><br><span class="line">    <span class="built_in">CFRelease</span>(frameSetter);</span><br><span class="line">    <span class="keyword">return</span> linesArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E6%A0%B9%E6%8D%AE%E5%AD%97%E5%8F%B7%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E7%AD%89%E5%AE%BD%E5%88%87%E5%89%B2/%E6%A0%B9%E6%8D%AE%E5%AD%97%E5%8F%B7%E5%92%8C%E5%AE%BD%E5%BA%A6%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E5%89%AA%E5%88%87.png" alt="根据字号和宽度对字符串进行剪切.png"></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>欧盟数字法案</title>
    <url>/2024/03/14/%E6%AC%A7%E7%9B%9F%E6%95%B0%E5%AD%97%E6%B3%95%E6%A1%88/</url>
    <content><![CDATA[<blockquote>
<p>更新2024年11月07日</p>
</blockquote>
<p>最近创建了应用，发现了苹果的提示消息，如果在<code>2025年2月17日</code>前没在“商务”板块设置交易商身份，App将从欧盟地区的AppStore下架。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开发者必须先设置交易商身份，才能在欧盟地区（EU）提交并分发新 App 或 App 更新。请按照《数字服务法》的要求，于2025年2月17日前在“商务”板块设置交易商身份，否则你的 App 将从欧盟地区的 App Store 中下架。</span><br></pre></td></tr></table></figure>

<hr>
<p>最近，苹果后台需要输入欧盟《数字服务法》合规信息，可以在<code>商务</code>模块操作。</p>
<p>关于是否为<code>交易商</code>可以查看<a href="https://developer.apple.com/cn/help/app-store-connect/manage-compliance-information/manage-european-union-digital-services-act-compliance-information/">管理《数字服务法》要求交易商提供的信息</a>和<a href="https://commission.europa.eu/strategy-and-policy/priorities-2019-2024/europe-fit-digital-age/digital-services-act_en">欧盟数字服务法官网</a>中的信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据 DSA 的定义，交易商是指“any natural person, or any legal person irrespective of whether privately or publicly owned, who is acting, including through any person acting in his or her name or on his or her behalf, for purposes relating to his or her trade, business, craft or profession（任何为自身贸易、商业、手工业或职业相关目的而行事的自然人或法人，无论其公私性质，包括任何以其名义或代表其行事的人）”。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E6%AC%A7%E7%9B%9F%E6%95%B0%E5%AD%97%E6%B3%95%E6%A1%88/%E3%80%8A%E6%95%B0%E5%AD%97%E6%9C%8D%E5%8A%A1%E6%B3%95%E3%80%8B%E5%90%88%E8%A7%84%E6%80%A7.png" alt="《数字服务法》合规性"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://developer.apple.com/cn/help/app-store-connect/manage-compliance-information/manage-european-union-digital-services-act-compliance-information/">管理《数字服务法》要求交易商提供的信息</a></li>
<li><a href="https://commission.europa.eu/strategy-and-policy/priorities-2019-2024/europe-fit-digital-age/digital-services-act_en">欧盟数字服务法官网</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>澳大利亚安全合规问题</title>
    <url>/2024/11/29/%E6%BE%B3%E5%A4%A7%E5%88%A9%E4%BA%9A%E5%AE%89%E5%85%A8%E5%90%88%E8%A7%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>近日，新闻报道<code>澳大利亚立法禁止16岁以下人群使用社交媒体</code>。</p>
<p>对于开发社交媒体类应用的企业来说，需要在AppStore后台和GP后台将年龄分级设置为<code>16+</code>,避免因合规问题被罚款或下架。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">澳大利亚立法禁止16岁以下人群使用社交媒体</span><br><span class="line"></span><br><span class="line">澳大利亚可能将成为首个禁止16岁以下人群使用社交媒体的国家，该国参议院以压倒性多数投票通过了这项严格的新法律。此前，众议院也通过了该法案。禁令至少需要12个月才能生效。根据这项禁令，如果科技公司未能采取措施阻止儿童开设账户，将面临最高5000万澳元的罚款。家长和青少年不会被罚款。Facebook、Instagram、TikTok和Snapchat等平台都将受到影响。</span><br></pre></td></tr></table></figure>


<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.gqb.gov.cn/news/2024/1107/59324.shtml">外媒：澳大利亚拟立法禁止16岁以下青少年使用社交媒体</a></li>
<li><a href="https://baijiahao.baidu.com/s?id=1817014891352573307&wfr=spider&for=pc">澳大利亚参议院通过法案 禁止16岁以下人群使用社交媒体</a></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>自动打包脚本报ruby找不到错误</title>
    <url>/2020/03/31/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC%E6%8A%A5ruby%E6%89%BE%E4%B8%8D%E5%88%B0%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>最近更新了CocoaPods，同时也更新了ruby，但在使用Jenkins自动打包的时候，发现脚本报错。在查询时发现网上很多错误信息，于是决定整理一下，方便以后查询。</p>
<blockquote>
<p>编译报错内容</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cntp@TPL-0000-161520deMacBook-Pro tpocrdemo % sh Packaging/AutoPackaging.sh</span><br><span class="line">***********************开始build archive app文件***********************</span><br><span class="line">当前目录路径--------&gt;/Users/cntp/Desktop/tpaiface-ios/ocr-191103/tp/tpaiface/dev/iphone/tpocr-v1.0.191101/tpocrdemo</span><br><span class="line">Packaging/AutoPackaging.sh: /usr/local/bin/xcpretty: /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/bin/ruby: bad interpreter: No such file or directory</span><br><span class="line">***********************编译失败********************************</span><br></pre></td></tr></table></figure>

<p>从报错信息中可以看出在使用<code>xcpretty</code>时使用的相应ruby版本未找到。</p>
<p>于是使用<code>open /System/Library/Frameworks/Ruby.framework/Versions</code> 打开相应目录发现目录中下级目录为<code>/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/bin/ruby</code>跟预期版本不符。</p>
<p>那就切换一下即可。</p>
<blockquote>
<p>查看<code>ruby</code>当前版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cntp@TPL-0000-161520deMacBook-Pro ~ % rvm current</span><br><span class="line">ruby-2.5.1</span><br><span class="line">cntp@TPL-0000-161520deMacBook-Pro ~ % ruby --version</span><br><span class="line">ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin18]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在使用<code>ruby --version</code>和<code>rvm current</code>指令查看版本时发现<code>ruby</code>的版本为<code>2.5.1</code>，而电脑中的那个目录为<code>2.6</code>，看来需要更新<code>ruby</code>，不过理论到排查到这里，只要切换下<code>ruby</code>的版本就可以了。</p>
<blockquote>
<p>切换<code>ruby</code>版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cntp@TPL-0000-161520deMacBook-Pro ~ % rvm --default use 2.5.1</span><br><span class="line">Using /Users/cntp/.rvm/gems/ruby-2.5.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为目录电脑安装的<code>ruby</code>的版本为<code>2.5.1</code>所以使用<code>rvm --default use 2.5.1</code>指令将Mac上的<code>ruby</code>的版本切换到<code>2.5.1</code>。</p>
<blockquote>
<p>运行脚本验证</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************自动打包结束**************************</span><br><span class="line">README.md			ipa-1.0				tpocr-ios-v1.0.191101.zip</span><br><span class="line">doc				ipa-1.0.zip			tpocr接口设计说明.md</span><br><span class="line">************************* done! 😎 **************************</span><br><span class="line">打包完成，本次共节约 4 分钟</span><br></pre></td></tr></table></figure>
<p>运行脚本，发现脚本已经不会报错，说明问题已经解决。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果开发者账号缴费成功后如何查看发票邮寄情况</title>
    <url>/2018/05/08/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%BC%B4%E8%B4%B9%E6%88%90%E5%8A%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%8F%91%E7%A5%A8%E9%82%AE%E5%AF%84%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>苹果开发者账号续费成功后，如果需要查看发票的邮寄情况。我们可以打开下方网址：<a href="https://secure1.store.apple.com/cn/shop/order/list?hist=90">https://secure1.store.apple.com/cn/shop/order/list?hist=90</a> 查看相应订单。</p>
<h3 id="选中相应订单，查看相应信息"><a href="#选中相应订单，查看相应信息" class="headerlink" title="选中相应订单，查看相应信息"></a>选中相应订单，查看相应信息</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%BC%B4%E8%B4%B9%E6%88%90%E5%8A%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%8F%91%E7%A5%A8%E9%82%AE%E5%AF%84%E6%83%85%E5%86%B5/%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E8%AE%A2%E5%8D%95.png" alt="选择相应订单"></p>
<h3 id="点击跟踪发票状态"><a href="#点击跟踪发票状态" class="headerlink" title="点击跟踪发票状态"></a>点击跟踪发票状态</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%BC%B4%E8%B4%B9%E6%88%90%E5%8A%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%8F%91%E7%A5%A8%E9%82%AE%E5%AF%84%E6%83%85%E5%86%B5/%E8%B7%9F%E8%B8%AA%E5%8F%91%E7%A5%A8%E7%8A%B6%E6%80%81.png" alt="跟踪发票状态"></p>
<h3 id="会跳转到EMS订单查询界面，输入验证码进行查询。"><a href="#会跳转到EMS订单查询界面，输入验证码进行查询。" class="headerlink" title="会跳转到EMS订单查询界面，输入验证码进行查询。"></a>会跳转到EMS订单查询界面，输入验证码进行查询。</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%BC%B4%E8%B4%B9%E6%88%90%E5%8A%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%8F%91%E7%A5%A8%E9%82%AE%E5%AF%84%E6%83%85%E5%86%B5/%E8%BE%93%E5%85%A5%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9F%A5%E8%AF%A2.png" alt="输入验证码查询"></p>
<h3 id="查看发票邮寄状态"><a href="#查看发票邮寄状态" class="headerlink" title="查看发票邮寄状态"></a>查看发票邮寄状态</h3><p><img src="http://blog-zhouwei.oss-cn-beijing.aliyuncs.com/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%BC%B4%E8%B4%B9%E6%88%90%E5%8A%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%8F%91%E7%A5%A8%E9%82%AE%E5%AF%84%E6%83%85%E5%86%B5/%E6%9F%A5%E7%9C%8B%E5%8F%91%E7%A5%A8%E9%82%AE%E5%AF%84%E6%83%85%E5%86%B5.png" alt="查看发票邮寄情况"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://secure1.store.apple.com/cn/shop/order/list?hist=90">苹果订单查询</a></li>
</ul>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>知识整理</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ECS搭建L2TP/IPsec VPN完整教程</title>
    <url>/2025/09/06/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%90%AD%E5%BB%BAL2TP%20IPsec%20VPN%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E9%85%8D%E7%BD%AE">服务器端配置</a><ul>
<li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a></li>
<li><a href="#%E5%AE%89%E8%A3%85%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6">安装必要软件</a></li>
<li><a href="#%E9%85%8D%E7%BD%AEipsec">配置IPsec</a></li>
<li><a href="#%E9%85%8D%E7%BD%AEl2tp">配置L2TP</a></li>
<li><a href="#%E9%85%8D%E7%BD%AEppp">配置PPP</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99">配置防火墙</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">启动服务</a></li>
</ul>
</li>
<li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE">客户端配置</a><ul>
<li><a href="#iphoneipad%E9%85%8D%E7%BD%AE">iPhone&#x2F;iPad配置</a></li>
<li><a href="#android%E6%89%8B%E6%9C%BA%E9%85%8D%E7%BD%AE">Android手机配置</a></li>
<li><a href="#mac%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE">Mac电脑配置</a></li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3">常见问题解决</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%AE">安全建议</a></li>
</ul>
<hr>
<h2 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h4><ul>
<li>阿里云ECS实例（推荐Ubuntu 18.04&#x2F;20.04或CentOS 7&#x2F;8）</li>
<li>公网IP地址</li>
<li>至少1GB内存</li>
<li>开放UDP 500、UDP 4500、TCP 1701端口</li>
</ul>
<h4 id="阿里云安全组配置"><a href="#阿里云安全组配置" class="headerlink" title="阿里云安全组配置"></a>阿里云安全组配置</h4><p>在阿里云控制台配置安全组规则，开放以下端口：</p>
<table>
<thead>
<tr>
<th>协议</th>
<th>端口范围</th>
<th>授权对象</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>UDP</td>
<td>500</td>
<td>0.0.0.0&#x2F;0</td>
<td>IPsec IKE</td>
</tr>
<tr>
<td>UDP</td>
<td>4500</td>
<td>0.0.0.0&#x2F;0</td>
<td>IPsec NAT-T</td>
</tr>
<tr>
<td>TCP</td>
<td>1701</td>
<td>0.0.0.0&#x2F;0</td>
<td>L2TP</td>
</tr>
</tbody></table>
<h3 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><h4 id="Ubuntu-x2F-Debian系统"><a href="#Ubuntu-x2F-Debian系统" class="headerlink" title="Ubuntu&#x2F;Debian系统"></a>Ubuntu&#x2F;Debian系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新系统包</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要软件包</span></span><br><span class="line">sudo apt install -y strongswan xl2tpd ppp lsof</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装内核模块支持（Ubuntu需要）</span></span><br><span class="line">sudo apt install -y linux-modules-extra-$(<span class="built_in">uname</span> -r)</span><br></pre></td></tr></table></figure>

<h4 id="CentOS-x2F-RHEL系统"><a href="#CentOS-x2F-RHEL系统" class="headerlink" title="CentOS&#x2F;RHEL系统"></a>CentOS&#x2F;RHEL系统</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新系统包</span></span><br><span class="line">sudo yum update -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装EPEL源</span></span><br><span class="line">sudo yum install -y epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要软件包</span></span><br><span class="line">sudo yum install -y strongswan xl2tpd ppp lsof</span><br></pre></td></tr></table></figure>

<h3 id="配置IPsec"><a href="#配置IPsec" class="headerlink" title="配置IPsec"></a>配置IPsec</h3><h4 id="1-编辑IPsec配置文件"><a href="#1-编辑IPsec配置文件" class="headerlink" title="1. 编辑IPsec配置文件"></a>1. 编辑IPsec配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/ipsec.conf</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/ipsec.conf - strongSwan IPsec configuration file</span></span><br><span class="line"></span><br><span class="line">config setup</span><br><span class="line">    <span class="attr">charondebug</span>=<span class="string">&quot;ike 1, knl 1, cfg 0&quot;</span></span><br><span class="line">    <span class="attr">uniqueids</span>=<span class="literal">no</span></span><br><span class="line"></span><br><span class="line">conn L2TP-PSK</span><br><span class="line">    <span class="attr">authby</span>=secret</span><br><span class="line">    <span class="attr">pfs</span>=<span class="literal">no</span></span><br><span class="line">    <span class="attr">auto</span>=add</span><br><span class="line">    <span class="attr">keyingtries</span>=<span class="number">3</span></span><br><span class="line">    <span class="attr">rekey</span>=<span class="literal">no</span></span><br><span class="line">    <span class="attr">ikelifetime</span>=<span class="number">8</span>h</span><br><span class="line">    <span class="attr">keylife</span>=<span class="number">1</span>h</span><br><span class="line">    <span class="attr">type</span>=transport</span><br><span class="line">    <span class="attr">left</span>=%defaultroute</span><br><span class="line">    <span class="attr">leftid</span>=YOUR_SERVER_PUBLIC_IP</span><br><span class="line">    <span class="attr">leftprotoport</span>=<span class="number">17</span>/<span class="number">1701</span></span><br><span class="line">    <span class="attr">right</span>=%any</span><br><span class="line">    <span class="attr">rightprotoport</span>=<span class="number">17</span>/%any</span><br><span class="line">    <span class="attr">dpddelay</span>=<span class="number">40</span></span><br><span class="line">    <span class="attr">dpdtimeout</span>=<span class="number">130</span></span><br><span class="line">    <span class="attr">dpdaction</span>=clear</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 将 <code>YOUR_SERVER_PUBLIC_IP</code> 替换为你的阿里云ECS公网IP地址。</p>
<h4 id="2-配置IPsec密钥"><a href="#2-配置IPsec密钥" class="headerlink" title="2. 配置IPsec密钥"></a>2. 配置IPsec密钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/ipsec.secrets</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/ipsec.secrets - strongSwan IPsec secrets file</span><br><span class="line">YOUR_SERVER_PUBLIC_IP %any : PSK &quot;YOUR_IPSEC_PSK&quot;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> </p>
<ul>
<li>将 <code>YOUR_SERVER_PUBLIC_IP</code> 替换为你的公网IP</li>
<li>将 <code>YOUR_IPSEC_PSK</code> 替换为一个强密码（建议16位以上随机字符）</li>
</ul>
<h3 id="配置L2TP"><a href="#配置L2TP" class="headerlink" title="配置L2TP"></a>配置L2TP</h3><h4 id="编辑xl2tpd配置文件"><a href="#编辑xl2tpd配置文件" class="headerlink" title="编辑xl2tpd配置文件"></a>编辑xl2tpd配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/xl2tpd/xl2tpd.conf</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line">ipsec <span class="attr">saref</span> = <span class="literal">yes</span></span><br><span class="line">saref <span class="attr">refinfo</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="section">[lns default]</span></span><br><span class="line">ip <span class="attr">range</span> = <span class="number">192.168</span>.<span class="number">42.10</span>-<span class="number">192.168</span>.<span class="number">42.250</span></span><br><span class="line">local <span class="attr">ip</span> = <span class="number">192.168</span>.<span class="number">42.1</span></span><br><span class="line">require <span class="attr">chap</span> = <span class="literal">yes</span></span><br><span class="line">refuse <span class="attr">pap</span> = <span class="literal">yes</span></span><br><span class="line">require <span class="attr">authentication</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">name</span> = l2tpd</span><br><span class="line">ppp <span class="attr">debug</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">pppoptfile</span> = /etc/ppp/options.xl2tpd</span><br><span class="line">length <span class="attr">bit</span> = <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<h3 id="配置PPP"><a href="#配置PPP" class="headerlink" title="配置PPP"></a>配置PPP</h3><h4 id="1-创建PPP选项文件"><a href="#1-创建PPP选项文件" class="headerlink" title="1. 创建PPP选项文件"></a>1. 创建PPP选项文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/ppp/options.xl2tpd</span><br></pre></td></tr></table></figure>

<p>添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipcp-accept-local</span><br><span class="line">ipcp-accept-remote</span><br><span class="line">ms-dns 8.8.8.8</span><br><span class="line">ms-dns 114.114.114.114</span><br><span class="line">noccp</span><br><span class="line">auth</span><br><span class="line">crtscts</span><br><span class="line">idle 1800</span><br><span class="line">mtu 1410</span><br><span class="line">mru 1410</span><br><span class="line">nodefaultroute</span><br><span class="line">debug</span><br><span class="line">proxyarp</span><br><span class="line">connect-delay 5000</span><br><span class="line">refuse-pap</span><br><span class="line">refuse-chap</span><br><span class="line">refuse-mschap</span><br><span class="line">require-mschap-v2</span><br><span class="line">persist</span><br><span class="line">logfile /var/log/xl2tpd.log</span><br></pre></td></tr></table></figure>

<h4 id="2-配置VPN用户账号"><a href="#2-配置VPN用户账号" class="headerlink" title="2. 配置VPN用户账号"></a>2. 配置VPN用户账号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<p>添加用户账号（格式：用户名 服务名 密码 IP地址）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Secrets for authentication using CHAP</span><br><span class="line"># client    server    secret    IP addresses</span><br><span class="line">vpnuser1    l2tpd     password123    *</span><br><span class="line">vpnuser2    l2tpd     password456    *</span><br></pre></td></tr></table></figure>

<h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><h4 id="Ubuntu-x2F-Debian-UFW"><a href="#Ubuntu-x2F-Debian-UFW" class="headerlink" title="Ubuntu&#x2F;Debian (UFW)"></a>Ubuntu&#x2F;Debian (UFW)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用IP转发</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.conf.all.accept_redirects = 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.conf.all.send_redirects = 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.conf.default.rp_filter = 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.conf.default.accept_source_route = 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.conf.default.send_redirects = 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.icmp_ignore_bogus_error_responses = 1&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用sysctl设置</span></span><br><span class="line">sudo sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置iptables规则</span></span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.42.0/24 -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -A FORWARD -s 192.168.42.0/24 -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -d 192.168.42.0/24 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存iptables规则</span></span><br><span class="line">sudo apt install -y iptables-persistent</span><br><span class="line">sudo netfilter-persistent save</span><br></pre></td></tr></table></figure>

<h4 id="CentOS-x2F-RHEL-firewalld"><a href="#CentOS-x2F-RHEL-firewalld" class="headerlink" title="CentOS&#x2F;RHEL (firewalld)"></a>CentOS&#x2F;RHEL (firewalld)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用IP转发</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;net.ipv4.ip_forward = 1&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置firewalld</span></span><br><span class="line">sudo firewall-cmd --permanent --add-service=ipsec</span><br><span class="line">sudo firewall-cmd --permanent --add-port=1701/tcp</span><br><span class="line">sudo firewall-cmd --permanent --add-port=500/udp</span><br><span class="line">sudo firewall-cmd --permanent --add-port=4500/udp</span><br><span class="line">sudo firewall-cmd --permanent --add-masquerade</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动并设置开机自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> strongswan</span><br><span class="line">sudo systemctl start strongswan</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> xl2tpd</span><br><span class="line">sudo systemctl start xl2tpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查服务状态</span></span><br><span class="line">sudo systemctl status strongswan</span><br><span class="line">sudo systemctl status xl2tpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查端口监听</span></span><br><span class="line">sudo netstat -tulpn | grep -E <span class="string">&#x27;:(500|4500|1701)&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="iPhone-x2F-iPad配置"><a href="#iPhone-x2F-iPad配置" class="headerlink" title="iPhone&#x2F;iPad配置"></a>iPhone&#x2F;iPad配置</h3><h4 id="步骤1：打开设置"><a href="#步骤1：打开设置" class="headerlink" title="步骤1：打开设置"></a>步骤1：打开设置</h4><ol>
<li>在iPhone&#x2F;iPad上打开「设置」应用</li>
<li>点击「通用」</li>
<li>点击「VPN与设备管理」或「VPN」</li>
</ol>
<h4 id="步骤2：添加VPN配置"><a href="#步骤2：添加VPN配置" class="headerlink" title="步骤2：添加VPN配置"></a>步骤2：添加VPN配置</h4><ol>
<li>点击「添加VPN配置…」</li>
<li>选择「L2TP」类型</li>
<li>填写以下信息：<ul>
<li><strong>描述</strong>：自定义名称（如：我的VPN）</li>
<li><strong>服务器</strong>：你的阿里云ECS公网IP</li>
<li><strong>账户</strong>：在chap-secrets中配置的用户名</li>
<li><strong>密码</strong>：对应的用户密码</li>
<li><strong>密钥</strong>：IPsec预共享密钥（YOUR_IPSEC_PSK）</li>
</ul>
</li>
<li>点击「完成」</li>
</ol>
<h4 id="步骤3：连接VPN"><a href="#步骤3：连接VPN" class="headerlink" title="步骤3：连接VPN"></a>步骤3：连接VPN</h4><ol>
<li>在VPN设置页面，打开VPN开关</li>
<li>选择刚才创建的VPN配置</li>
<li>等待连接成功</li>
</ol>
<h3 id="Android手机配置"><a href="#Android手机配置" class="headerlink" title="Android手机配置"></a>Android手机配置</h3><h4 id="步骤1：打开网络设置"><a href="#步骤1：打开网络设置" class="headerlink" title="步骤1：打开网络设置"></a>步骤1：打开网络设置</h4><ol>
<li>打开「设置」应用</li>
<li>点击「网络和互联网」或「连接」</li>
<li>点击「VPN」</li>
</ol>
<h4 id="步骤2：添加VPN配置-1"><a href="#步骤2：添加VPN配置-1" class="headerlink" title="步骤2：添加VPN配置"></a>步骤2：添加VPN配置</h4><ol>
<li>点击「+」或「添加VPN配置文件」</li>
<li>填写以下信息：<ul>
<li><strong>名称</strong>：自定义名称</li>
<li><strong>类型</strong>：选择「L2TP&#x2F;IPSec PSK」</li>
<li><strong>服务器地址</strong>：你的阿里云ECS公网IP</li>
<li><strong>L2TP密钥</strong>：留空（可选）</li>
<li><strong>IPSec标识符</strong>：留空</li>
<li><strong>IPSec预共享密钥</strong>：YOUR_IPSEC_PSK</li>
</ul>
</li>
<li>点击「保存」</li>
</ol>
<h4 id="步骤3：连接VPN-1"><a href="#步骤3：连接VPN-1" class="headerlink" title="步骤3：连接VPN"></a>步骤3：连接VPN</h4><ol>
<li>在VPN列表中点击刚创建的配置</li>
<li>输入用户名和密码</li>
<li>点击「连接」</li>
</ol>
<h3 id="Mac电脑配置"><a href="#Mac电脑配置" class="headerlink" title="Mac电脑配置"></a>Mac电脑配置</h3><h4 id="步骤1：打开网络偏好设置"><a href="#步骤1：打开网络偏好设置" class="headerlink" title="步骤1：打开网络偏好设置"></a>步骤1：打开网络偏好设置</h4><ol>
<li>点击屏幕左上角的苹果菜单</li>
<li>选择「系统偏好设置」</li>
<li>点击「网络」</li>
</ol>
<h4 id="步骤2：创建VPN连接"><a href="#步骤2：创建VPN连接" class="headerlink" title="步骤2：创建VPN连接"></a>步骤2：创建VPN连接</h4><ol>
<li>点击左下角的「+」号</li>
<li>在弹出窗口中选择：<ul>
<li><strong>接口</strong>：VPN</li>
<li><strong>VPN类型</strong>：IPSec上的L2TP</li>
<li><strong>服务名称</strong>：自定义名称</li>
</ul>
</li>
<li>点击「创建」</li>
</ol>
<h4 id="步骤3：配置VPN设置"><a href="#步骤3：配置VPN设置" class="headerlink" title="步骤3：配置VPN设置"></a>步骤3：配置VPN设置</h4><ol>
<li>填写以下信息：<ul>
<li><strong>服务器地址</strong>：你的阿里云ECS公网IP</li>
<li><strong>账户名称</strong>：chap-secrets中的用户名</li>
</ul>
</li>
<li>点击「鉴定设置」</li>
<li>在弹出窗口中填写：<ul>
<li><strong>密码</strong>：用户密码</li>
<li><strong>共享的密钥</strong>：IPsec预共享密钥</li>
</ul>
</li>
<li>点击「好」</li>
<li>点击「应用」</li>
</ol>
<h4 id="步骤4：连接VPN"><a href="#步骤4：连接VPN" class="headerlink" title="步骤4：连接VPN"></a>步骤4：连接VPN</h4><ol>
<li>点击「连接」按钮</li>
<li>等待连接成功，状态显示为「已连接」</li>
</ol>
<hr>
<h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-连接失败问题"><a href="#1-连接失败问题" class="headerlink" title="1. 连接失败问题"></a>1. 连接失败问题</h3><h4 id="检查服务器状态"><a href="#检查服务器状态" class="headerlink" title="检查服务器状态"></a>检查服务器状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查服务运行状态</span></span><br><span class="line">sudo systemctl status strongswan xl2tpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查端口监听</span></span><br><span class="line">sudo netstat -tulpn | grep -E <span class="string">&#x27;:(500|4500|1701)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">sudo <span class="built_in">tail</span> -f /var/log/syslog</span><br><span class="line">sudo <span class="built_in">tail</span> -f /var/log/xl2tpd.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h4 id="检查防火墙设置"><a href="#检查防火墙设置" class="headerlink" title="检查防火墙设置"></a>检查防火墙设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian</span></span><br><span class="line">sudo ufw status</span><br><span class="line">sudo iptables -L -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL</span></span><br><span class="line">sudo firewall-cmd --list-all</span><br></pre></td></tr></table></figure>

<h3 id="2-阿里云特殊配置"><a href="#2-阿里云特殊配置" class="headerlink" title="2. 阿里云特殊配置"></a>2. 阿里云特殊配置</h3><p>由于阿里云的网络环境特殊性，可能需要额外配置：</p>
<h4 id="修改IPsec配置"><a href="#修改IPsec配置" class="headerlink" title="修改IPsec配置"></a>修改IPsec配置</h4><p>在 <code>/etc/ipsec.conf</code> 中添加：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">conn L2TP-PSK</span><br><span class="line">    <span class="comment"># ... 其他配置 ...</span></span><br><span class="line">    <span class="attr">leftsubnet</span>=<span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></span><br><span class="line">    <span class="attr">rightsubnet</span>=<span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span></span><br><span class="line">    <span class="attr">forceencaps</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<h4 id="检查内网IP配置"><a href="#检查内网IP配置" class="headerlink" title="检查内网IP配置"></a>检查内网IP配置</h4><p>确保xl2tpd.conf中的local ip设置正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看内网IP</span></span><br><span class="line">ip addr show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际内网IP修改xl2tpd.conf中的local ip</span></span><br></pre></td></tr></table></figure>

<h3 id="3-客户端连接问题"><a href="#3-客户端连接问题" class="headerlink" title="3. 客户端连接问题"></a>3. 客户端连接问题</h3><h4 id="iOS设备"><a href="#iOS设备" class="headerlink" title="iOS设备"></a>iOS设备</h4><ul>
<li><strong>错误809</strong>：通常是IPsec配置问题，检查预共享密钥</li>
<li><strong>自动断开</strong>：iOS设备在锁屏后会断开WiFi，这是正常行为</li>
</ul>
<h4 id="Android设备"><a href="#Android设备" class="headerlink" title="Android设备"></a>Android设备</h4><ul>
<li><strong>认证失败</strong>：检查用户名密码是否正确</li>
<li><strong>连接超时</strong>：尝试重启VPN服务</li>
</ul>
<h4 id="Mac设备"><a href="#Mac设备" class="headerlink" title="Mac设备"></a>Mac设备</h4><ul>
<li><strong>连接失败</strong>：检查系统防火墙设置</li>
<li><strong>DNS问题</strong>：手动设置DNS服务器</li>
</ul>
<h3 id="4-性能优化"><a href="#4-性能优化" class="headerlink" title="4. 性能优化"></a>4. 性能优化</h3><h4 id="调整MTU值"><a href="#调整MTU值" class="headerlink" title="调整MTU值"></a>调整MTU值</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在/etc/ppp/options.xl2tpd中调整</span></span><br><span class="line">mtu 1410</span><br><span class="line">mru 1410</span><br></pre></td></tr></table></figure>

<h4 id="启用硬件加速"><a href="#启用硬件加速" class="headerlink" title="启用硬件加速"></a>启用硬件加速</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查是否支持硬件加速</span></span><br><span class="line">lsmod | grep -E <span class="string">&#x27;(aes|crypto)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在/etc/ipsec.conf中添加</span></span><br><span class="line">conn L2TP-PSK</span><br><span class="line">    <span class="comment"># ... 其他配置 ...</span></span><br><span class="line">    esp=aes128-sha1-modp2048!</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h2><h3 id="1-密码安全"><a href="#1-密码安全" class="headerlink" title="1. 密码安全"></a>1. 密码安全</h3><ul>
<li>使用强密码（至少16位，包含大小写字母、数字、特殊字符）</li>
<li>定期更换密码</li>
<li>不同用户使用不同密码</li>
</ul>
<h3 id="2-访问控制"><a href="#2-访问控制" class="headerlink" title="2. 访问控制"></a>2. 访问控制</h3><ul>
<li>限制VPN用户数量</li>
<li>定期审查用户账号</li>
<li>监控连接日志</li>
</ul>
<h3 id="3-网络安全"><a href="#3-网络安全" class="headerlink" title="3. 网络安全"></a>3. 网络安全</h3><ul>
<li>定期更新系统和软件包</li>
<li>配置fail2ban防止暴力破解</li>
<li>使用证书认证替代密码认证（高级配置）</li>
</ul>
<h3 id="4-监控和日志"><a href="#4-监控和日志" class="headerlink" title="4. 监控和日志"></a>4. 监控和日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看连接日志</span></span><br><span class="line">sudo <span class="built_in">tail</span> -f /var/log/syslog | grep -E <span class="string">&#x27;(xl2tpd|pluto|charon)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看认证日志</span></span><br><span class="line">sudo <span class="built_in">tail</span> -f /var/log/auth.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控连接状态</span></span><br><span class="line">sudo ipsec status</span><br></pre></td></tr></table></figure>

<h3 id="5-备份配置"><a href="#5-备份配置" class="headerlink" title="5. 备份配置"></a>5. 备份配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份重要配置文件</span></span><br><span class="line">sudo tar -czf vpn-config-backup.tar.gz \</span><br><span class="line">    /etc/ipsec.conf \</span><br><span class="line">    /etc/ipsec.secrets \</span><br><span class="line">    /etc/xl2tpd/xl2tpd.conf \</span><br><span class="line">    /etc/ppp/options.xl2tpd \</span><br><span class="line">    /etc/ppp/chap-secrets</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本教程详细介绍了在阿里云ECS上搭建L2TP&#x2F;IPsec VPN服务器的完整过程，包括：</p>
<ol>
<li><strong>服务器端配置</strong>：从环境准备到服务启动的完整步骤</li>
<li><strong>客户端配置</strong>：iPhone、Android、Mac三个平台的详细设置方法</li>
<li><strong>问题排查</strong>：常见问题的解决方案</li>
<li><strong>安全建议</strong>：提高VPN安全性的最佳实践</li>
</ol>
<p>按照本教程操作，你应该能够成功搭建一个稳定、安全的L2TP VPN服务器。如果遇到问题，请仔细检查配置文件和日志，大多数问题都可以通过日志信息定位和解决。</p>
<p><strong>注意事项</strong>：</p>
<ul>
<li>请确保遵守当地法律法规</li>
<li>VPN仅用于合法用途</li>
<li>定期维护和更新服务器</li>
<li>保护好配置文件和密钥信息</li>
</ul>
<hr>
<p><em>最后更新：2024年</em></p>
]]></content>
      <categories>
        <category>阿里云</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云Python环境搭建与服务器相关指南</title>
    <url>/2025/09/14/%E9%98%BF%E9%87%8C%E4%BA%91Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#%E9%98%BF%E9%87%8C%E4%BA%91python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">阿里云Python环境搭建</a><ul>
<li><a href="#%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84ecs%E5%AE%9E%E4%BE%8B">选择合适的ECS实例</a></li>
<li><a href="#%E8%BF%9E%E6%8E%A5%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%9C%8D%E5%8A%A1%E5%99%A8">连接到阿里云ECS服务器</a></li>
<li><a href="#%E5%AE%89%E8%A3%85python%E7%8E%AF%E5%A2%83">安装Python环境</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">配置虚拟环境</a></li>
</ul>
</li>
<li><a href="#python%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2">Python开发服务器部署</a><ul>
<li><a href="#%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84web%E6%A1%86%E6%9E%B6">选择合适的Web框架</a></li>
<li><a href="#%E9%83%A8%E7%BD%B2python%E5%BA%94%E7%94%A8">部署Python应用</a></li>
<li><a href="#%E9%85%8D%E7%BD%AEnginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">配置Nginx反向代理</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AEssl%E8%AF%81%E4%B9%A6">设置SSL证书</a></li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">常见问题与解决方案</a></li>
</ol>
<h2 id="阿里云Python环境搭建"><a href="#阿里云Python环境搭建" class="headerlink" title="阿里云Python环境搭建"></a>阿里云Python环境搭建</h2><h3 id="选择合适的ECS实例"><a href="#选择合适的ECS实例" class="headerlink" title="选择合适的ECS实例"></a>选择合适的ECS实例</h3><p>在阿里云上搭建Python开发环境，首先需要选择合适的ECS实例：</p>
<ul>
<li><strong>实例类型</strong>：推荐选择通用型或计算型实例</li>
<li><strong>操作系统</strong>：建议使用Ubuntu 20.04 LTS或CentOS 8</li>
<li><strong>配置</strong>：至少2核CPU，4GB内存（开发环境），生产环境根据实际需求调整</li>
</ul>
<h3 id="连接到阿里云ECS服务器"><a href="#连接到阿里云ECS服务器" class="headerlink" title="连接到阿里云ECS服务器"></a>连接到阿里云ECS服务器</h3><p>可以通过SSH连接到阿里云ECS服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@your_server_ip</span><br></pre></td></tr></table></figure>

<p>或者使用阿里云提供的Workbench进行连接。</p>
<h3 id="安装Python环境"><a href="#安装Python环境" class="headerlink" title="安装Python环境"></a>安装Python环境</h3><h4 id="Ubuntu系统安装Python："><a href="#Ubuntu系统安装Python：" class="headerlink" title="Ubuntu系统安装Python："></a>Ubuntu系统安装Python：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新包管理器</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python 3和pip</span></span><br><span class="line">sudo apt install python3 python3-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">python3 --version</span><br><span class="line">pip3 --version</span><br></pre></td></tr></table></figure>

<h4 id="CentOS系统安装Python："><a href="#CentOS系统安装Python：" class="headerlink" title="CentOS系统安装Python："></a>CentOS系统安装Python：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装EPEL仓库</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Python 3和pip</span></span><br><span class="line">sudo yum install python3 python3-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">python3 --version</span><br><span class="line">pip3 --version</span><br></pre></td></tr></table></figure>

<h3 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h3><p>使用虚拟环境可以隔离不同项目的依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装virtualenv</span></span><br><span class="line">pip3 install virtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建项目目录</span></span><br><span class="line"><span class="built_in">mkdir</span> myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">python3 -m venv venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure>

<h2 id="Python开发服务器部署"><a href="#Python开发服务器部署" class="headerlink" title="Python开发服务器部署"></a>Python开发服务器部署</h2><h3 id="选择合适的Web框架"><a href="#选择合适的Web框架" class="headerlink" title="选择合适的Web框架"></a>选择合适的Web框架</h3><p>常见的Python Web框架：</p>
<ul>
<li><strong>Flask</strong>：轻量级框架，适合小型项目和微服务</li>
<li><strong>Django</strong>：全功能框架，适合大型项目</li>
<li><strong>FastAPI</strong>：现代、快速的Web框架，支持异步</li>
</ul>
<h3 id="部署Python应用"><a href="#部署Python应用" class="headerlink" title="部署Python应用"></a>部署Python应用</h3><p>以Flask应用为例：</p>
<ol>
<li><p><strong>安装Gunicorn</strong>（WSGI服务器）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建简单的Flask应用</strong>（app.py）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用Gunicorn运行应用</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunicorn -w 4 -b 0.0.0.0:8000 app:app</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="配置Nginx反向代理"><a href="#配置Nginx反向代理" class="headerlink" title="配置Nginx反向代理"></a>配置Nginx反向代理</h3><p>安装Nginx：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure>

<p>配置Nginx反向代理（&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;myapp）：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8000;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启用配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/</span><br><span class="line">sudo nginx -t</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>

<h3 id="设置SSL证书"><a href="#设置SSL证书" class="headerlink" title="设置SSL证书"></a>设置SSL证书</h3><p>使用Let’s Encrypt免费SSL证书：</p>
<ol>
<li><p>安装Certbot：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt install certbot python3-certbot-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo yum install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取SSL证书：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx -d your_domain.com</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="1-权限问题"><a href="#1-权限问题" class="headerlink" title="1. 权限问题"></a>1. 权限问题</h3><p>在部署时可能会遇到权限问题，建议：</p>
<ul>
<li>不要以root用户运行应用</li>
<li>正确设置文件和目录权限</li>
</ul>
<h3 id="2-端口访问问题"><a href="#2-端口访问问题" class="headerlink" title="2. 端口访问问题"></a>2. 端口访问问题</h3><p>确保阿里云安全组已开放相应端口：</p>
<ul>
<li>HTTP: 80端口</li>
<li>HTTPS: 443端口</li>
<li>应用端口: 如8000等</li>
</ul>
<h3 id="3-环境变量配置"><a href="#3-环境变量配置" class="headerlink" title="3. 环境变量配置"></a>3. 环境变量配置</h3><p>敏感信息如数据库密码应通过环境变量配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在虚拟环境中设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> DATABASE_URL=mysql://user:password@localhost/dbname</span><br></pre></td></tr></table></figure>

<h3 id="4-日志管理"><a href="#4-日志管理" class="headerlink" title="4. 日志管理"></a>4. 日志管理</h3><p>配置应用日志以便排查问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">&#x27;app.log&#x27;</span>, level=logging.DEBUG)</span><br></pre></td></tr></table></figure>

<h3 id="5-自动重启服务"><a href="#5-自动重启服务" class="headerlink" title="5. 自动重启服务"></a>5. 自动重启服务</h3><p>使用systemd配置服务自动重启：</p>
<p>创建服务文件（&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;myapp.service）：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=My Python App</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=www-data</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/path/to/your/app</span><br><span class="line"><span class="attr">ExecStart</span>=/path/to/your/venv/bin/gunicorn -w <span class="number">4</span> -b <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span> app:app</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<p>启用服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start myapp</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> myapp</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>阿里云服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>鸿蒙版Flutter插件相关</title>
    <url>/2024/11/05/%E9%B8%BF%E8%92%99%E7%89%88Flutter%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>最近创建了个组织<code>EasyHM</code>，主要用来存储适配鸿蒙版的Flutter插件和相关资料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://gitee.com/EasyHM</span><br></pre></td></tr></table></figure>


<p>关于鸿蒙版Flutter插件开发可以查看<a href="https://gitee.com/openharmony-sig/flutter_samples/blob/master/ohos/docs/07_plugin/ohos%E5%B9%B3%E5%8F%B0%E9%80%82%E9%85%8Dflutter%E4%B8%89%E6%96%B9%E5%BA%93%E6%8C%87%E5%AF%BC.md">ohos平台适配flutter三方库指导</a>里面有详细的介绍，适配和开发鸿蒙版Flutter其实不难，其ArkTS和ArkUI跟Dart和Flutter很像。</p>
<p>主要的难点是对鸿蒙Api的不了解，但借助Ai很多功能都可以快速的开发和适配。</p>
<p>在适配的工程中整理了一些插件，有需要的可以自取，而有更多的插件则在公司的git上由于某种原因暂时并不会开源。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://gitee.com/openharmony-sig/flutter_samples/blob/master/ohos/docs/03_environment/%E9%B8%BF%E8%92%99%E7%89%88Flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8C%87%E5%AF%BC.md#%E9%B8%BF%E8%92%99%E7%89%88flutter%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8C%87%E5%AF%BC">鸿蒙版Flutter环境搭建指导</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_engine">鸿蒙版Flutter engine</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_flutter">鸿蒙版Flutter</a></li>
<li><a href="https://docs.qq.com/sheet/DVVJDWWt1V09zUFN2?tab=BB08J2">鸿蒙版Flutter三方库适配计划</a></li>
<li><a href="https://docs.qq.com/sheet/DUnljRVBYUWZKZEtF?tab=BB08J2">鸿蒙版Flutter Engine构建产物</a></li>
<li><a href="https://consumer.huawei.com/cn/support/harmonyos/models-next/">HarmonyOS NEXT 支持机型</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_samples/blob/master/ohos/docs/09_specifications/flutter%E9%B8%BF%E8%92%99%E5%8C%96%E5%B7%A5%E7%A8%8B%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.md">flutter鸿蒙化工程的目录结构</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_samples/blob/master/ohos/docs/09_specifications/update_flutter_plugin_structure.md">更新Flutter插件项目结构</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_samples/blob/master/ohos/docs/07_plugin/ohos%E5%B9%B3%E5%8F%B0%E9%80%82%E9%85%8Dflutter%E4%B8%89%E6%96%B9%E5%BA%93%E6%8C%87%E5%AF%BC.md">ohos平台适配flutter三方库指导</a></li>
<li><a href="https://gitee.com/openharmony-sig/flutter_samples/tree/master/ohos/docs#/openharmony-sig/flutter_samples/blob/master/ohos/docs/./04_development/README.md">鸿蒙Flutter开发文档</a></li>
</ul>
<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>主要存放适配鸿蒙的flutter插件和相关资料</p>
<ul>
<li>Flutter version 3.7.12</li>
<li>Dart version 2.19.6</li>
<li>DevTools version 2.20.1</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>cached_network_image 3.2.3 鸿蒙版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cached_network_image:</span><br><span class="line">  git:</span><br><span class="line">    url: https://gitee.com/EasyHM/cached_network_image.git</span><br><span class="line">    ref: master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>flutter_localization 0.1.14 鸿蒙版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter_localization: </span><br><span class="line">  git:</span><br><span class="line">    url: https://gitee.com/EasyHM/flutter_localization.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>easy_refresh 3.3.5+1 鸿蒙版本</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">easy_refresh:</span><br><span class="line">   git:</span><br><span class="line">    url: https://gitee.com/EasyHM/flutter_easy_refresh.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>fluwx 3.13.1 鸿蒙版本(条件限制未测试)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fluwx:</span><br><span class="line">   git:</span><br><span class="line">    url: https://gitee.com/EasyHM/fluwx.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>screen_brightness 0.2.2+1 鸿蒙版本(条件限制未测试)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen_brightness: </span><br><span class="line">  git:</span><br><span class="line">    url: https://gitee.com/EasyHM/screen_brightness.git</span><br><span class="line">    path: screen_brightness</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
</search>
